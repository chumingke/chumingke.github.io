<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>chumingke-二师兄</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chumingke.github.io/"/>
  <updated>2017-10-08T09:36:32.000Z</updated>
  <id>https://chumingke.github.io/</id>
  
  <author>
    <name>chumingke</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Numpy学习笔记</title>
    <link href="https://chumingke.github.io//blog/2017/10/Numpy-learning-notes.html"/>
    <id>https://chumingke.github.io//blog/2017/10/Numpy-learning-notes.html</id>
    <published>2017-10-08T09:35:48.000Z</published>
    <updated>2017-10-08T09:36:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>通过Anconda安装</p><h1 id="网页形式的编辑器"><a href="#网页形式的编辑器" class="headerlink" title="网页形式的编辑器"></a>网页形式的编辑器</h1><p>Jupyter NoteBook<br>很好用<br>anconda安装好后，直接终端输入<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">jupyter notebook</span></div></pre></td></tr></table></figure></p><p>然后会跳出网页。目录类似GIT</p><h1 id="Numpy介绍-ndarry"><a href="#Numpy介绍-ndarry" class="headerlink" title="Numpy介绍+ndarry"></a>Numpy介绍+ndarry</h1><h2 id="scipy"><a href="#scipy" class="headerlink" title="scipy"></a>scipy</h2><p>scipy库是基于python生态的一款开源数值计算、科学与工程应用的开源软件。<br>包括常用的Numpy,pandas、matplotlib等库。</p><h2 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h2><h3 id="Numerical-Python"><a href="#Numerical-Python" class="headerlink" title="Numerical Python"></a>Numerical Python</h3><p>即数值python包</p><h3 id="包括的内容"><a href="#包括的内容" class="headerlink" title="包括的内容"></a>包括的内容</h3><p>1.一个具有矢量算术运算和复杂广播能力的快速且节省空间的多维数组，称为ndarray<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">N-dimensional<span class="built_in"> array </span>object</div></pre></td></tr></table></figure></p><p>2.用于对整组数据进行快速运算的标准数学函数<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ufunc (universal <span class="keyword">function</span> <span class="title">object);</span></div></pre></td></tr></table></figure></p><p>3.用于整合c/c++和Fortran代码的工具包<br>4.实用线性代数、傅里叶变换和随机数生成函数。numpy和稀疏矩阵运算包scipy配合使用更加方便</p><h3 id="约定导入方式"><a href="#约定导入方式" class="headerlink" title="约定导入方式"></a>约定导入方式</h3><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div></pre></td></tr></table></figure><h2 id="ndarray"><a href="#ndarray" class="headerlink" title="ndarray"></a>ndarray</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">np.array(      ##建立Ndarray多维数组，可以直接使用嵌套列表</div><div class="line">【</div><div class="line">    【<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>，<span class="number">4</span>】，          ##开头几个方括号，就是几维的</div><div class="line">    【<span class="number">2</span>，<span class="number">3</span>，<span class="number">4</span>，<span class="number">5</span>】</div><div class="line">  】，</div><div class="line">【</div><div class="line">    【<span class="number">3</span>，<span class="number">4</span>，<span class="number">5</span>，<span class="number">6</span>】，</div><div class="line">    【<span class="number">4</span>，<span class="number">5</span>，<span class="number">6</span>，<span class="number">7</span>】</div><div class="line">  】</div><div class="line">）</div></pre></td></tr></table></figure><h2 id="ndarray属性"><a href="#ndarray属性" class="headerlink" title="ndarray属性"></a>ndarray属性</h2><p>ndim——维度数量<br>shape——是一个表示各维度大小的元组，即数组的形状<br>dtype——是一个用于说明数组元素数据类型的对象<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">arr2 = np.array ( [ 'Python','cctv','ibeifeng',hello world' ] , dtype = '<span class="string">|S4')</span></div><div class="line"></div><div class="line">arr2  </div><div class="line">&gt;&gt;&gt;array ( [ 'Pyth','cctv','ibei','hell'],dtype = '|S4')</div></pre></td></tr></table></figure></p><p>size——元素总个数，即shape中个数组相乘</p><h1 id="ndarry的shape属性巧算"><a href="#ndarry的shape属性巧算" class="headerlink" title="ndarry的shape属性巧算"></a>ndarry的shape属性巧算</h1><h2 id="多维数组维度，shape算法"><a href="#多维数组维度，shape算法" class="headerlink" title="多维数组维度，shape算法"></a>多维数组维度，shape算法</h2><p>逗号分割</p><h2 id="怎么取数"><a href="#怎么取数" class="headerlink" title="怎么取数"></a>怎么取数</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr2【<span class="number">0</span>】【<span class="number">1</span>】【<span class="number">1</span>】</div></pre></td></tr></table></figure><h1 id="ndarry的常见创建方式"><a href="#ndarry的常见创建方式" class="headerlink" title="ndarry的常见创建方式"></a>ndarry的常见创建方式</h1><h2 id="array函数"><a href="#array函数" class="headerlink" title="array函数"></a>array函数</h2><p>接收一个普通python序列，转成ndarray，之前讲的</p><h2 id="zeros函数"><a href="#zeros函数" class="headerlink" title="zeros函数"></a>zeros函数</h2><p>创建指定长度或形状的全零数组<br>通过help(zeros)查看帮助<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">np.zero((<span class="number">2</span>,<span class="number">2</span>))</div><div class="line">##使用元组类型，两个括号，定义了两个维度，每个维度有两个值</div><div class="line">##<span class="number">2</span>行<span class="number">2</span>列，我觉得倒着看方便</div><div class="line">array([[<span class="number">0.</span> , <span class="number">0.</span>],            ##默认是浮点数</div><div class="line">       [<span class="number">0.</span> , <span class="number">0.</span>]])</div></pre></td></tr></table></figure></p><h2 id="ones函数"><a href="#ones函数" class="headerlink" title="ones函数"></a>ones函数</h2><p>创建指定长度或形状的全1数组，同zeros一样<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">np.ones((<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>) ,dtype = int)</div></pre></td></tr></table></figure></p><h2 id="empty函数"><a href="#empty函数" class="headerlink" title="empty函数"></a>empty函数</h2><p>创建一个没有任何具体值的数组（准确地说是一些未初始化的垃圾值）<br>作用：<br>填充随机值<br>比如我们要做算法，一开始不知道数值，设一个随机值<br>NAN 空值，缺失值</p><h2 id="其他创建方式"><a href="#其他创建方式" class="headerlink" title="其他创建方式"></a>其他创建方式</h2><h3 id="arrange函数"><a href="#arrange函数" class="headerlink" title="arrange函数"></a>arrange函数</h3><p>类似与python的range函数，通过指定开始值、终值和步长来创建一维数组，注意数组不包括终值<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">np.arange(<span class="number">2</span>,<span class="number">20</span>,<span class="number">3</span>)</div></pre></td></tr></table></figure></p><h3 id="linspace函数"><a href="#linspace函数" class="headerlink" title="linspace函数"></a>linspace函数</h3><p>通过指定开始值、终值和元素个数来创建一维数组，可以通过endpoint关键字指定是否包括终值，缺省设置是包括终值，等差数列</p><h3 id="logspace函数"><a href="#logspace函数" class="headerlink" title="logspace函数"></a>logspace函数</h3><p>和linspace类似，不过它创建等比数列<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">np.logspace(<span class="number">2</span>,<span class="number">20</span>,<span class="number">3</span>)</div><div class="line">##第一个值代表<span class="number">10</span>的<span class="number">2</span>次方，第二个代表<span class="number">10</span>的<span class="number">20</span>次方，第三个代表生成元素的个数</div></pre></td></tr></table></figure></p><h3 id="以上皆为一维数组，如何生成多维数组（转置）"><a href="#以上皆为一维数组，如何生成多维数组（转置）" class="headerlink" title="以上皆为一维数组，如何生成多维数组（转置）"></a>以上皆为一维数组，如何生成多维数组（转置）</h3><p>reshape<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">np.arange(<span class="number">2</span>,<span class="number">20</span>,<span class="number">2</span>).reshape((<span class="number">3</span>,<span class="number">3</span>))</div><div class="line">np.arange(<span class="number">2</span>,<span class="number">20</span>,<span class="number">2</span>).reshape((<span class="number">3</span>,<span class="number">-1</span>))</div><div class="line">##<span class="number">-1</span>代表根据前面的数自动计算后面的数</div></pre></td></tr></table></figure></p><h3 id="使用随机数填充数组"><a href="#使用随机数填充数组" class="headerlink" title="使用随机数填充数组"></a>使用随机数填充数组</h3><p>即用numpy.random模块的random()函数，数组所包含的元素数量由参数决定<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">np.random.random((2,3,4))</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#随机数范围一般在0-1之间</span></span></div><div class="line">np.random.random_sample()</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#生成每一位随机数的方法</span></span></div></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>先规范显示出数组，<br>层层去中括号对，直到无中括号对，每去一个层，一个维度，去掉一层[]，后的元素个数（逗号隔开）即该维度的元素个数。</p><h1 id="Numpy中的数据类型"><a href="#Numpy中的数据类型" class="headerlink" title="Numpy中的数据类型"></a>Numpy中的数据类型</h1><h2 id="创建时"><a href="#创建时" class="headerlink" title="创建时"></a>创建时</h2><p>创建Numpy数组时可以通过dtype属性显式指定数据类型，如果不指定Numpy会自己判断出合适的数据类型，所以一般无需显式指定。</p><h2 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h2><p>astype方法，可以转换数组的元素数据类型，得到一个新数组<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">arr2 = np.arange(2,10,2)</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#建立数组</span></span></div><div class="line">arr2.dtype</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看类型</span></span></div><div class="line">arr3 = arr2.astype('float‘）</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#转换为浮点格式</span></span></div><div class="line">arr4 = arr2.astype('|U2')</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#使用Unicode编码，每个元素长度为2</span></span></div><div class="line">arr5 = arr2.astype('|S2')</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#使用string编码（转换为十六进制编码），每个元素长度为2</span></span></div><div class="line">arr6 = np.array([1,2,3,'4'], dtype = np.float)</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#建议使用np中自带的形式np.float去处理，规范写法</span></span></div></pre></td></tr></table></figure></p><h2 id="改变array形状"><a href="#改变array形状" class="headerlink" title="改变array形状"></a>改变array形状</h2><h3 id="reshape"><a href="#reshape" class="headerlink" title="reshape"></a>reshape</h3><p>形状可变，元素总数不可变<br>不改变原来的ndarray,得到新的ndarray是原数组的视图</p><h3 id="视图的概念"><a href="#视图的概念" class="headerlink" title="视图的概念"></a>视图的概念</h3><h4 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h4><p>相当于多个变量使用（指向）一个内存地址（空间）<br>只要修改一个，都会修改</p><h4 id="副本"><a href="#副本" class="headerlink" title="副本"></a>副本</h4><p>复制一份放到新的内存空间<br>修改其中一个副本，其他的不会改变<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">arr3</span> = arr.copy()</div><div class="line"><span class="comment">##拷贝，生成副本</span></div></pre></td></tr></table></figure></p><p>因此对于ndarray的一些方法操作，首先区分是否会改变原来变量，以此来判断是视图还是副本<br>表格详见PPT，引号内填的一般是类型代码</p><h1 id="Nnmpy基本操作"><a href="#Nnmpy基本操作" class="headerlink" title="Nnmpy基本操作"></a>Nnmpy基本操作</h1><p>数组与标量、数组之间的运算</p><h2 id="numpy的算术运算"><a href="#numpy的算术运算" class="headerlink" title="numpy的算术运算"></a>numpy的算术运算</h2><p>加法<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arr = np.arange(<span class="number">0</span>,<span class="number">20</span>,<span class="number">2</span>)</div><div class="line">arr + <span class="number">2</span>           ##会给每一个元素都加<span class="number">2</span></div></pre></td></tr></table></figure></p><p>或者：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arr2 = np.arange(<span class="number">2</span>,<span class="number">40</span>,<span class="number">4</span>)    ##相加的数组形状要一样</div><div class="line">arr + arr2                  ##同一位置的做加法运算</div></pre></td></tr></table></figure></p><p>加减乘除基本相同<br>除法可能警告除数可能为零，结果为0<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">##怎么处理?</div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division        ##保证数据合法性</div><div class="line">arr2/arr           ##还是会警告，不过异常值原来为<span class="number">0</span>现在为nan</div></pre></td></tr></table></figure></p><ul><li>数组算数运算必须保证两边数组形状一致。</li><li>元素级的运算。<h2 id="数据的矩阵积（matrix-product）"><a href="#数据的矩阵积（matrix-product）" class="headerlink" title="数据的矩阵积（matrix product）"></a>数据的矩阵积（matrix product）</h2>1.满足第一个矩阵的列数与第二个矩阵的行数相同，才可以进行矩阵乘法——为保证每个元素都有的乘<br>2.矩阵积不是元素级运算<br>3.Excel案例<figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">##取随机数</div><div class="line">=<span class="built_in">randbetween</span>(<span class="number">0</span>,<span class="number">10</span>)</div><div class="line">##求每个公司花费的总金额和购买的产品大小</div></pre></td></tr></table></figure></li></ul><h1 id="索引和切片"><a href="#索引和切片" class="headerlink" title="索引和切片"></a>索引和切片</h1><h2 id="索引与切片"><a href="#索引与切片" class="headerlink" title="索引与切片"></a>索引与切片</h2><p>两种方法：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">new_arr1 [<span class="string">1 </span>][<span class="symbol"> 1 </span>]</div><div class="line">new_arr1 [ 1,1 ]</div></pre></td></tr></table></figure></p><p>例子：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">new_arr1 [1]</div><div class="line">new_arr1 [ 1,0:]                        ##普遍写法</div><div class="line">new_arr1 [0, 0:2 ,1:3 ]                 ##嵌套取数</div><div class="line"><span class="section">##或者</span></div><div class="line">new_arr1 [<span class="string">0</span>] [<span class="string"> 0 : 2 </span>][<span class="symbol"> 1 </span>] [ 1 : 3 ]</div></pre></td></tr></table></figure></p><ul><li>切片是视图<h2 id="布尔型索引"><a href="#布尔型索引" class="headerlink" title="布尔型索引"></a>布尔型索引</h2><h3 id="筛选作用"><a href="#筛选作用" class="headerlink" title="筛选作用"></a>筛选作用</h3>快速筛选数据在不在某个范围内<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">arr3 &gt; 0.5</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#进行判断，输出ture false矩阵</span></span></div><div class="line">arr3[arr3 &gt;0.5]</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#可以把满足条件的值取出来</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#true的位置取出来，组成新数组</span></span></div><div class="line">arr4 [arr4 =='Tom'] = 1</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#数据替换，将tom替换为1</span></span></div></pre></td></tr></table></figure></li></ul><h3 id="与非或操作"><a href="#与非或操作" class="headerlink" title="与非或操作"></a>与非或操作</h3><p>数据规整：与&amp;或|非~</p><h2 id="花式索引"><a href="#花式索引" class="headerlink" title="花式索引"></a>花式索引</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">arr = np.arange (<span class="number">32</span>).reshape((<span class="number">8</span>,<span class="number">4</span>))</div><div class="line">arr [[<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>]]</div><div class="line">arr [[<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>],[<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>]]  </div><div class="line">    ##前一个取出对应行，后一个取出对应列</div><div class="line">##整数数组形式索引</div><div class="line">ix</div><div class="line">##ix函数产生一个索引器</div></pre></td></tr></table></figure><p>详见PPT<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ix</div><div class="line">np.ix_([<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>],[<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>])</div><div class="line">np.ix_([<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>],[<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>])</div><div class="line">##而且进行了重新排列</div></pre></td></tr></table></figure></p><h1 id="数组转置与轴兑换"><a href="#数组转置与轴兑换" class="headerlink" title="数组转置与轴兑换"></a>数组转置与轴兑换</h1><h2 id="数组的T属性"><a href="#数组的T属性" class="headerlink" title="数组的T属性"></a>数组的T属性</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arr.transpose()      ##生成视图</div><div class="line">arr.T                ##生成视图</div></pre></td></tr></table></figure><h2 id="轴兑换"><a href="#轴兑换" class="headerlink" title="轴兑换"></a>轴兑换</h2><h1 id="通用函数"><a href="#通用函数" class="headerlink" title="通用函数"></a>通用函数</h1><p>1.快速的元素级数组函数<br>2.ufunc<br>一种对ndarray中的数据执行元素级运算的函数，也可以看做简单函数的矢量化包装器<br>简单函数:接收一个或多个标量值，并产生一个或多个标量值<br>3.常见的一元通用函数<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#详见PPT</span></span></div><div class="line">np.isnan(arr3)</div></pre></td></tr></table></figure></p><p>4.常见的二元通用函数<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">np</span><span class="selector-class">.power</span>(<span class="selector-tag">arr</span>,<span class="selector-tag">arr2</span>)</div></pre></td></tr></table></figure></p><p>5.聚合函数</p><ul><li>对一组值进行操作，返回一个单一值作为结果的函数</li><li>因此求数组所有元素之和、最大最小标准差就是聚合函数</li><li>聚合函数可以指定对数值的某个轴元素进行操作:<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr<span class="selector-class">.mean</span> (axis =<span class="number">0</span>)</div></pre></td></tr></table></figure></li></ul><h1 id="np-where函数"><a href="#np-where函数" class="headerlink" title="np.where函数"></a>np.where函数</h1><p>np.where函数是三元表达式 x if condition else y 的矢量化版本<br>实现数据的过滤操作<br>例子<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">xarr = np.array( [<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>])</div><div class="line">yarr = np.array( [<span class="number">1.2</span>,<span class="number">2.3</span>,<span class="number">3.4</span>,<span class="number">4.5</span>])</div><div class="line">bool_arr=np.array([<span class="literal">True</span>,<span class="literal">False</span>,<span class="literal">False</span>,<span class="literal">True</span>])   ##布尔数组</div><div class="line">zip_arr = zip (xarr,yarr,bool_arr)           ##数组合并</div><div class="line">result = [<span class="string">'%.2f'</span> % x <span class="keyword">if</span> bl else <span class="string">'%.2f'</span> % y  for x,y,bl <span class="keyword">in</span> zip_arr ]</div><div class="line">##三元表达式，满足条件输出，附带格式化功能</div><div class="line">np.<span class="keyword">where</span> (bool_arr,xarr,yarr)</div><div class="line">##如果用np.<span class="keyword">where</span>可以这么做</div><div class="line">##np.<span class="keyword">where</span>(表达式数组，当前表达式为<span class="literal">True</span>提取数据的数组，当前表达式为<span class="literal">False</span>提取数据的数组）</div><div class="line">result = [（ x <span class="keyword">if</span> bl else  y）  for x,y,bl <span class="keyword">in</span> zip_arr <span class="keyword">if</span> x &gt;<span class="number">2</span> ]</div><div class="line">##先做for 取出数值，然后做<span class="keyword">if</span>&gt;<span class="number">2</span>,如果大于<span class="number">2</span>，进行前面三元表达式操作，如果不大于就不操作</div></pre></td></tr></table></figure></p><h1 id="np-unique函数"><a href="#np-unique函数" class="headerlink" title="np.unique函数"></a>np.unique函数</h1><p>求数组中不重复的元素<br>例子:<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">arr = <span class="built_in">np</span>.<span class="built_in">array</span>(['中国‘，’中国‘，’中国‘，’美国‘，’英国‘])</div><div class="line">arr</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> arr: </div><div class="line">    <span class="built_in">print</span> i</div><div class="line">这样才可以显示中文</div><div class="line">arr1 = <span class="built_in">np</span>.<span class="built_in">unique</span>(arr)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> arr: </div><div class="line">    <span class="built_in">print</span> i                ##检查发现没有重复值了</div></pre></td></tr></table></figure></p><h1 id="数组数据文件读取"><a href="#数组数据文件读取" class="headerlink" title="数组数据文件读取"></a>数组数据文件读取</h1><p>分两种</p><h2 id="将数组以二进制格式保存到磁盘"><a href="#将数组以二进制格式保存到磁盘" class="headerlink" title="将数组以二进制格式保存到磁盘"></a>将数组以二进制格式保存到磁盘</h2><h3 id="save写数据"><a href="#save写数据" class="headerlink" title="save写数据"></a>save写数据</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arr = <span class="built_in">np</span>.<span class="built_in">random</span>.<span class="built_in">random</span>((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</div><div class="line"><span class="built_in">np</span>.<span class="built_in">save</span>('data',arr)</div><div class="line">    ##将多维数组存储到文件，自动添加后缀.npy（二进制文件，记事本无法打开）</div></pre></td></tr></table></figure><h3 id="load读取二进制形式的数据文件"><a href="#load读取二进制形式的数据文件" class="headerlink" title="load读取二进制形式的数据文件"></a>load读取二进制形式的数据文件</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">arr2</span> = np.load(<span class="string">'data.npy'</span>)</div><div class="line"><span class="comment">##读取文件时，需要后缀</span></div></pre></td></tr></table></figure><h2 id="存取文本文件"><a href="#存取文本文件" class="headerlink" title="存取文本文件"></a>存取文本文件</h2><h3 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h3><h4 id="np-loadtxt"><a href="#np-loadtxt" class="headerlink" title="np.loadtxt"></a>np.loadtxt</h4><blockquote><p>fname 文件名，dtype 数据类型，comments 注释行的符号定义，delimiter 数据分隔符的定义，converteres 转换函数，skipprows 跳过的行数，usecols 使用哪些列<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arr4 = np.loadtxt(<span class="string">'example.csv'</span>,delimiter = <span class="string">','</span> )</div><div class="line"> ##数字自动转为浮点数</div><div class="line"> ##如果原始数据中没有分隔符，用空格，就不用设置分隔符delimiter</div></pre></td></tr></table></figure></p></blockquote><h4 id="np-genfromtxt"><a href="#np-genfromtxt" class="headerlink" title="np.genfromtxt"></a>np.genfromtxt</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">np.genfromtxt(<span class="string">'example.csv'</span>,delimiters = <span class="string">','</span>)</div><div class="line">##类似loatxt</div></pre></td></tr></table></figure><h3 id="写入文本文件"><a href="#写入文本文件" class="headerlink" title="写入文本文件"></a>写入文本文件</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">np.savetxt(<span class="string">'arr.csv'</span>,arr5,delimiter = <span class="string">','</span>)</div><div class="line">##自动写入了科学计算法</div><div class="line"></div><div class="line">np.savetxt(<span class="string">'arr.csv'</span>,arr5,delimiter = <span class="string">','</span>  ,fmt = <span class="string">'%.2f'</span>)</div><div class="line"></div><div class="line">np.savetxt(<span class="string">'arr.csv'</span>,arr5.reshape((<span class="number">2</span>,<span class="number">6</span>)),delimiter = <span class="string">','</span>  ,fmt = <span class="string">'%.2f'</span>)</div><div class="line">##修改形状后写入</div><div class="line"></div><div class="line">arr3 = np.random.random((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</div><div class="line">##如果使用随机数，可能会报错，因为可能不是二维数组</div><div class="line">##如果数组为二维以上数组，必须转换为二维数组才能存储</div><div class="line"></div><div class="line">np.savetxt(<span class="string">'arr1.csv'</span>,arr3.reshape((<span class="number">4</span>,<span class="number">6</span>)),delimiter = <span class="string">','</span>)</div><div class="line">##解决办法，改变形状后，可以存进去</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;p&gt;通过Anconda安装&lt;/p&gt;
&lt;h1 id=&quot;网页形式的编辑器&quot;&gt;&lt;a href=&quot;#网页形式的编辑器&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="python" scheme="https://chumingke.github.io/categories/python/"/>
    
      <category term="numpy" scheme="https://chumingke.github.io/categories/python/numpy/"/>
    
    
      <category term="python" scheme="https://chumingke.github.io/tags/python/"/>
    
      <category term="numpy" scheme="https://chumingke.github.io/tags/numpy/"/>
    
  </entry>
  
  <entry>
    <title>Python2.7学习笔记（二）</title>
    <link href="https://chumingke.github.io//blog/2017/10/Python2-7-learning-notes-2.html"/>
    <id>https://chumingke.github.io//blog/2017/10/Python2-7-learning-notes-2.html</id>
    <published>2017-10-08T08:04:32.000Z</published>
    <updated>2017-10-08T08:05:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h1><h2 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h2><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><p>1.如果给定一个list或tuple我们可以通过for循环来历遍这个list后者tuple。<br>这种历遍我们称为迭代（Iteration)<br>2.dict<br>由于dict的储存不是按照list的方式顺序排列，所以迭代出的结果顺序可能不一样。<br>默认dict迭代的是key,如果要迭代value：<br><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> <span class="keyword">value</span> <span class="keyword">in</span> d.itervalues()</div></pre></td></tr></table></figure></p><p>如果要同时迭代:<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> d.iteritems()</div></pre></td></tr></table></figure></p><p>3.怎么判断是否可以迭代?<br>使用collections模块的iterable<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">form</span> collections import Iterable</div><div class="line"><span class="function"><span class="title">isinstanc</span><span class="params">(<span class="string">'abs'</span>,Iterable)</span></span></div></pre></td></tr></table></figure></p><p>4.下标循环<br>java通过下标循环<br>如果想在python中实现类似下标循环<br>内置的enumerate函数可以吧list编程索引-元素对<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> <span class="selector-tag">i</span>,value <span class="keyword">in</span> enumerate([<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>]):</div></pre></td></tr></table></figure></p><h3 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h3><p>1.列表生成式即List Comprehensions<br>内置的非常简单强大可以用来创建list的生成式<br>2.直接在列表里面写上公式<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[ x*x for x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>) <span class="keyword">if</span> x%<span class="number">2</span> == <span class="number">0</span> ]</div><div class="line">##还可以写两层循环，生成全排列</div><div class="line">##三层及以上使用较少</div></pre></td></tr></table></figure></p><p>3.列表生成式也可以使用两个变量生成list<br>4.最后把一个list中所有的字符串变小写</p><h3 id="生成器（Generator）"><a href="#生成器（Generator）" class="headerlink" title="生成器（Generator）"></a>生成器（Generator）</h3><p>1.如果列表元素可以按照某种算法推算出来，那我们是否可以在循环过程中不断推算出后续的元素而不必创建完整的list。python中这种一边循环一边计算的机制，称为生成器<br>2.只要把列表的[]改成（），就创建了一个generator<br>3.如果一个函数定义中包含yield关键字，那这个函数就是一个generator<br>4.generator和函数的执行流程不一样<br>函数是顺序执行，遇到return语句或者最后一行函数语句就返回。<br>而变成generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。<br>5.generator是非常强大的工具<br>6.斐波那契数列<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">def fib(max):</div><div class="line">n,a,<span class="attribute">b</span>=0,0,1</div><div class="line"><span class="keyword">while</span> n &lt; max:</div><div class="line"><span class="builtin-name">print</span> b</div><div class="line">a,<span class="attribute">b</span>=b,a+b</div><div class="line">n = n+1</div></pre></td></tr></table></figure></p><p>7.将斐波那契数列函数改为generator<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">##将print <span class="keyword">b </span>改为<span class="keyword">yield </span><span class="keyword">b</span></div><div class="line"><span class="keyword">def </span>fib(max):</div><div class="line">n,a,<span class="keyword">b=0,0,1</span></div><div class="line"><span class="keyword">while </span>n &lt; max:</div><div class="line"><span class="keyword">yield </span><span class="keyword">b</span></div><div class="line"><span class="keyword">a,b=b,a+b</span></div><div class="line"><span class="keyword">n </span>= n+<span class="number">1</span></div></pre></td></tr></table></figure></p><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><h3 id="高阶函数（Higher-order-function）"><a href="#高阶函数（Higher-order-function）" class="headerlink" title="高阶函数（Higher-order function）"></a>高阶函数（Higher-order function）</h3><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><p>1.变量可以指向函数<br>2.函数名也是变量<br>如果不慎将固定函数名指向其他变量，想要恢复只能重启python交互环境。<br>3.传入函数<br>将函数作为另一个函数的参数：高阶函数。</p><h4 id="map-reduce"><a href="#map-reduce" class="headerlink" title="map/reduce"></a>map/reduce</h4><h5 id="map"><a href="#map" class="headerlink" title="map"></a>map</h5><p>1.接受两个参数，第一个是函数，一个是序列<br>2.map将传入的函数一次作用到序列的每个元素，并把结果作为新的list返回<br>3.不改变原列表，返回新列表</p><h5 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h5><p>1.把一个函数作用在一个序列上，该函数必须接收两个参数，并把结果和序列的下一个参数做累计计算<br>2.例如阶乘<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">reduce(<span class="name">f</span>,[ x1,x2,x3,x4])   =    f(<span class="name">f</span>(<span class="name">f</span>(<span class="name">x1</span>,x2),x3),x4)</div></pre></td></tr></table></figure></p><p>3.可以写一个把字符串转化为整数的函数</p><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p>1.用于过滤序列<br>筛选函数<br>2.也是接收一个函数和一个序列，并把函数依次作用于每个元素，根据返回值是True还是False决定保留还是丢弃该元素<br>3.在一个list中，删掉偶数，只保留奇数，可以这么写<br>4.把一个序列中的空字符串删掉，可以这么写</p><h4 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h4><p>1.排序算法<br>2.通常规定，对于两个元素xy,如果认为x &lt; y,则返回-1，如果认为x == y ,则返回0，如果认为x&gt;y，则返回1<br>3.可以sorted()直接排序<br>4.sorted也是一个高阶函数，同样可以接收一个比较函数来实现自定义的排序<br>如果要倒序排序<br>如果要按字母序排序字符串</p><h3 id="返回函数"><a href="#返回函数" class="headerlink" title="返回函数"></a>返回函数</h3><p>1.高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回<br>2.我们来实现一个可变参数的求和<br>通常情况下<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_sum</span><span class="params">(*args)</span></span><span class="symbol">:</span></div><div class="line">    ax = <span class="number">0</span></div><div class="line">   <span class="keyword">for</span> n <span class="keyword">in</span> <span class="symbol">args:</span></div><div class="line">        ax = ax+n</div><div class="line">   <span class="keyword">return</span> ax</div></pre></td></tr></table></figure></p><p>如果不需要立即求和，而是在后面的代码中，根据需要再计算，可以不返回求和结果，而返回求和函数<br>这种称为“闭包（closure)”的程序结构拥有极大威力<br>例子<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">lazy_sum</span><span class="params">(*args)</span></span><span class="symbol">:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">()</span></span><span class="symbol">:</span></div><div class="line">        ax = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> <span class="symbol">args:</span></div><div class="line">            ax = ax +n</div><div class="line">        <span class="keyword">return</span> ax</div><div class="line">    <span class="keyword">return</span> sum</div></pre></td></tr></table></figure></p><p>当我们调用lazy_sum（）时，返回的并不是求和结果，而是求和函数<br>3.返回函数不要引用任何循环变量，或者后续会发生变化的变量<br>4.如果一定要引用，方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变，缺点是代码比较长，可利用lambda函数缩短代码。</p><h3 id="匿名函数lambda"><a href="#匿名函数lambda" class="headerlink" title="匿名函数lambda"></a>匿名函数lambda</h3><figure class="highlight llvm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">map ( lambda <span class="keyword">x</span>: <span class="keyword">x</span>*<span class="keyword">x</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>])</div><div class="line">lambda <span class="keyword">x</span>: <span class="keyword">x</span>*<span class="keyword">x</span></div><div class="line">##等价于:</div><div class="line">def f(<span class="keyword">x</span>)</div><div class="line">    return <span class="keyword">x</span>*<span class="keyword">x</span></div><div class="line">##<span class="keyword">x</span>表示函数参数</div></pre></td></tr></table></figure><p>匿名函数有个限制，只能有一个表达式，不用写return,返回值就是该表达式的结果。</p><h3 id="装饰器-Decorator"><a href="#装饰器-Decorator" class="headerlink" title="装饰器(Decorator)"></a>装饰器(Decorator)</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>1.函数也是对象，函数对象可以被赋值给变量，所以可以通过变量调用函数<br>2.函数有一个<strong>name</strong>属性，可以获取函数名<br>3.现在我们要增强一个函数的功能，比如，在函数前后自动打印日志。又不想修改该函数的定义，这种在代码运行期间动态增加功能的方式，我们称之为装饰器<br>4.本质上，Decorator就是一个返回函数的高阶函数</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import functools</div><div class="line">def <span class="built_in">log</span>(<span class="function"><span class="keyword">func</span>):</span></div><div class="line">    <span class="symbol">@functools</span>.wraps(<span class="function"><span class="keyword">func</span>)</span></div><div class="line">    def wrapper(*args, **kw):</div><div class="line">        print <span class="string">'call %s():'</span> % <span class="function"><span class="keyword">func</span>.<span class="title">__name__</span></span></div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(*args, **kw)</span></span></div><div class="line">    <span class="keyword">return</span> wrapper</div></pre></td></tr></table></figure><h3 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><blockquote><p>python的 functools 模块提供了很多有用的功能，其中一个就是偏函数 （Partial function) 。此处偏函数和数学意义上的不一样。<br>偏函数可以类似设定参数默认值，降低函数调用的难度。</p><h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><p>1.int函数提供额外的base参数，默认为10，可以做N进制转换：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">int ('<span class="number">12345</span>' ,base = <span class="number">8</span>)</div><div class="line"><span class="number">5349</span></div><div class="line">int ('<span class="number">12345</span>' ,<span class="number">16</span>)</div><div class="line"><span class="number">74565</span></div></pre></td></tr></table></figure></p></blockquote><p>2.假如要转换大量的二进制字符串，每次都传入int(x,base=2）非常麻烦，于是，我们想到可以定义一个int2()的函数<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">int2</span> <span class="params">(x,base =<span class="number">20</span></span></span></div><div class="line"><span class="function"><span class="params">    <span class="keyword">return</span> int(x,base)</span></span></div></pre></td></tr></table></figure></p><p>3.functools.partial可以帮助我们创建偏函数，不需要自己定义int2()<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import functools</div><div class="line">int2 = functools.<span class="keyword">partial</span>(<span class="keyword">int</span>,<span class="keyword">base</span> =<span class="number">2</span>)</div></pre></td></tr></table></figure></p><p>4.简单地说，functools.partial的作用就是，把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数，调用会更简单）<br>5.注意上面新的int2函数，仅仅是把base参数重新设定默认值为2，但也可以在函数调用时传入其他值</p><blockquote><p>当函数的参数个数太多，需要简化时，使用functools.partial创建一个新函数，这个新函数可以固定住原函数的部分参数</p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="使用模块"><a href="#使用模块" class="headerlink" title="使用模块"></a>使用模块</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>一个.py文件就称之为一个模块（Module）</p><h4 id="包（Package）"><a href="#包（Package）" class="headerlink" title="包（Package）:"></a>包（Package）:</h4><p>1.你也许还想到，如果不同的人编写的模块名相同怎么办？为了避免模块名冲突，Python又引入了按目录来组织模块的方法，称为包（Package）</p></blockquote><p>2.引入了包以后，只要顶层的包名不与别人冲突，那所有模块都不会与别人冲突。现在，abc.py模块的名字就变成了mycompany.abc，类似的，xyz.py的模块名变成了mycompany.xyz</p><p>3.每一个包目录下面都会有一个<strong>init</strong>.py的文件<br>这个文件是必须存在的，否则，Python就把这个目录当成普通目录，而不是一个包。<br><strong>init</strong>.py可以是空文件，也可以有Python代码<br>因为<strong>init</strong>.py本身就是一个模块，而它的模块名就是mycompany<br>类似的，可以有多级目录，组成多级层次的包结构<br>文件www.py的模块名就是mycompany.web.www</p><h4 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python   </div><div class="line">##第<span class="number">1</span>行和第<span class="number">2</span>行是标准注释，第<span class="number">1</span>行注释可以让这个hello.py文件直接在Unix/Linux/Mac上运行</div><div class="line"># -*- coding: utf<span class="number">-8</span> -*-</div><div class="line">##第<span class="number">2</span>行注释表示.py文件本身使用标准UTF<span class="number">-8</span>编码；</div><div class="line"></div><div class="line"><span class="string">' a test module '</span>         </div><div class="line">##第<span class="number">4</span>行是一个字符串，表示模块的文档注释，任何模块代码的第一个字符串都被视为模块的文档注释；</div><div class="line"></div><div class="line">__author__ = <span class="string">'Michael Liao'</span></div><div class="line">##第<span class="number">6</span>行使用__author__变量把作者写进去，这样当你公开源代码后别人就可以瞻仰你的大名；                                       </div><div class="line">##以上就是Python模块的标准文件模板，当然也可以全部删掉不写，但是，按标准办事肯定没错。</div><div class="line"><span class="keyword">import</span> sys                    ##导入该模块</div><div class="line">def test():</div><div class="line">    args = sys.argv</div><div class="line">    <span class="keyword">if</span> len(args)==<span class="number">1</span>:</div><div class="line">        print <span class="string">'Hello, world!'</span></div><div class="line">    elif len(args)==<span class="number">2</span>:</div><div class="line">        print <span class="string">'Hello, %s!'</span> % args[<span class="number">1</span>]</div><div class="line">    else:</div><div class="line">        print <span class="string">'Too many arguments!'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">##当我们在命令行运行hello模块文件时，Python解释器把一个特殊变量__name__置为__main__，而如果在其他地方导入该hello模块时，<span class="keyword">if</span>判断将失败，因此，这种<span class="keyword">if</span>测试可以让一个模块通过命令行运行时执行一些额外的代码，最常见的就是运行测试。</div><div class="line">##直接在命令行，可以调用</div><div class="line">##在交互环境，仅导入不能运行函数，需要调用</div><div class="line">    test()</div></pre></td></tr></table></figure><h4 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h4><p>1.导入模块时，还可以使用别名，这样，可以在运行时根据当前环境选择最合适的模块<br>2.比如Python标准库一般会提供StringIO和cStringIO两个库<br>3.两个库的接口和功能是一样的，但是cStringIO是C写的，速度更快<br>所以，你会经常看到这样的写法:<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">import</span> cStringIO <span class="keyword">as</span> <span class="type">StringIO</span></div><div class="line"><span class="keyword">except</span> <span class="type">ImportError</span>: <span class="comment"># 导入失败会捕获到ImportError</span></div><div class="line">    <span class="keyword">import</span> <span class="type">StringIO</span></div></pre></td></tr></table></figure></p><p>这样就可以优先导入cStringIO。如果有些平台不提供cStringIO，还可以降级使用StringIO。导入cStringIO时，用import … as …指定了别名StringIO，因此，后续代码引用StringIO即可正常工作</p><p>4.还有类似simplejson这样的库，在Python 2.6之开始内置，所以，会有这样的写法：<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">import</span> json <span class="comment"># python &gt;= 2.6</span></div><div class="line"><span class="keyword">except</span> <span class="type">ImportError</span>:</div><div class="line">    <span class="keyword">import</span> simplejson <span class="keyword">as</span> json <span class="comment"># python &lt;= 2.5</span></div></pre></td></tr></table></figure></p><p>5.由于Python是动态语言，函数签名一致接口就一样，因此，无论导入哪个模块后续代码都能正常工作。</p><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><p>在一个模块中，我们可能会定义很多函数和变量<br>1.有的函数和变量我们希望给别人使用</p><p>正常的函数和变量名是公开的（public），可以被直接引用<br>比如：abc，x123，PI等</p><p>2.有的函数和变量我们希望仅仅在模块内部使用<br>在Python中，是通过_前缀来实现的<br>类似<strong>xxx</strong>这样的变量是特殊变量，可以被直接引用，但是有特殊用途<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">比如上面的<span class="strong">__author__</span>，<span class="strong">__name__</span>就是特殊变量</div><div class="line">hello模块定义的文档注释也可以用特殊变量<span class="strong">__doc__</span>访问</div><div class="line">我们自己的变量一般不要用这种变量名</div></pre></td></tr></table></figure></p><p>类似_xxx和__xxx这样的函数或变量就是非公开的（private），不应该被直接引用<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">比如<span class="variable">_abc</span>，<span class="variable">__abc</span>等</div></pre></td></tr></table></figure></p><p>从编程习惯上不应该引用private函数或变量<br>例子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_private_1</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'Hello, %s'</span> % name</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_private_2</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'Hi, %s'</span> % name</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">greeting</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="keyword">if</span> len(name) &gt; <span class="number">3</span>:</div><div class="line">        <span class="keyword">return</span> _private_1(name)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> _private_2(name)</div></pre></td></tr></table></figure></p><p>我们在模块里公开greeting()函数，而把内部逻辑用private函数隐藏起来了。<br>这样，调用greeting()函数不用关心内部的private函数细节。<br>这也是一种非常有用的代码封装和抽象的方法。<br>即：外部不需要引用的函数全部定义成private，只有外部需要引用的函数才定义为public。</p><h3 id="使用第三方模块"><a href="#使用第三方模块" class="headerlink" title="使用第三方模块"></a>使用第三方模块</h3><h3 id="使用future"><a href="#使用future" class="headerlink" title="使用future"></a>使用<strong>future</strong></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第二部分&quot;&gt;&lt;a href=&quot;#第二部分&quot; class=&quot;headerlink&quot; title=&quot;第二部分&quot;&gt;&lt;/a&gt;第二部分&lt;/h1&gt;&lt;h2 id=&quot;高级特性&quot;&gt;&lt;a href=&quot;#高级特性&quot; class=&quot;headerlink&quot; title=&quot;高级特性&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="python" scheme="https://chumingke.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://chumingke.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python2.7学习笔记（一）</title>
    <link href="https://chumingke.github.io//blog/2017/10/Python2-7-learning-notes.html"/>
    <id>https://chumingke.github.io//blog/2017/10/Python2-7-learning-notes.html</id>
    <published>2017-10-08T06:16:27.000Z</published>
    <updated>2017-10-08T06:17:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>廖老师的教程<a href="https://www.liaoxuefeng.com" target="_blank" rel="external">https://www.liaoxuefeng.com</a></p><h1 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h1><h2 id="python简介"><a href="#python简介" class="headerlink" title="python简介"></a>python简介</h2><p>优缺点</p><h2 id="安装python"><a href="#安装python" class="headerlink" title="安装python"></a>安装python</h2><p>python解释器：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Python</span></div><div class="line"><span class="attribute">IPython</span></div><div class="line"><span class="attribute">JPython</span></div><div class="line"><span class="attribute">CPython</span></div><div class="line"><span class="attribute">ironPython</span></div></pre></td></tr></table></figure></p><h2 id="第一个python程序"><a href="#第一个python程序" class="headerlink" title="第一个python程序"></a>第一个python程序</h2><h3 id="使用文本编辑器"><a href="#使用文本编辑器" class="headerlink" title="使用文本编辑器"></a>使用文本编辑器</h3><p>推荐两个:<br>Sublime Text——免费<br>Notepad++——免费 中文界面</p><h3 id="运行py"><a href="#运行py" class="headerlink" title="运行py"></a>运行py</h3><p>终端如何使用py文件：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#定位到根目录下</span></span></div><div class="line">cd ...untitled</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#然后 python helloworld.py</span></span></div></pre></td></tr></table></figure></p><p>怎么直接运行py<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/usr/bin/env python    <span class="comment">##首先要在.py文件的第一行加上</span></span></div><div class="line"><span class="meta">$</span><span class="bash">  chmod a+x hello.py    <span class="comment">##然后通过命令</span></span></div></pre></td></tr></table></figure></p><h3 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h3><p>输出：print<br>输入：raw_input()</p><h2 id="python基础"><a href="#python基础" class="headerlink" title="python基础"></a>python基础</h2><h3 id="关于缩进"><a href="#关于缩进" class="headerlink" title="关于缩进"></a>关于缩进</h3><p>缩进的坏处是“复制-粘贴”功能失效了。<br>粘贴后必须重新检查缩进是否正确。</p><h3 id="数据类型和变量"><a href="#数据类型和变量" class="headerlink" title="数据类型和变量"></a>数据类型和变量</h3><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>整数，浮点数，字符串，布尔值，空值</p><blockquote><p>计算机使用二进制，所以有时候使用十六进制表示整数比较方便。<br>十六进制用0x前缀和0-9，a-f表示。例如：0xff00</p><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>1.同一个变量可以被反复赋值，而且可以是不同类型的变量<br>这种变量本身不固定的语言称之为动态语言。<br>与之对应的是静态语言<br>静态语言在定义变量时必须制定变量类型，如果不匹配就会报错。例如java。<br>例如：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int <span class="selector-tag">a</span> =<span class="number">123</span>        #<span class="selector-id">#a</span> 是整数类型变量</div><div class="line"><span class="selector-tag">a</span> = <span class="string">"ABC"</span>         ##会报错</div></pre></td></tr></table></figure></p></blockquote><p>2.理解变量在计算机内存中的表示<br>当我们写：a = ‘ABC’时，python干了两件事：<br><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">在内存中创建了一个‘ABC'的字符串</span></div><div class="line"><span class="comment">在内存中创建了一个名为a的变量，并指向‘ABC’</span></div></pre></td></tr></table></figure></p><p>也可以把一个变量a赋值给另一个变量b，这个操作实际上是把变量b指向变量a所指向的数据。<br>所以当给a重新赋值，就是让a指向别的值，对b无影响。</p><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p>通常用全部大写的变量名表示常量</p><h3 id="字符串和编码"><a href="#字符串和编码" class="headerlink" title="字符串和编码"></a>字符串和编码</h3><h4 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h4><p>因为计算机只能处理数字，要处理文本，就必须将文本转换为数字。</p><blockquote><p>最早计算机设计采用8个比特作为一个字节，所以一个字节能表示最大的整数是255。二进制11111111=十进制255。如果要表示更大的整数，就必须用更多字节<br>最早美国英文、数字、符号，使用ASCII编码。比如A的编码是65.小写字母z是122，127个字母。<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">GB2312</span>——中文</div><div class="line">Shift_JIS——日文</div><div class="line">Euc-kr——韩文</div><div class="line"><span class="built_in">Unicode</span>——所有语言</div><div class="line">UTF-<span class="number">8</span>——可变长编码</div></pre></td></tr></table></figure></p></blockquote><p>如果统一用unicode，虽然解决乱码问题<br>如果写的文本都是英文的话，使用unicode比ASCII需要多一倍的空间。<br>因此出现了把unicode编码转化成“可变长编码”的UTF-8。</p><blockquote><p>总结下现在计算机系统通用的字符编码工作方式<br>计算机内存中，统一使用Unicode编码<br>当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码<br>用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符存到内存里，编辑完成后，保存的时候再把Unicode转化为UTF-8保存到文件<br>浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器</p><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>1.最早python支持ASCII编码<br>把字母和对应的数字相互转换<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">ord</span><span class="params">()</span></span></div><div class="line"><span class="function"><span class="title">chr</span><span class="params">()</span></span></div></pre></td></tr></table></figure></p></blockquote><p>2.后来添加了对Unicode的支持<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> <span class="string">u'中文'</span>——中文</div><div class="line"><span class="string">u'中'</span>——<span class="string">u'\u4e2d'</span></div><div class="line"><span class="comment">##写u'中'和u'\u4e2d'是一样的</span></div><div class="line"><span class="comment">##\u后面是十六进制的Unicode码</span></div></pre></td></tr></table></figure></p><p>两种字符串如何转换？<br>字符串‘xxx’虽然是ASCII编码，但也可以看成UTF-8编码。但u’xxx’只能使Unicode编码。<br>把u’xxx’转换为UTF-8编码的‘xxx’用encode(‘utf-8’)方法：<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">u'ABC'.encode('utf-8')——'ABC'</div><div class="line">##英文字符转换后表示的UTF-8的值和Unicode值相等（但占据的储存空间不同）</div><div class="line">u'中文‘.encode('utf-8')——'<span class="symbol">\x</span>e4<span class="symbol">\x</span>b8<span class="symbol">\x</span>ad<span class="symbol">\x</span>e6<span class="symbol">\x</span>96<span class="symbol">\x</span>87'</div><div class="line">##中文字符转换后1个Unicode字符将变为3个UTF-8字符</div><div class="line">##<span class="symbol">\x</span>e4就是其中一个字节，它的值是228.没有对应字母可以显示，所以十六进制显示字节的数值</div><div class="line">len('<span class="symbol">\x</span>e4<span class="symbol">\x</span>b8<span class="symbol">\x</span>ad<span class="symbol">\x</span>e6<span class="symbol">\x</span>96<span class="symbol">\x</span>87')——6</div><div class="line">##len（）函数可以返回字符串的长度</div></pre></td></tr></table></figure></p><p>反过来把UTF-8编码表示的字符串’xxx’转换为Unicode字符串u’xxx’用decode(‘utf-8’)方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">'abc'</span>.decode(<span class="string">'utf-8'</span>)——<span class="string">u'abc'</span></div><div class="line"><span class="string">'\xe4\xb8\xad\xe6\x96\x87'</span>.decode(<span class="string">'utf-8'</span>)——<span class="string">u'\u4e2d\u6587'</span></div><div class="line"><span class="keyword">print</span> <span class="string">'\xe4\xb8\xad\xe6\x96\x87'</span>.decode(<span class="string">'utf-8'</span>)——中文</div></pre></td></tr></table></figure></p><p>3.保存为UTF-8编码<br>由于python源代码也是一个文本文件，所以，当你源代码中包含中文的时候，在保存源代码时，务必制定保存为UTF-8编码。<br>通常在文件开头写两行：<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#！/usr/bin/<span class="keyword">env</span> <span class="keyword">python</span></div></pre></td></tr></table></figure></p><p>告诉Linux/OS X系统，这是一个python可执行程序，windows系统会忽略这个注释<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> -*- coding:utf-8 -*-</span></div></pre></td></tr></table></figure></p><p>告诉python解释器，按照UTF-8编码读取源代码，否则，在源代码中写的中文输出可能会有乱码</p><blockquote><p>如果你使用Notepad++进行编辑，除了要加上#-<em>- coding:utf-8 -</em>-外，中文字符串必须是Unicode字符串。<br>声明了UTF-8编码也并不意味着你的.py文件就是UTF-8编码，必须却把Notepad++正在使用UTF-8without BOM编码</p></blockquote><p>4.格式化<br>%？占位符<br>常见占位符：<br><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"></span><span class="perl">%d整数、%f浮点数、%s字符串、%x十六进制整数</span><span class="xml"></span></div></pre></td></tr></table></figure></p><p>其中整数还有浮点数能指定是否补0和整数与小数之间的位数<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">'%<span class="number">2</span>d-%<span class="number">02</span>d' % (<span class="number">3</span>,<span class="number">1</span>)——'<span class="number">3</span><span class="number">-01</span>'</div><div class="line">'%<span class="number">.2</span>f' % <span class="number">3.1415926</span>——'<span class="number">3.14</span>'</div></pre></td></tr></table></figure></p><p>如果不确定用什么，用%s，%s把任何类型转化为字符串。<br>对于unicode字符串，用法一样，最好替换的字符串也是Unicode ：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">u'Hi, %s'</span> % <span class="string">u'Michael——u'</span>Hi,Michael<span class="string">'</span></div></pre></td></tr></table></figure></p><p>那怎么表示%？<br>转义，用%%表示一个%<br><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">'growth rate: %d %%'</span> <span class="comment">% 7</span></div><div class="line"><span class="string">'growth rate :7%'</span></div></pre></td></tr></table></figure></p><p>5.python也支持其他编码方式，没有特殊要求不用</p><h3 id="使用list和tuple"><a href="#使用list和tuple" class="headerlink" title="使用list和tuple"></a>使用list和tuple</h3><h4 id="list"><a href="#list" class="headerlink" title="list"></a>list</h4><h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><p>1.最后一个元素的索引是<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">len</span><span class="params">(classmates)</span></span>-<span class="number">1</span></div></pre></td></tr></table></figure></p><p>2.list里面的元素数据类型可以不同<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">L</span>=[<span class="string">'Apple'</span>,<span class="number">123</span>,,<span class="literal">True</span>]</div></pre></td></tr></table></figure></p><p>3.list里面的元素可以是另一个list<br>二维数组概念</p><h5 id="查"><a href="#查" class="headerlink" title="查"></a>查</h5><p>用索引</p><h5 id="增"><a href="#增" class="headerlink" title="增"></a>增</h5><p>1.添加到末尾<br>append<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">classmates.<span class="built_in">append</span>(<span class="string">'Adam'</span>)</div></pre></td></tr></table></figure></p><p>2.插入指定位置<br>insert<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">classmates</span><span class="selector-class">.insert</span>(<span class="number">1</span>,<span class="string">'jack'</span>)</div></pre></td></tr></table></figure></p><h5 id="删"><a href="#删" class="headerlink" title="删"></a>删</h5><p>1.要删除list末尾的元素<br>pop<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">classmates</span><span class="selector-class">.pop</span>()</div></pre></td></tr></table></figure></p><p>2.删除指定位置的元素<br>pop(i)<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">classmates</span><span class="selector-class">.pop</span>(1)</div></pre></td></tr></table></figure></p><h5 id="改"><a href="#改" class="headerlink" title="改"></a>改</h5><p>替换<br>直接赋值给对应索引位置<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">classmates[1]</span> = <span class="string">'Sarah'</span></div></pre></td></tr></table></figure></p><h4 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h4><h5 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h5><p>1.初始化后不可修改<br>2.因为不可变，所以代码更安全，如果可能，尽量用tuple<br>3.当tuple中只有一个元素，初始化的时候必须加逗号<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">t</span> = (<span class="number">1</span>,)</div></pre></td></tr></table></figure></p><h5 id="查-1"><a href="#查-1" class="headerlink" title="查"></a>查</h5><p>用索引</p><h5 id="没有增删改"><a href="#没有增删改" class="headerlink" title="没有增删改"></a>没有增删改</h5><h5 id="可变的-tuple"><a href="#可变的-tuple" class="headerlink" title="可变的 tuple"></a>可变的 tuple</h5><p>1.当tuple中包含可变元素例如list<br>2.tuple指向不变<br>3.如果要创建一个内容也不不变的tuple怎么做？<br>必须保证tuple中每个元素也不可变</p><h3 id="条件判断和循环"><a href="#条件判断和循环" class="headerlink" title="条件判断和循环"></a>条件判断和循环</h3><h4 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h4><p>if</p><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><p>1.for<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">range()</div><div class="line">##生成整数序列[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</div></pre></td></tr></table></figure></p><p>2.while<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">raw_input</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#注意该方法永远以字符串的形式返回</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#如果有需要要将字符串转换</span></span></div><div class="line">birth= int (raw_input('birth: '))</div></pre></td></tr></table></figure></p><h3 id="使用dict和set"><a href="#使用dict和set" class="headerlink" title="使用dict和set"></a>使用dict和set</h3><h4 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h4><h5 id="属性-2"><a href="#属性-2" class="headerlink" title="属性"></a>属性</h5><p>1.键值对<br>2.需要牢记</p><ul><li>dict的key必须是不可变对象</li><li>这种通过key计算位置的算法称为哈希算法（Hash)<br>3.如果key不存在会报错<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">##通过<span class="keyword">in</span>判断是否存在</div><div class="line"><span class="string">'Thomas'</span> <span class="keyword">in</span> d——<span class="literal">False</span></div><div class="line">##通过dict提供的get方法，不存在，返回None或者自己指定value</div><div class="line">d.get(<span class="string">'Thomas'</span>)    ##返回None的时候，交互式命令行不显示结果</div><div class="line">d.get(<span class="string">'Tmoas'</span>,<span class="number">-1</span>)       ##<span class="number">-1</span></div></pre></td></tr></table></figure></li></ul><p>4.和list区别<br>查找、插入速度极快，不会随着Key的增加而增加。<br>需要占用大量内存，内存浪费多。<br>5.list特点<br>查找和插入时间随元素的增加而增加。<br>占用时间小，浪费内存少。</p><h5 id="查-2"><a href="#查-2" class="headerlink" title="查"></a>查</h5><p>用key</p><h5 id="增-1"><a href="#增-1" class="headerlink" title="增"></a>增</h5><p>1.初始化指定<br>2.通过key放入<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">d[<span class="string">'Adam'</span>]=<span class="number">67</span></div></pre></td></tr></table></figure></p><h5 id="删-1"><a href="#删-1" class="headerlink" title="删"></a>删</h5><p>pop(key)方法<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">d.pop(<span class="string">'Bob'</span>)          ##<span class="number">75</span></div></pre></td></tr></table></figure></p><h5 id="改-1"><a href="#改-1" class="headerlink" title="改"></a>改</h5><p>一个key对应一个value，多次放入，后面的值会把前面的值冲掉</p><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><h5 id="属性-3"><a href="#属性-3" class="headerlink" title="属性"></a>属性</h5><p>1.和dict类似，也是一组Key的集合，但不储存value。由于key不能重复，所以，在set中，没有重复的key<br>2.重复的元素自动被过滤<br>3.set可以看成数学意义上的无序和无重复元素的集合<br>因此两个set可以做数学意义上的交集、并集等操作<br>4.与dict相比<br>唯一区别仅在于没有存储对应的value<br>同样不可以放入可变对象，因为无法判断两个可变对象是否相等，也就无法保证set内部不会有重复元素。</p><h5 id="增-2"><a href="#增-2" class="headerlink" title="增"></a>增</h5><p>1.初始化创建<br>需提供一个list作为输入集合<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">s=set([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</div><div class="line">s    ——set([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</div><div class="line">##注意，传入的参数【<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>】是一个<span class="type">list</span>，而显示的set([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])只是告诉你这个set内部有<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>这些元素，显示的[]不表示这是一个<span class="type">list</span></div></pre></td></tr></table></figure></p><p>2.add(key)方法添加<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">s.add(<span class="number">4</span>)</div><div class="line">s   ——set([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</div></pre></td></tr></table></figure></p><h5 id="删-2"><a href="#删-2" class="headerlink" title="删"></a>删</h5><p>remove(key)方法<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">s.remove</div><div class="line">s      ——<span class="builtin-name">set</span>([1,2,3])</div></pre></td></tr></table></figure></p><h5 id="改-2"><a href="#改-2" class="headerlink" title="改"></a>改</h5><p>1.交集<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">s1=set([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</div><div class="line">s2=set([<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</div><div class="line">s1 &amp; s2    ——set([<span class="number">2</span>,<span class="number">3</span>])</div></pre></td></tr></table></figure></p><p>2.并集<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">s1 | s2        ——set([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</div></pre></td></tr></table></figure></p><h5 id="查-3"><a href="#查-3" class="headerlink" title="查"></a>查</h5><h4 id="再议不可变对象"><a href="#再议不可变对象" class="headerlink" title="再议不可变对象"></a>再议不可变对象</h4><h5 id="list是可变"><a href="#list是可变" class="headerlink" title="list是可变"></a>list是可变</h5><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">a</span>=[<span class="string">'c'</span>,<span class="string">'b'</span>,<span class="string">'a'</span>]</div><div class="line"><span class="keyword">a</span>.<span class="built_in">sort</span>()</div><div class="line"><span class="keyword">a</span>    ——[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</div></pre></td></tr></table></figure><h5 id="str是不变对象"><a href="#str是不变对象" class="headerlink" title="str是不变对象"></a>str是不变对象</h5><p>案例1<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">a</span>=<span class="string">'abc'</span></div><div class="line"><span class="keyword">a</span>.<span class="built_in">replace</span>(<span class="string">'a'</span>,<span class="string">'A'</span>)     ——<span class="string">'Abc'</span></div><div class="line"><span class="keyword">a</span>                      ——<span class="string">'abc'</span></div></pre></td></tr></table></figure></p><p>案例2<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a</span> = <span class="string">'abc'</span></div><div class="line">b=<span class="selector-tag">a</span>.replace(<span class="string">'a'</span>,<span class="string">'A'</span>)</div><div class="line"><span class="selector-tag">b</span>                      ——<span class="string">'Abc'</span></div><div class="line"><span class="selector-tag">a</span>                      ——<span class="string">'abc'</span></div></pre></td></tr></table></figure></p><p>解释：<br>当调用replace时，replace作用在字符串对象‘abc’上，但是没有改变字符串‘abc’的内容，而是创建了一个新字符串’Abc’并返回。<br>用变量b指向新字符串就容易理解。<br>a仍然指向原有字符串，b则指向新字符串。<br>结论：<br>所以对于不变对象来说，调用对象自身的任意方法，都不会改变该对象自身的内容。<br>相反，这些方法会创建新的对象并返回。这样，就保证了不可变对象本身永远是不可变的。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><p>1.数据类型转换函数——工厂函数+解码<br>2.将函数赋值给变量</p><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><p>1.def<br>return返回<br>2.空函数<br>pass<br>3.参数检查<br>添加参数检查后，如果传入错误的参数诶性，函数就可以抛出一个错误<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">raise</span> TypeError(<span class="symbol">'bad</span> operand <span class="keyword">type</span>')</div></pre></td></tr></table></figure></p><p>4.返回多个值<br>其实是返回一个tuple</p><h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><p>1.当函数有多个参数时，把变化大的参数放前面变化小的参数放后面，使用默认函数最大的好处是能降低调用函数的难度。<br>2.默认函数的坑<br>必须指向不可变对象<br>例如参数为list，每次调用list可能都会变化。<br>如何优化，调用前先把list归零。</p><h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><p>1.定义参数时在参数前加*<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(*numbers)</span></span></div><div class="line"><span class="comment">##在函数内部，参数numbers接收到的是一个tuple</span></div></pre></td></tr></table></figure></p><p>2.可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。</p><h4 id="关键词参数"><a href="#关键词参数" class="headerlink" title="关键词参数"></a>关键词参数</h4><p>1.定义参数时在参数前加**<br>可以扩展函数的功能，如果调用者愿意提供更多的参数。<br>2.关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。</p><h4 id="参数组合"><a href="#参数组合" class="headerlink" title="参数组合"></a>参数组合</h4><p>必选参数、默认参数、可变参数、关键字参数可以混合使用。<br>必须按照这种顺序定义。<br>另外，对于任意参数都可以通过类似func(<em>args,*</em>kw)的形式调用它。</p><h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><p>1.在函数内部，可以调用其他函数，如果一个函数在内部调用自己本身，这个函数就是递归函数<br>2.理论上，所有递归函数都可以写成循环的方式，但循环的逻辑不如递归清晰<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">def <span class="built_in">fact</span>(<span class="built_in">n</span>)</div><div class="line">return <span class="built_in">n</span>*<span class="built_in">fact</span>(<span class="built_in">n</span>-<span class="number">1</span>)</div></pre></td></tr></table></figure></p><p>3.使用递归函数需要注意防止栈溢出</p><blockquote><p>在计算机中，函数调用是通过栈（stack）这种数据结构实现的。<br>每当进入一个函数调用，栈就会加一层栈帧，当函数返回，栈就会减一层栈帧。<br>由于栈的大小不是无限的，所以递归调用的次数过多，会导致栈溢出。<br>试试fact(1000）</p></blockquote><p>解决递归调用栈溢出的方法是通过尾递归优化</p><blockquote><p>事实上尾递归和循环的效果是一样的，所以把循环看成一种特殊的尾递归函数也是可以的。<br>尾递归是指，在函数返回的时候，调用自身本身，并且return语句不能包含表达式。<br>这样编译器就可以把尾递归做优化，使递归本身无论调用多少次，都只占用一个栈帧，不会出现栈溢出的情况。</p></blockquote><p>遗憾的是，大部分编程语言没有针对尾递归做优化，python解释器也没有优化，所以即使把上面的函数改成尾递归方式，也会导致栈溢出</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;廖老师的教程&lt;a href=&quot;https://www.liaoxuefeng.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.liaoxuefeng.com&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;第一部分&quot;&gt;&lt;a href=&quot;#第一
      
    
    </summary>
    
      <category term="python" scheme="https://chumingke.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://chumingke.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>如何利用pandas进行数据清洗？</title>
    <link href="https://chumingke.github.io//blog/2017/10/pandas-for-data-cleaning.html"/>
    <id>https://chumingke.github.io//blog/2017/10/pandas-for-data-cleaning.html</id>
    <published>2017-10-07T03:04:57.000Z</published>
    <updated>2017-10-07T03:06:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文为课程笔记。<br>参考网址：www.cnblogs.com/stream886/p/6021743.html</p><h1 id="数据重复值处理"><a href="#数据重复值处理" class="headerlink" title="数据重复值处理"></a>数据重复值处理</h1><h2 id="引入pandas"><a href="#引入pandas" class="headerlink" title="引入pandas"></a>引入pandas</h2><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas</div></pre></td></tr></table></figure><h2 id="数据载入"><a href="#数据载入" class="headerlink" title="数据载入"></a>数据载入</h2><h3 id="excel或csv-参数为路径"><a href="#excel或csv-参数为路径" class="headerlink" title="excel或csv,参数为路径"></a>excel或csv,参数为路径</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">pd</span><span class="selector-class">.read_excel</span>()</div><div class="line"><span class="selector-tag">pd</span><span class="selector-class">.read</span><span class="selector-class">.csv</span>()</div></pre></td></tr></table></figure><h3 id="数据库查询语句"><a href="#数据库查询语句" class="headerlink" title="数据库查询语句"></a>数据库查询语句</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">conn</span> = Mysqldb.connect(host=<span class="string">'127.0.0.1'</span>,user = <span class="string">'root'</span>,passwd = <span class="string">'123'</span>,db = <span class="string">'ca'</span>)</div><div class="line"><span class="attr">df</span> = pd.read_sql(<span class="string">'select * from ca_list'</span>, conn)</div><div class="line"><span class="comment">##参数1为sql语句，参数2为数据库链接对象</span></div></pre></td></tr></table></figure><h3 id="访问html来获取数据"><a href="#访问html来获取数据" class="headerlink" title="访问html来获取数据"></a>访问html来获取数据</h3><p>一般不会这么做，一般用爬虫<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">pd</span><span class="selector-class">.read_html</span>()</div></pre></td></tr></table></figure></p><h2 id="数据转换为dataframe对象"><a href="#数据转换为dataframe对象" class="headerlink" title="数据转换为dataframe对象"></a>数据转换为dataframe对象</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">lonadata = pd.DataFrame(df，<span class="keyword">index</span> = <span class="string">'id'</span>)</div><div class="line"><span class="keyword">print</span> lonadata试一下</div><div class="line"><span class="comment">##第一个参数为之前生成的数据对象，第二个参数是指定的索引</span></div></pre></td></tr></table></figure><h2 id="重复值的清洗"><a href="#重复值的清洗" class="headerlink" title="重复值的清洗"></a>重复值的清洗</h2><h3 id="检测重复值"><a href="#检测重复值" class="headerlink" title="检测重复值"></a>检测重复值</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span> lonadata.duplicated()</div><div class="line">##有重复显示<span class="keyword">true</span>,无重复为<span class="keyword">false</span></div></pre></td></tr></table></figure><h3 id="删除重复值"><a href="#删除重复值" class="headerlink" title="删除重复值"></a>删除重复值</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">lonadata</span><span class="selector-class">.drop_duplicates</span>()</div></pre></td></tr></table></figure><h1 id="数据空值处理"><a href="#数据空值处理" class="headerlink" title="数据空值处理"></a>数据空值处理</h1><h2 id="数据载入-1"><a href="#数据载入-1" class="headerlink" title="数据载入"></a>数据载入</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">df2</span> = pd.read_sql(<span class="string">'select * from ca_zwmc'</span>,conn,index_col = <span class="string">'ID'</span>)</div><div class="line"><span class="attr">lonadata2</span> = ph.DataFrame(df2)</div></pre></td></tr></table></figure><h2 id="查看是否有空值"><a href="#查看是否有空值" class="headerlink" title="查看是否有空值"></a>查看是否有空值</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="builtin-name">print</span> lonadata.isnull()</div><div class="line"><span class="comment">##如果当前数据存在空值，显示true</span></div><div class="line"><span class="builtin-name">print</span> lonadata.notnull()</div><div class="line"><span class="comment">##如果当前数据不存在空值，显示true</span></div></pre></td></tr></table></figure><h2 id="对于空数据的处理"><a href="#对于空数据的处理" class="headerlink" title="对于空数据的处理"></a>对于空数据的处理</h2><h3 id="填充数据"><a href="#填充数据" class="headerlink" title="填充数据"></a>填充数据</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">lonadata3= lonadata.fillna ( 0 ） </div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#填充0</span></span></div><div class="line">.fillna ( lonadata ['annual_inc ' ].mean() )  </div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#填平均值</span></span></div><div class="line">print lonadata3.isnull()</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#检查一下</span></span></div></pre></td></tr></table></figure><h3 id="删除空值数据-把一行都删了）"><a href="#删除空值数据-把一行都删了）" class="headerlink" title="删除空值数据(把一行都删了）"></a>删除空值数据(把一行都删了）</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="builtin-name">print</span> lonadata.dropna()</div></pre></td></tr></table></figure><h1 id="数据间的空格处理"><a href="#数据间的空格处理" class="headerlink" title="数据间的空格处理"></a>数据间的空格处理</h1><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>取出dataframe集合中单列数据，指定单列<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span> lonadata[<span class="string">'zwyc_name'</span>]</div></pre></td></tr></table></figure></p><p>对于数据中出现乱码，老师采取了一个控制输入输出均为utf-8的代码<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">db</span> = conn.cursor()</div><div class="line"><span class="keyword">db</span>.excute(‘<span class="keyword">set</span> names utf8')</div></pre></td></tr></table></figure></p><h2 id="查看数据中空格"><a href="#查看数据中空格" class="headerlink" title="查看数据中空格"></a>查看数据中空格</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span> lonadata2[<span class="string">'zwyc_name'</span>].value_counts()</div><div class="line"><span class="comment">##其实是统计相同数据出现多少次</span></div></pre></td></tr></table></figure><h2 id="处理空格"><a href="#处理空格" class="headerlink" title="处理空格"></a>处理空格</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">print lonadata2[<span class="string">'zwmc_name'</span>]<span class="selector-class">.map</span> ( str<span class="selector-class">.lstrip</span> )</div><div class="line">##去除左侧空格</div><div class="line">print lonadata2[<span class="string">'zwmc_name'</span>]<span class="selector-class">.map</span> ( str<span class="selector-class">.rstrip</span> )</div><div class="line">##去除右侧空格</div><div class="line">print lonadata2[<span class="string">'zwmc_name'</span>]<span class="selector-class">.map</span> ( str<span class="selector-class">.strip</span> )</div><div class="line">##去除两侧</div></pre></td></tr></table></figure><h1 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h1><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span> lonadata2[<span class="string">'zwmc_name'</span>].<span class="built_in">map</span> ( <span class="built_in">str</span>.upper)</div><div class="line">##转换为大写</div><div class="line"><span class="built_in">print</span> lonadata2[<span class="string">'zwmc_name'</span>].<span class="built_in">map</span> ( <span class="built_in">str</span>.lower)</div><div class="line">##转换为小写</div><div class="line"><span class="built_in">print</span> lonadata2[<span class="string">'zwmc_name'</span>].<span class="built_in">map</span> ( <span class="built_in">str</span>.title)</div><div class="line">##首字母大写</div></pre></td></tr></table></figure><h1 id="异常和极端值"><a href="#异常和极端值" class="headerlink" title="异常和极端值"></a>异常和极端值</h1><h2 id="检测异常和极端值"><a href="#检测异常和极端值" class="headerlink" title="检测异常和极端值"></a>检测异常和极端值</h2><h3 id="快速统计方法"><a href="#快速统计方法" class="headerlink" title="快速统计方法"></a>快速统计方法</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span> lonadata.<span class="built_in">describe</span> ()</div><div class="line">描述统计,通过最大值最小值等发现异常值</div></pre></td></tr></table></figure><h3 id="数据转换格式"><a href="#数据转换格式" class="headerlink" title="数据转换格式"></a>数据转换格式</h3><h4 id="转换为格式"><a href="#转换为格式" class="headerlink" title="转换为格式"></a>转换为格式</h4><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np     ##需要引入Numpy</div><div class="line"><span class="title">print</span> lonadata.descripe () .<span class="keyword">as</span><span class="keyword">type</span>(np.int64)  ##astype</div></pre></td></tr></table></figure><h4 id="转换为时间格式"><a href="#转换为时间格式" class="headerlink" title="转换为时间格式"></a>转换为时间格式</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">print lonadata3 [ <span class="string">'datatime'</span> ]  ##输出看看</div><div class="line">print pd.to_datetime (lonadata3 [ <span class="string">'datatime'</span> ])</div><div class="line">##另外如果从数据库直接写入时间，就直接是datatime格式</div><div class="line">##大部分情况下不直接存时间格式，因为字符串格式比时间格式快，因为系统转换时间格式需要时间</div></pre></td></tr></table></figure><h4 id="显示数据格式"><a href="#显示数据格式" class="headerlink" title="显示数据格式"></a>显示数据格式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span> lonadata3 [ <span class="string">'datatime'</span> ]. dtypes </div><div class="line"><span class="comment">##最后不用加空格，不是个方法，是个状态</span></div></pre></td></tr></table></figure><h3 id="索引和列转换"><a href="#索引和列转换" class="headerlink" title="索引和列转换"></a>索引和列转换</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">print</span> <span class="selector-tag">lonadata</span><span class="selector-class">.descripe</span> () <span class="selector-class">.astype</span>(<span class="selector-tag">np</span><span class="selector-class">.int64</span>)<span class="selector-class">.T</span>   ##<span class="selector-class">.T</span></div></pre></td></tr></table></figure><h2 id="异常值替换"><a href="#异常值替换" class="headerlink" title="异常值替换"></a>异常值替换</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">lonadata<span class="selector-class">.replace</span> ( [ <span class="number">100000</span>,<span class="number">36</span> ] , lonadata [ <span class="string">'loan_amnt'</span> ]<span class="selector-class">.mean</span> () )</div><div class="line">##把很大的<span class="number">100000</span>，还有很小的<span class="number">36</span>这类极端值替换为均值,均匀分布它们的值</div></pre></td></tr></table></figure><h1 id="更改数据类型"><a href="#更改数据类型" class="headerlink" title="更改数据类型"></a>更改数据类型</h1><p>数据转换格式</p><h1 id="数据分组"><a href="#数据分组" class="headerlink" title="数据分组"></a>数据分组</h1><p>根据范围分组<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">conn2 = Mysqldb.connect(host='127.0.0.1',user = 'root',passwd = '123',db = 'ca')      <span class="comment">##首先连接数据库</span></div><div class="line">db = conn.cursor()               <span class="comment">##设置好输入输出为utf-8</span></div><div class="line">db.excute(‘set names utf8')</div><div class="line">df4 = pd.read_sql('select * from ca_list', conn2，index_col = 'ID' )                    <span class="comment">##写好sql语句</span></div><div class="line">lonadata = pd.DataFrame(df4)      <span class="comment">##转换为dataframe对象</span></div><div class="line">bins = [0,5,10,15，20]                <span class="comment">##设定范围区间</span></div><div class="line">group_label = [u'访问低‘，u'正常访问‘，u'高访问’，u'受欢迎‘ ]                               <span class="comment">##四个标签，需要五个分割点</span></div><div class="line">lonadata [ 'cat' ] = pd.cut ( lonadata['browse'] ,bins,labels = group_labels )           <span class="comment">##进行分割</span></div><div class="line">print lonadata</div></pre></td></tr></table></figure></p><h1 id="数据分列"><a href="#数据分列" class="headerlink" title="数据分列"></a>数据分列</h1><p>根据分隔符分列<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">grade_split = pd.DataFrame (( x.split ( <span class="string">'/'</span> ) <span class="keyword">for</span> x <span class="keyword">in</span> lonadata.title_fenci ))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">encoding</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">return</span> x.encode(<span class="string">'gbk'</span>)</div><div class="line">grade_split = pd.DataFrame (( map (encoding,x.split ( <span class="string">'/'</span> ) )<span class="keyword">for</span> x <span class="keyword">in</span> lonadata.title_fenci ))</div><div class="line"><span class="comment">##用map加了一个解码效果</span></div><div class="line"><span class="comment">##但是代码有误</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> grade_split</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文为课程笔记。&lt;br&gt;参考网址：www.cnblogs.com/stream886/p/6021743.html&lt;/p&gt;
&lt;h1 id=&quot;数据重复值处理&quot;&gt;&lt;a href=&quot;#数据重复值处理&quot; class=&quot;headerlink&quot; title=&quot;数据重复值处理&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="python" scheme="https://chumingke.github.io/categories/python/"/>
    
      <category term="pandas" scheme="https://chumingke.github.io/categories/python/pandas/"/>
    
    
      <category term="python" scheme="https://chumingke.github.io/tags/python/"/>
    
      <category term="pandas" scheme="https://chumingke.github.io/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>简明Python教程笔记（一）</title>
    <link href="https://chumingke.github.io//blog/2017/10/Concise-Python-tutorial-notes.html"/>
    <id>https://chumingke.github.io//blog/2017/10/Concise-Python-tutorial-notes.html</id>
    <published>2017-10-06T13:43:29.000Z</published>
    <updated>2017-10-06T13:44:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>此文为简明Python教程笔记。</p><h1 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Python特点<br>简单、易学——伪代码本质<br>免费开源——FLOSS（自由/开放源码软件）<br>高层语言<br>可移植性强——支持多平台<br>解释性——更易移植<br>面向对象——既面向过程也面向对象<br>可扩展性<br>可嵌入性<br>丰富的库</p><h2 id="最初的步骤"><a href="#最初的步骤" class="headerlink" title="最初的步骤"></a>最初的步骤</h2><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>如果是windows，使用前需要编辑path变量——c\python23</p><h3 id="运行方式"><a href="#运行方式" class="headerlink" title="运行方式"></a>运行方式</h3><p>命令行，交互式解释器，或者源文件。<br>交互式解释器作用是把python代码翻译成机器码<br>交互式解释器有哪些？<br>Python——命令行启动<br>IPython<br>JPython<br>CPython<br>ironPython<br>IDLE（集成开发环境Python GUI）——提示符： &gt;&gt;&gt;是你键入python语句的提示符。退出python提示符：按Ctrl-z再按Enter。</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>“#”符号右面的内容都是注释<br>“#!”后面跟着一个程序<br>组织行：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">！/usr/bin/python</span></div></pre></td></tr></table></figure></p><p>这行告诉系统该运行哪个解释器<br>python文件第一行有这个才能直接运行。</p><h3 id="编码解码"><a href="#编码解码" class="headerlink" title="编码解码"></a>编码解码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> -*- encoding:utf-8 -*-</span></div></pre></td></tr></table></figure><p>文件首行有这行才能显示中文。<br>文件保存为utf-8格式的文件。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>特点：<br>不能改变它的值<br>在赋值给变量之前不需要声明<br>访问一个未赋值的变量会产生一个异常<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">some_other_var</span>  <span class="comment"># Raises a name error</span></div></pre></td></tr></table></figure></p><p>if 可以作为表达式来使用<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"yahoo!"</span> <span class="keyword">if</span> <span class="number">3</span> &gt; <span class="number">2</span> <span class="keyword">else</span> <span class="number">2</span> <span class="meta">#=&gt; <span class="string">"yahoo!"</span></span></div></pre></td></tr></table></figure></p><h3 id="数"><a href="#数" class="headerlink" title="数"></a>数</h3><p>包含整数，长整数，浮点数，复数。</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="字符串相关"><a href="#字符串相关" class="headerlink" title="字符串相关"></a>字符串相关</h4><p>引号：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">单引号</div><div class="line">双引号与单引号完全相同</div><div class="line">三引号——指示多行字符串</div></pre></td></tr></table></figure></p><p>转义符<br>自然字符串——前缀r或R<br>Unicode字符串——前缀u或U<br>字符串是不可变的<br>按字面意义级连接字符串</p><h4 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h4><p>1.字符串连接：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">##两种方法</div><div class="line">+</div><div class="line"><span class="string">" "</span><span class="selector-class">.join</span>[<span class="selector-tag">a</span>,b]</div></pre></td></tr></table></figure></p><p>2.转义符：<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="string">'What\'s your name?'</span></div><div class="line"><span class="comment">##行末的单独一个反斜杠表示字符串在下一行继续，而不是开始一个新的行</span></div><div class="line"><span class="string">\\</span> 反斜杠</div><div class="line"><span class="string">\000</span> 空</div><div class="line"><span class="string">\’</span> 单引号</div><div class="line"><span class="string">\”</span> 双引号</div><div class="line"><span class="string">\n</span> 换行</div><div class="line"><span class="string">\t</span> Tab制表符</div><div class="line"><span class="string">\40表示空格</span></div></pre></td></tr></table></figure></p><p>3.使用dir(str)查看常见的字符串方法。<br>4.比较两个序列值是否相同<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">cmp</span><span class="params">(str1,str2)</span></span></div></pre></td></tr></table></figure></p><p>5.字符串格式化输出<br>占位符：<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">%<span class="selector-tag">s</span></span>  字符串（采用str()的显示）</div><div class="line"><span class="tag">%<span class="selector-tag">f</span></span> 浮点数</div><div class="line"><span class="tag">%<span class="selector-tag">r</span></span> 字符串（采用repr()的显示）</div><div class="line"><span class="tag">%<span class="selector-tag">c</span></span> 单个字符</div><div class="line"><span class="tag">%<span class="selector-tag">b</span></span> 二进制整数</div><div class="line"><span class="tag">%<span class="selector-tag">d</span></span> 十进制整数</div><div class="line"><span class="tag">%<span class="selector-tag">e</span></span> 指数</div></pre></td></tr></table></figure></p><p>format函数：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#检测字符串里有没有大括号&#123;&#125;，有的话ID替换掉</span></span></div><div class="line">url.format(itemid)</div></pre></td></tr></table></figure></p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>1.规则<br>第一个字符必须是字母表中的字母（大写或小写）或者一个下划线，名称的其他部分可以由字母（大写或小写）、下划线（‘ _ ’）或数字（0-9）组成。<br>2.变量<br>使用规则：变量要先赋值，后使用<br>相关方法：id(a)，可以查看a变量在python解释器中定义的位置<br>3.函数<br>4.类</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="数据类型有哪些"><a href="#数据类型有哪些" class="headerlink" title="数据类型有哪些"></a>数据类型有哪些</h4><p>None——null<br>str——字符串类型，ASCII，以8位的ASCII码储存，比如：‘abc’，’中国’<br>unicode——Unicode字符串类型，16位的Unicode字符，比如：u’Hello world’<br>float——双精度（64）浮点数<br>bool——布尔类型，Ture或者False（大写）<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">表示Ture：</div><div class="line"><span class="number">1</span></div><div class="line">“****”——字符串不为空</div><div class="line"><span class="string">[1，2，3]</span>——列表不为空</div><div class="line">&#123;“a”:<span class="string">"aaa"</span>&#125;</div><div class="line">只要不是空的</div><div class="line">表示False：</div><div class="line"><span class="number">0</span></div><div class="line">“”——字符串为空</div><div class="line"><span class="string">[]</span>——列表为空</div><div class="line">&#123;&#125;——字典为空</div></pre></td></tr></table></figure></p><p>int——有符号整数，最大值由平台决定<br>long——任意精度的有符号整数，int类型数字一旦超过最大值，会自动转换为long</p><h4 id="数-1"><a href="#数-1" class="headerlink" title="数"></a>数</h4><p>整数，长整数，浮点数，复数complex。</p><h4 id="如何判断一个变量的类型"><a href="#如何判断一个变量的类型" class="headerlink" title="如何判断一个变量的类型"></a>如何判断一个变量的类型</h4><p>type函数可以用于得到某个对象的类型<br>isinstance 函数用于判断某个对象类型是否属于指定的类型中的一种</p><h4 id="类型转换函数"><a href="#类型转换函数" class="headerlink" title="类型转换函数"></a>类型转换函数</h4><p>str字符串调用decode方法转为unicode（解码）。<br>unicode字符串调用encode方法转为str字符串。<br>工厂函数:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">int  将其他对象转成整数类型  </div><div class="line"><span class="function"><span class="title">float</span><span class="params">()</span></span></div><div class="line"><span class="function"><span class="title">bool</span><span class="params">()</span></span></div><div class="line"><span class="function"><span class="title">str</span><span class="params">()</span></span></div><div class="line"><span class="function"><span class="title">long</span><span class="params">()</span></span></div></pre></td></tr></table></figure></p><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>任何东西</p><h3 id="逻辑行与物理行"><a href="#逻辑行与物理行" class="headerlink" title="逻辑行与物理行"></a>逻辑行与物理行</h3><p>物理行是你在编写程序时所 看见的。逻辑行是Python 看见 的单个语句。<br>想要在一个物理行中使用多于一个逻辑行，那么你需要使用分号（;）<br>反斜杠的使用，有时候有一种暗示的假设，可以不需要使用反斜杠</p><h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><p>同一层次的语句合起来称为一个块</p><h3 id="None"><a href="#None" class="headerlink" title="None"></a>None</h3><p>不要使用相等符号 <code>==</code> 来把对象和 None 进行比较<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"etc"</span> <span class="keyword">is</span> <span class="keyword">None</span></div></pre></td></tr></table></figure></p><p>None、0 以及空字符串和空列表都等于 False，除此以外的所有值都等于 True<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">0 </span>== False  #=&gt; True</div><div class="line"><span class="string">""</span> == False #=&gt; True</div></pre></td></tr></table></figure></p><h2 id="运算符与表达式"><a href="#运算符与表达式" class="headerlink" title="运算符与表达式"></a>运算符与表达式</h2><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>1.注意优先级<br>2.计算顺序——圆括号改变<br>3.结合规律：<br>具有相同优先级的运算符从左到右顺序：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">2</span>+<span class="number">3</span>+<span class="number">4</span>的等同于（<span class="number">2</span>+<span class="number">3</span>）+<span class="number">4</span></div></pre></td></tr></table></figure></p><p>赋值运算符是自右向左:<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">a</span>=b=c等同于a=(b=c)</div></pre></td></tr></table></figure></p><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><p>1.数学运算表达式<br>其中，关于除法<br><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">除法，有一个是小数，结果是小数。</div><div class="line">整数相除，默认得到商。</div><div class="line">from<span class="number">__f</span>uture<span class="number">__</span><span class="keyword">import</span> division让两整数相除得到浮点数结果</div></pre></td></tr></table></figure></p><p>2.逻辑运算表达式——or,and<br>3.比较运算表达式——1&gt;2<br>4.python中表达式都有值，其值就是表达式运算后的结果</p><h1 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h1><h2 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h2><h3 id="选择结构（判断语句）"><a href="#选择结构（判断语句）" class="headerlink" title="选择结构（判断语句）"></a>选择结构（判断语句）</h3><p>if语句<br>用来检验一个条件， 如果 条件为真，我们运行一块语句<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if-elif-else</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#逻辑行结尾处有一个冒号,else可选</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#冒号后跟着语句块</span></span></div></pre></td></tr></table></figure></p><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><h4 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h4><p>1.循环次数未知<br>2.只要在一个条件为真的情况下，while语句允许你重复执行一块语句<br>3.else可选</p><h4 id="for循环（迭代历遍语句）"><a href="#for循环（迭代历遍语句）" class="headerlink" title="for循环（迭代历遍语句）"></a>for循环（迭代历遍语句）</h4><p>1.迭代字符串<br>2.for..in——for i in range(1, 5):<br>3.在一序列的对象上 递归 即逐一使用队列中的每个项目<br>4.else可选<br>5.range(数字)：</p><ul><li>返回从零到给定的数字的数字列表</li><li>range（0，1001，2）</li><li>包头不包尾，默认是0</li><li>迭代器，先把要迭代的数全部生成好存在内存，再一个个操作</li><li>必须整数</li><li>3.5版本默认就是生成器<br>6.xrange——生成器，一次生成一个（性能的提升），3.5版本没有<br>7.循环次数已知<h4 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h4>如果你从for或while循环中 终止 ，任何对应的循环else块将不执行<br>if s == ‘quit’:  break<br>跳出循环<h4 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h4>用来告诉Python跳过当前循环块中的剩余语句，然后 继续 进行下一轮循环。<br>略过循环。<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> len(s) &lt; <span class="number">3</span>:  <span class="keyword">continue</span></div><div class="line">##如果长度小于<span class="number">3</span>，我们将使用<span class="keyword">continue</span>语句，忽略块中的剩余的语句。否则，这个循环中的剩余语句将被执行</div></pre></td></tr></table></figure></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>1.函数是重用的程序段<br>2.通过def关键字定义<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayHello</span><span class="params">()</span></span><span class="symbol">:</span></div></pre></td></tr></table></figure></p><p>3.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if__name__=='__main__':pass</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#python文件在被调用的时候，__name__值为模块名</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#当python文件被运行之后，__name__值为‘__main__’</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#上面只定义函数、常用属性，下面写主逻辑。</span></span></div></pre></td></tr></table></figure></p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>1.参数名称为 形参<br>2.函数调用的值称为实参<br>3.默认参数值<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">##只有在形参表末尾的那些参数可以有默认参数值</span></div><div class="line">def <span class="function"><span class="keyword">func</span><span class="params">(a, b=<span class="number">5</span>)</span>是有效的</span></div></pre></td></tr></table></figure></p><p>4.关键参数<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">##使用名字（关键字）而不是位置来给函数指定实参</span></div><div class="line"><span class="string">"&#123;name&#125; wants to eat &#123;food&#125;"</span>.format(<span class="attribute">name</span>=<span class="string">"Bob"</span>, <span class="attribute">food</span>=<span class="string">"lasagna"</span>)</div></pre></td></tr></table></figure></p><p>5.可变数量参数<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">##也可以定义一个函数，并让它接受可变数量的关键字参数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">keyword_args</span><span class="params">(**kwargs)</span></span><span class="symbol">:</span></div><div class="line">keyword_args(big=<span class="string">"foot"</span>, loch=<span class="string">"ness"</span>) <span class="comment">#=&gt; &#123;"big": "foot", "loch": "ness"&#125;</span></div><div class="line"><span class="comment">##你可以定义一个函数，并让它接受可变数量的定位参数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">varargs</span><span class="params">(*args)</span></span></div><div class="line">varargs(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">#=&gt; (1,2,3)</span></div><div class="line"><span class="comment">##还可以同时使用这两类参数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">all_the_args</span><span class="params">(*args, **kwargs)</span></span><span class="symbol">:</span></div><div class="line"><span class="comment">##使用 * 来展开元组，使用 ** 来展开关键字参数</span></div></pre></td></tr></table></figure></p><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><p>所有变量的作用域是它们被定义的块<br>global语句<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">global x, y, z</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#声明是全局变量</span></span></div></pre></td></tr></table></figure></p><h3 id="语句与文档字符串"><a href="#语句与文档字符串" class="headerlink" title="语句与文档字符串"></a>语句与文档字符串</h3><h4 id="return语句"><a href="#return语句" class="headerlink" title="return语句"></a>return语句</h4><p>从一个函数 返回 即跳出函数<br>没有返回值的return语句等价于return None</p><h4 id="文档字符串（DocStrings）"><a href="#文档字符串（DocStrings）" class="headerlink" title="文档字符串（DocStrings）"></a>文档字符串（DocStrings）</h4><p>1.标准格式<br>文档字符串以大写字母开始，句号结尾。第二行是空行，从第三行开始是详细的描述。<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''    '''</span></div></pre></td></tr></table></figure></p><p>2.调用方法<br>用<strong>doc</strong>（注意双下划线）调用printMax函数的文档字符串属性<br>3.也适用模块和类</p><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="name">lambda</span> x: x &gt; <span class="number">2</span>)(<span class="number">3</span>) #=&gt; True</div></pre></td></tr></table></figure><h3 id="dir-函数"><a href="#dir-函数" class="headerlink" title="dir()函数"></a>dir()函数</h3><p>查看该模块的函数列表<br>dir + help的使用</p><h3 id="内置的常用数学函数"><a href="#内置的常用数学函数" class="headerlink" title="内置的常用数学函数"></a>内置的常用数学函数</h3><p>divmod 返回两个数相除的商和余数<br>round 四舍五入</p><h3 id="Math模块常用的函数"><a href="#Math模块常用的函数" class="headerlink" title="Math模块常用的函数"></a>Math模块常用的函数</h3><p>pow 幂运算<br>sqrt  开方运算<br>floor/ceil<br>fabs<br>fmod</p><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>map:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">map</span><span class="params">(lambda x:x*<span class="number">2</span>+<span class="number">1</span>,data)</span></span></div><div class="line"><span class="function"><span class="title">map</span><span class="params">(add_10, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span></span> #=&gt; [<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>]</div></pre></td></tr></table></figure></p><p>reduce:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">##求10的阶乘</span></div><div class="line"><span class="built_in">num</span>=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</div><div class="line">reduce(lambda x,y:x*y,<span class="built_in">num</span>)</div></pre></td></tr></table></figure></p><p>使用列表推导式来模拟 map 和 filter<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[add_10(i) for i in [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]  #=&gt; [<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>]</div><div class="line">[x for x in [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>] if x &gt; <span class="number">5</span>] #=&gt; [<span class="number">6</span>, <span class="number">7</span>]</div></pre></td></tr></table></figure></p><p>filter<br><figure class="highlight llvm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#<span class="symbol">#1000</span>以内的偶数</div><div class="line">res=<span class="keyword">filter</span>(lambda <span class="keyword">x</span>: <span class="keyword">x</span><span class="symbol">%2</span>==<span class="number">0</span>,a)</div><div class="line"><span class="keyword">filter</span>(lambda <span class="keyword">x</span>: <span class="keyword">x</span> &gt; <span class="number">5</span>, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]) #=&gt; [<span class="number">6</span>, <span class="number">7</span>]</div><div class="line">##过滤判断好的</div></pre></td></tr></table></figure></p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="导入方法"><a href="#导入方法" class="headerlink" title="导入方法"></a>导入方法</h3><h4 id="绝对导入"><a href="#绝对导入" class="headerlink" title="绝对导入"></a>绝对导入</h4><p>import sys语句<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">sys</span><span class="selector-class">.argv</span></div></pre></td></tr></table></figure></p><h4 id="相对导入"><a href="#相对导入" class="headerlink" title="相对导入"></a>相对导入</h4><p>from..import语句<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> argv</div><div class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> *    ##你可以从一个模块中导入所有函数</div><div class="line">##不建议使用这种方式,<span class="keyword">import</span> 更易读</div></pre></td></tr></table></figure></p><h4 id="字节编译的-pyc文件"><a href="#字节编译的-pyc文件" class="headerlink" title="字节编译的.pyc文件"></a>字节编译的.pyc文件</h4><h4 id="安装其他人的模块"><a href="#安装其他人的模块" class="headerlink" title="安装其他人的模块"></a>安装其他人的模块</h4><p>1.Anaconda2\Scripts<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">所有<span class="keyword">python</span>的工具都在这个文件夹</div><div class="line">conda.<span class="keyword">exe</span></div></pre></td></tr></table></figure></p><p>2.模块的安装<br>pip命令(python自带)：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">c:</span>\python27\scripts&gt;pip.exe install pymysql</div><div class="line"><span class="symbol">c:</span>\python27\<span class="class"><span class="keyword">lib</span>\<span class="title">site</span>-<span class="title">packages</span>   <span class="comment">##所有第三方库的文件夹</span></span></div></pre></td></tr></table></figure></p><p>conda命令(anaconda环境特有):<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">conda<span class="selector-class">.exe</span> install scrapy</div><div class="line">conda<span class="selector-class">.exe</span> list  ##把当前python环境里安装的所有第三方模块都返回</div></pre></td></tr></table></figure></p><p>优先使用<br>好处：能够自动分析模块之间的依赖，如果安装A模块中，引用了B模块，可以自动安装好B模块<br>缺点：网络不好易下载失败，解决办法：尝试使用代理<br>whl文件的安装（google一下）:<br>二进制文件<br>搜索需要的包，复制到scripts文件夹下，使用pip等安装，输入首字母按Tab自动补全。</p><h4 id="sys-path"><a href="#sys-path" class="headerlink" title="sys.path"></a>sys.path</h4><p>当前python文件的目录<br>site-packages</p><h3 id="模块方法"><a href="#模块方法" class="headerlink" title="模块方法"></a>模块方法</h3><p>1.模块的属性<br>模块的<strong>name</strong><br>当一个模块被第一次输入的时候，这个模块的主块将被运行。假如我们只想在程序本身被使用的时候运行主块，而在它被别的模块输入的时候不运行主块，我们该怎么做呢？这可以通过模块的<strong>name</strong>属性完成。<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="variable">__name__</span> == <span class="string">'__main__'</span>:</div></pre></td></tr></table></figure></p><p>2.join的方法<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span><span class="string">"    "</span>.<span class="keyword">join</span>(<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>)</div></pre></td></tr></table></figure></p><h3 id="模块类别"><a href="#模块类别" class="headerlink" title="模块类别"></a>模块类别</h3><h4 id="常见模块"><a href="#常见模块" class="headerlink" title="常见模块"></a>常见模块</h4><p>1.sys系统相关<br>2.datetime日期<br>3.re正则表达式<br>4.math数学运算模块<br>5.Numpy科学计算 Pandas结构化函数 Scipy数值积分 matplotlib绘制数据图表<br>6.request http访问库 scrapy网络爬虫工具库<br>7.学习方法<br>dir()函数:<br>列出模块定义的标识符。标识符有函数、类和变量。<br>当你为dir()提供一个模块名的时候，它返回模块定义的名称列表<br>如果不提供参数，它返回当前模块中定义的名称列表<br>help()函数:<br>详细定义<br>8.python标准库</p><h4 id="制造你自己的模块"><a href="#制造你自己的模块" class="headerlink" title="制造你自己的模块"></a>制造你自己的模块</h4><p>这个模块应该被放置在我们输入它的程序的同一个目录中，或者在sys.path所列目录之一<br>使用了点号来使用模块的成员<br>from mymodule import sayhi, version</p><h3 id="库、包、模块之间的关系"><a href="#库、包、模块之间的关系" class="headerlink" title="库、包、模块之间的关系"></a>库、包、模块之间的关系</h3><p>包含关系：库-包-模块<br>一个包下面可以有很多模块<br>包的文件下面必须有<strong>init</strong>.py</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="类与对象的概念"><a href="#类与对象的概念" class="headerlink" title="类与对象的概念"></a>类与对象的概念</h3><p>当你使用变量i并给它赋值的时候，你可以认为你创建了一个类（类型）int的对象（实例）i</p><h3 id="列表list"><a href="#列表list" class="headerlink" title="列表list"></a>列表list</h3><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><p>1.方括号<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">shoplist</span> = [<span class="string">'apple'</span>, <span class="string">'mango'</span>, <span class="string">'carrot'</span>, <span class="string">'banana'</span>]</div></pre></td></tr></table></figure></p><p>2.比如赋整数5，你可以认为你创建了一个类（类型）int的对象（实例）i<br>3.用 in 来检查是否存在于某个列表中<br>4.索引indexing、分片slicing<br>5.获取列表长度<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">len</span><span class="params">(a)</span></span></div><div class="line"><span class="selector-tag">a</span>.__len__()</div></pre></td></tr></table></figure></p><p>6.在print 语句的结尾使用一个逗号来消除每个语句自动打印的换行符，就是不回车了<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span> <span class="string">'these items are:'</span>,</div></pre></td></tr></table></figure></p><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><p>1.添加<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#在末尾添加</span></span></div><div class="line">shoplist.append('rice')</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#插入，在索引为1的位置插入</span></span></div><div class="line">mylist.insert(1,3000)</div></pre></td></tr></table></figure></p><p>2.排序<br>shoplist.sort()<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">shoplist.sort(reverse=ture)   ##表示从大到小</div><div class="line">##这个方法影响列表本身，而不是返回一个修改后的列表</div><div class="line">##与字符串工作的方法不同，因此我们说列表可变，字符串不可变</div></pre></td></tr></table></figure></p><p>reverse——把列表的元素反过来<br>3.修改索引为1的元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">把列表的元素反过来</div></pre></td></tr></table></figure></p><p>4.删除<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#删除</span></span></div><div class="line">del shoplist[0]</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#移除最后一个元素，并且返回删除的值</span></span></div><div class="line">li.pop()        #=&gt; 3 and li is now [1, 2, 4]</div><div class="line"><span class="meta">#</span><span class="bash">删除指定元素（有多个删除第一个，没有抛出异常）</span></div><div class="line">remove</div></pre></td></tr></table></figure></p><p>5.输出列表元素<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">print</span> <span class="selector-tag">mylist</span>(0<span class="selector-pseudo">:10</span><span class="selector-pseudo">:2)</span></div><div class="line">#<span class="selector-id">#0-10</span>隔一个取</div></pre></td></tr></table></figure></p><p>6.列表求和<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span> <span class="built_in">sum</span>(mylist)</div></pre></td></tr></table></figure></p><h4 id="表与表"><a href="#表与表" class="headerlink" title="表与表"></a>表与表</h4><p>1.列表相加<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">li + other_li</div><div class="line">##结果[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>] - 请留意 li 和 other_li 并不会被修改</div></pre></td></tr></table></figure></p><p>2.用 extend 来合并列表<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">li.extend(other_li)</div><div class="line">现在 li 是 [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div></pre></td></tr></table></figure></p><h4 id="不定常列表"><a href="#不定常列表" class="headerlink" title="不定常列表"></a>不定常列表</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">funcw</span><span class="params">(*args)</span></span><span class="symbol">:</span></div><div class="line"><span class="comment">##后面就可以将args作为列表使用</span></div><div class="line">func2(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</div></pre></td></tr></table></figure><h3 id="元组tuple"><a href="#元组tuple" class="headerlink" title="元组tuple"></a>元组tuple</h3><h4 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h4><p>1.圆括号<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">zoo</span> = (<span class="string">'wolf'</span>, <span class="string">'elephant'</span>, <span class="string">'penguin'</span>)</div></pre></td></tr></table></figure></p><p>2.不可变<br>3.来访问new_zoo元组的第三个项目的第三个项目<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new_zoo[<span class="string">2</span>][<span class="symbol">2</span>]</div></pre></td></tr></table></figure></p><p>4.含有单个元素的元组，在第一个项目后跟一个逗号,这样Python才能区分元组和表达式中一个带圆括号的对象<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">singleton</span> = (<span class="number">2</span> , )</div></pre></td></tr></table></figure></p><h4 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a>基本使用方法</h4><p>1.元组最通常的用法是用在打印语句中<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span> <span class="string">'%s is %d years old'</span>   % (name, age)</div><div class="line"><span class="string">"&#123;0&#125; can be &#123;1&#125;"</span>.<span class="built_in">format</span>(<span class="string">"strings"</span>, <span class="string">"formatted"</span>)  ##<span class="built_in">format</span> 方法</div></pre></td></tr></table></figure></p><p>2.定制字符串<br>%s——表示字符串<br>%d——表示整数<br>3.也可以一个定制<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print 'why <span class="keyword">is</span> %s playing <span class="keyword">with</span> <span class="keyword">that</span> python?' % <span class="built_in">name</span></div></pre></td></tr></table></figure></p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>1.元组拆包<br>你可以把元组（或列表）中的元素解包赋值给多个变量<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a, b, c = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line">##现在 a 是 <span class="number">1</span>，b 是 <span class="number">2</span>，c 是 <span class="number">3</span></div><div class="line">##如果你省去了小括号，那么元组会被自动创建</div><div class="line">d, e, f = <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span></div></pre></td></tr></table></figure></p><p>2.交换两个值<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">e, d = d, e</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#现在 d 是 5 而 e 是 4</span></span></div></pre></td></tr></table></figure></p><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><h4 id="属性-2"><a href="#属性-2" class="headerlink" title="属性"></a>属性</h4><p>1.字典是dict类的实例/对象<br>2.花括号<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">ab</span> = &#123; <span class="string">'Swaroop'</span> : <span class="string">'swaroopch@byteofpython.info'</span>&#125;</div><div class="line"><span class="attr">d</span> = &#123;key1 : value1, key2 : value2 &#125;</div></pre></td></tr></table></figure></p><p>3.字典输出无序<br>4.映射mapping：<br>通过名称来引用值的数据结构<br>把键（名字）和值（详细情况）联系在一起<br>哈希映射或相联数组(重要)</p><h4 id="基本使用方法-1"><a href="#基本使用方法-1" class="headerlink" title="基本使用方法"></a>基本使用方法</h4><p>1.<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> <span class="string">"Swaroop's address is %s"</span> % ab[<span class="string">'Swaroop'</span>]</div></pre></td></tr></table></figure></p><p>2.用索引操作符来寻址一个键并为它赋值<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ab[<span class="string">'Guido'</span>] = <span class="string">'guido@python.org'</span></div></pre></td></tr></table></figure></p><p>3.del语句来删除键/值对<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">del</span> ab[<span class="string">'Spammer'</span>]</div></pre></td></tr></table></figure></p><p>4.使用in操作符检验一个键/值对是否存在<br>或者使用dict类的has_key方法<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="string">'Guido'</span> <span class="keyword">in</span> <span class="string">ab:</span></div></pre></td></tr></table></figure></p><p>5.使用 in 来检查一个字典是否包含某个键名<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"one"</span> <span class="keyword">in</span> filled_dict #=&gt; <span class="literal">True</span></div></pre></td></tr></table></figure></p><h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h4><p>1.与键名有关<br>将字典的所有键名获取为一个列表<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">filled_dict.keys() #=&gt; [<span class="string">"three"</span>, <span class="string">"two"</span>, <span class="string">"one"</span>]</div><div class="line">##请注意：无法保证字典键名的顺序如何排列</div></pre></td></tr></table></figure></p><p>将字典的所有键值获取为一个列表<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">filled_dict.values() #=&gt; [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</div></pre></td></tr></table></figure></p><p>2.与键值有关<br>使用 [] 来查询键值：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">filled_dict[<span class="string">"one"</span>] <span class="meta">#=&gt; 1</span></div></pre></td></tr></table></figure></p><p>get根据key获取value值，key不存在时返回None，查询一个不存在的键名会产生一个键名错误：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">filled_dict[<span class="string">"four"</span>] <span class="comment"># KeyError</span></div><div class="line"><span class="comment">##所以要使用 get 方法来避免键名错误</span></div><div class="line">filled_dict.<span class="keyword">get</span>(<span class="string">"one"</span>) <span class="comment">#=&gt; 1</span></div><div class="line">filled_dict.<span class="keyword">get</span>(<span class="string">"four"</span>) <span class="comment">#=&gt; None</span></div><div class="line"><span class="comment">##get 方法支持传入一个默认值参数，将在取不到值时返回</span></div><div class="line">filled_dict.<span class="keyword">get</span>(<span class="string">"one"</span>, <span class="number">4</span>) <span class="comment">#=&gt; 1</span></div><div class="line">filled_dict.<span class="keyword">get</span>(<span class="string">"four"</span>, <span class="number">4</span>) <span class="comment">#=&gt; 4</span></div></pre></td></tr></table></figure></p><p>pop获取指定键的值，然后将该键值对从字典中移除。<br>setdefault根据key返回对应的value值，key不存在则返回默认值并相应更新字典。<br>3.都有关<br>items：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">字典的<span class="keyword">items方法来使用字典中的每个键/值对，来使用字典中的每个键/值对。</span></div><div class="line"><span class="keyword">将所有的项以列表的方式返回。</span></div><div class="line"><span class="keyword">iteritems返回迭代器。</span></div></pre></td></tr></table></figure></p><p>Setdefault 方法可以安全地把新的名值对添加到字典里：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">filled_dict.setdefault(<span class="string">"five"</span>, <span class="number">5</span>)</div><div class="line">##filled_dict[<span class="string">"five"</span>] 被设置为 <span class="number">5</span></div><div class="line">filled_dict.setdefault(<span class="string">"five"</span>, <span class="number">6</span>)</div><div class="line">##filled_dict[<span class="string">"five"</span>] 仍然为 <span class="number">5</span></div></pre></td></tr></table></figure></p><p>copy、deepcopy复制（浅复制、深复制）。<br>popitem随机移除某个键值对。<br>clear清除字典中所有的项。<br>update使用一个字典去更新另一个字典：<br><figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">字典重点键值对会添加到原来的字典中</div><div class="line">有相同的<span class="built_in">key</span>则更新对应的<span class="built_in">value</span></div></pre></td></tr></table></figure></p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">person_info=&#123;uid[0]:&#123;"name":name[0],"age":age[0],"sex":sex[0]&#125;&#125;</div><div class="line">person_info[<span class="string">"u1"</span>][<span class="symbol">'name'</span>]</div><div class="line"><span class="section">##取u1中name是什么</span></div></pre></td></tr></table></figure><p>不定常字典:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func3</span><span class="params">(**kwargs)</span></span></div><div class="line">func3(host=<span class="string">"localhost"</span>,port=<span class="string">"3366"</span>)</div><div class="line">连接数据库时方便使用</div></pre></td></tr></table></figure></p><p>先创建空表，后逐步填充:<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">employee</span>=&#123;&#125;.fromkeys((<span class="string">"name"</span>,<span class="string">"age"</span>,<span class="string">"salary"</span>).<span class="string">"i,do not know"</span>)</div></pre></td></tr></table></figure></p><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><p>1.set 用于保存集合<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">empty_set = set()</div><div class="line">some_set = set([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</div><div class="line">##some_set 现在是 set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div><div class="line">##从 Python <span class="number">2.7</span> 开始，&#123;&#125; 可以用来声明一个集合</div><div class="line">filled_set = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</div><div class="line">##（译注：集合是种无序不重复的元素集，因此重复的 <span class="number">2</span> 被滤除了。）</div><div class="line">##（译注：&#123;&#125; 不会创建一个空集合，只会创建一个空字典。）</div></pre></td></tr></table></figure></p><p>2.把更多的元素添加进一个集合<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">filled_set.add(<span class="number">5</span>)</div><div class="line">##filled_set 现在是 &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</div></pre></td></tr></table></figure></p><p>3.使用 &amp; 来获取交集<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">other_set = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</div><div class="line">filled_set &amp; other_set #=&gt; &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</div></pre></td></tr></table></figure></p><p>4.使用 - 来获取补集<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125; - &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>&#125; #=&gt; &#123;<span class="number">1</span>, <span class="number">4</span>&#125;</div></pre></td></tr></table></figure></p><h3 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h3><p>1.列表、元组和字符串都是序列<br>2.索引操作符<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print <span class="symbol">'Item</span> <span class="number">0</span> <span class="keyword">is</span>', shoplist[<span class="number">0</span>]</div></pre></td></tr></table></figure></p><p>3.切片操作符<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">print 'Item <span class="number">1</span> <span class="keyword">to</span> <span class="number">-1</span> <span class="keyword">is</span>', shoplist[<span class="number">1</span>:<span class="number">-1</span>]</div><div class="line"><span class="comment">##相当于数学中的左闭右开区间</span></div></pre></td></tr></table></figure></p><p>4.使用 | 来获取并集<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">filled_set | other_set #=&gt; &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</div></pre></td></tr></table></figure></p><h3 id="引用-参考"><a href="#引用-参考" class="headerlink" title="引用/参考"></a>引用/参考</h3><p>如果是想复制，使用切片操作，复制后复制副本不受原始对象变化影响。<br>如果只是使用另一个变量名，那么是只是参考同一个对象。</p><h3 id="更多字符串的方法"><a href="#更多字符串的方法" class="headerlink" title="更多字符串的方法"></a>更多字符串的方法</h3><p>1.startwith方法<br>测试字符串是否以给定字符串开始<br>2.in操作符<br>给定字符串是否是另一个字符串的一部分<br>3.find方法<br>找出位置，返回-1表示找不到<br>4.字符串join<br>返回一个生成的大字符串：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">delimiter = <span class="string">'_*_'</span></div><div class="line"><span class="built_in">print</span> delimiter.join(mylist)</div><div class="line">mylist = [<span class="string">'Brazil'</span>,<span class="string">'Russia'</span>,<span class="string">'India'</span>,<span class="string">'China'</span>]</div><div class="line"><span class="comment">##结果:</span></div><div class="line">Brazil_*_Russia_*_India_*_China</div></pre></td></tr></table></figure></p><h3 id="python推导式"><a href="#python推导式" class="headerlink" title="python推导式"></a>python推导式</h3><p>for循环结合表达式<br>列表推导式<br>字典推导式<br>集合推导式</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;此文为简明Python教程笔记。&lt;/p&gt;
&lt;h1 id=&quot;第一部分&quot;&gt;&lt;a href=&quot;#第一部分&quot; class=&quot;headerlink&quot; title=&quot;第一部分&quot;&gt;&lt;/a&gt;第一部分&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="python" scheme="https://chumingke.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://chumingke.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>MySQL查询语句练习题(50题版)</title>
    <link href="https://chumingke.github.io//blog/2017/10/MySQL-query-exercises-50.html"/>
    <id>https://chumingke.github.io//blog/2017/10/MySQL-query-exercises-50.html</id>
    <published>2017-10-06T09:40:04.000Z</published>
    <updated>2017-10-06T09:40:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>学生表：Student（编号sid，姓名sname，年龄sage，性别ssex)<br>课程表：Course（课程编号cid，课程名称cname，教师编号tid）<br>成绩表：Sc（学生编号sid，课程编号cid，成绩score）<br>教师表：Teacher（教师编号tid，姓名tname）</p><p>1，插入学生数据<br>| 学号        | 姓名       | 年龄  |  性别|<br>| :——–: |:———–:|:———-:|:——:|<br>| 1001| 张三| 10| 男|<br>| 1002| 李四| 11| 女|<br>| 1003| 王五| 12| 男|<br>| 1004| 马六| 19| 女|<br>| 1005| 孙七| 22| 女|<br>| 1006| 钱八| 18| 男|<br>| 1007| 赵九| 11| 女|<br>| 1008| 周公| 19| 男|<br>2，插入老师数据<br>| 教师编号        | 教师姓名       |<br>| :——–: |:———–:|<br>| 1| 叶平|<br>| 2| 李浩然|<br>| 3| 胡平原|<br>| 4| 朱清时|<br>| 5| 赛先生|<br>| 6| 宋三东|<br>3，插入课程数据<br>| 课程编号      | 课程名    |教师编号  |<br>| :——–: |:———–:|:———-:|<br>| 001| PHP| 1|<br>| 002| C#| 1|<br>| 003| C++| 2|<br>| 004| JAVA| 3|<br>| 005| Python| 4|<br>| 006| R| 5|<br>| 007| HTML| 6|<br>4，插入成绩数据<br>| 学号      | 课程编号    |成绩  |<br>| :——–: |:———–:|:———-:|<br>| 1001| 001| 89|<br>| 1002| 001| 80|<br>| 1003| 001| 30|<br>| 1004| 001| 78|<br>| 1005| 001| 68|<br>| 1006| 001| 93|<br>| 1007| 001| 62|<br>| 1001| 002| 67|<br>| 1002| 002| 86|<br>| 1003| 002| 67|<br>| 1004| 002| 77|<br>| 1005| 002| 66|<br>| 1006| 002| 84|<br>| 1007| 002| 72|<br>| 1001| 003| 82|<br>| 1002| 003| 85|<br>| 1003| 003| 32|<br>| 1004| 003| 73|<br>| 1005| 003| 64|<br>| 1006| 003| 87|<br>| 1007| 003| 77|<br>| 1008| 003| 94|<br>| 1001| 004| 39|<br>| 1002| 004| 80|<br>| 1003| 004| 80|<br>| 1004| 004| 88|<br>| 1005| 004| 68|<br>| 1006| 004| 59|<br>| 1007| 004| 42|<br>| 1008| 004| 64|<br>| 1001| 005| 89|<br>| 1002| 005| 70|<br>| 1003| 005| 60|<br>| 1004| 005| 58|<br>| 1005| 005| 38|<br>| 1006| 005| 89|<br>| 1007| 005| 72|<br>| 1008| 005| 64|<br>| 1001| 006| 49|<br>| 1002| 006| 90|<br>| 1003| 006| 70|<br>| 1004| 006| 48|<br>| 1005| 006| 98|<br>| 1006| 006| 59|<br>| 1007| 006| 72|<br>| 1008| 006| 74|<br>| 1001| 007| 49|<br>| 1002| 007| 50|<br>| 1003| 007| 70|<br>| 1004| 007| 88|<br>| 1005| 007| 78|<br>| 1006| 007| 99|<br>| 1007| 007| 82|<br>以下题目答案均由45题版本的数据库来操作。懒得再建了。</p><h2 id="1、查询“001”课程比“002”课程成绩高的所有学生的学号；"><a href="#1、查询“001”课程比“002”课程成绩高的所有学生的学号；" class="headerlink" title="1、查询“001”课程比“002”课程成绩高的所有学生的学号；"></a>1、查询“001”课程比“002”课程成绩高的所有学生的学号；</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#自连接</span></div><div class="line"><span class="attribute">select</span> S<span class="literal">no</span> from Score a </div><div class="line">where C<span class="literal">no</span>= <span class="string">'3-105'</span> and </div><div class="line">Degree &gt; (<span class="literal">select</span> Degree from Score b where C<span class="literal">no</span>=<span class="string">'3-245'</span>and a.S<span class="literal">no</span>=b.S<span class="literal">no</span>);</div><div class="line"><span class="comment">#输出两个表后连接比较</span></div><div class="line"><span class="attribute">select</span> a.S<span class="literal">no</span> from </div><div class="line">(<span class="literal">select</span> S<span class="literal">no</span>,Degree from Score where C<span class="literal">no</span>=<span class="string">'3-105'</span>) a inner join </div><div class="line">(<span class="literal">select</span> S<span class="literal">no</span>,Degree from Score where C<span class="literal">no</span>=<span class="string">'3-245'</span>) b </div><div class="line"><span class="literal">on</span> a.S<span class="literal">no</span>=b.S<span class="literal">no</span></div><div class="line">where a.Degree&gt;b.Degree;</div></pre></td></tr></table></figure><h2 id="2、查询平均成绩大于60分的同学的学号和平均成绩；"><a href="#2、查询平均成绩大于60分的同学的学号和平均成绩；" class="headerlink" title="2、查询平均成绩大于60分的同学的学号和平均成绩；"></a>2、查询平均成绩大于60分的同学的学号和平均成绩；</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select Sno,avg(Degree) <span class="keyword">from</span> Score </div><div class="line">group by Sno</div><div class="line">having avg(Degree)&gt;60;</div></pre></td></tr></table></figure><h2 id="3、查询所有同学的学号、姓名、选课数、总成绩；"><a href="#3、查询所有同学的学号、姓名、选课数、总成绩；" class="headerlink" title="3、查询所有同学的学号、姓名、选课数、总成绩；"></a>3、查询所有同学的学号、姓名、选课数、总成绩；</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select Score.Sno,Sname,count(*),sum(Degree) <span class="keyword">from</span> Score,Student where Score.<span class="attribute">Sno</span>=Student.Sno<span class="built_in"> group </span>by Score.Sno ;</div><div class="line"></div><div class="line">select Score.Sno,Sname,count(*),sum(Degree) <span class="keyword">from</span> Score inner join Student on Score.<span class="attribute">Sno</span>=Student.Sno<span class="built_in"> group </span>by Sno;</div></pre></td></tr></table></figure><h2 id="4、查询姓“李”的老师的个数；"><a href="#4、查询姓“李”的老师的个数；" class="headerlink" title="4、查询姓“李”的老师的个数；"></a>4、查询姓“李”的老师的个数；</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#还需要去重</div><div class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span>(Tname)) <span class="keyword">from</span> Teacher <span class="keyword">where</span> Tname <span class="keyword">like</span> <span class="string">'李%'</span>;</div></pre></td></tr></table></figure><h2 id="5、查询没学过“叶平”老师课的同学的学号、姓名；"><a href="#5、查询没学过“叶平”老师课的同学的学号、姓名；" class="headerlink" title="5、查询没学过“叶平”老师课的同学的学号、姓名；"></a>5、查询没学过“叶平”老师课的同学的学号、姓名；</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> Sno,Sname <span class="keyword">from</span> Student <span class="keyword">where</span> Sno <span class="keyword">not</span> <span class="keyword">in</span> (</div><div class="line"><span class="keyword">select</span> Sno <span class="keyword">from</span> Score <span class="keyword">where</span> Cno <span class="keyword">in</span> (</div><div class="line"><span class="keyword">select</span> Cno <span class="keyword">from</span> Course <span class="keyword">where</span> Tno = (</div><div class="line"><span class="keyword">select</span> Tno <span class="keyword">from</span> Teacher <span class="keyword">where</span> Tname =<span class="string">'李诚'</span>)));</div><div class="line"></div><div class="line"><span class="keyword">select</span> Sno,Sname <span class="keyword">from</span> Student <span class="keyword">where</span> Sno <span class="keyword">not</span> <span class="keyword">in</span>(</div><div class="line"><span class="keyword">select</span> Score.Sno <span class="keyword">from</span> Score <span class="keyword">inner</span> <span class="keyword">join</span> Course <span class="keyword">on</span> Score.Cno=Course.Cno <span class="keyword">inner</span> <span class="keyword">join</span> Teacher <span class="keyword">on</span> Course.Tno=Teacher.Tno <span class="keyword">where</span> Tname=<span class="string">'李诚'</span>);</div></pre></td></tr></table></figure><h2 id="6、查询学过“001”并且也学过编号“002”课程的同学的学号、姓名；"><a href="#6、查询学过“001”并且也学过编号“002”课程的同学的学号、姓名；" class="headerlink" title="6、查询学过“001”并且也学过编号“002”课程的同学的学号、姓名；"></a>6、查询学过“001”并且也学过编号“002”课程的同学的学号、姓名；</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> Student.Sno,Sname <span class="keyword">from</span> Student inner <span class="keyword">join</span> Score <span class="keyword">on</span> Student.Sno=Score.Sno <span class="keyword">where</span> Cno=<span class="string">'001'</span> <span class="keyword">and</span> Student.Sno <span class="keyword">in</span> (<span class="keyword">select</span> Student.Sno,Sname <span class="keyword">from</span> Student inner <span class="keyword">join</span> Score <span class="keyword">on</span> Student.Sno=Score.Sno <span class="keyword">where</span> Cno=<span class="string">'002'</span>);</div><div class="line"></div><div class="line"><span class="keyword">select</span> Sno,Sname <span class="keyword">from</span> Student <span class="keyword">where</span> Sno <span class="keyword">in</span>(</div><div class="line"><span class="keyword">select</span> Sno <span class="keyword">from</span> Score <span class="keyword">where</span> Cno = <span class="string">'001'</span> <span class="keyword">and</span> Sno <span class="keyword">in</span>(</div><div class="line"><span class="keyword">select</span> Sno <span class="keyword">from</span> Score <span class="keyword">where</span> Cno=<span class="string">'002'</span>));</div><div class="line"></div><div class="line"><span class="keyword">select</span> Student.Sno,Student.Sname <span class="keyword">from</span> Student,Score  <span class="keyword">where</span> Student.Sno=Score.Sno <span class="keyword">and</span> Score.Sno=<span class="string">'001'</span> <span class="keyword">and</span> exists( <span class="keyword">Select</span> * <span class="keyword">from</span> Score <span class="keyword">as</span> SC_2 <span class="keyword">where</span> SC_2.Sno=SC.Sno <span class="keyword">and</span> SC_2.Sno=<span class="string">'002'</span>);</div><div class="line">#EXISTS用于检查子查询是否至少会返回一行数据，该子查询实际上并不返回任何数据，而是返回值<span class="keyword">True</span>或<span class="keyword">False</span>。</div></pre></td></tr></table></figure><h2 id="7、查询学过“叶平”老师所教的所有课的同学的学号、姓名；"><a href="#7、查询学过“叶平”老师所教的所有课的同学的学号、姓名；" class="headerlink" title="7、查询学过“叶平”老师所教的所有课的同学的学号、姓名；"></a>7、查询学过“叶平”老师所教的所有课的同学的学号、姓名；</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> Sno,Sname <span class="keyword">from</span> Student <span class="keyword">where</span> Sno <span class="keyword">in</span> (</div><div class="line"><span class="keyword">select</span> Sno <span class="keyword">from</span> Score <span class="keyword">where</span> Cno <span class="keyword">in</span>(</div><div class="line"><span class="keyword">select</span> Cno <span class="keyword">from</span> Course <span class="keyword">where</span> Tno =(</div><div class="line"><span class="keyword">select</span> Tno <span class="keyword">from</span> Teacher <span class="keyword">where</span> Tname = <span class="string">'李诚'</span>))</div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span> Sno </div><div class="line">having count<span class="comment">(*)=(select count(*)</span> <span class="keyword">from</span> Course,Teacher <span class="keyword">where</span> Course.Tno=Teacher.Tno <span class="keyword">and</span> Tname =<span class="string">'李诚'</span>)</div><div class="line">);</div><div class="line"></div><div class="line"><span class="keyword">select</span> Student.Sno,Student.Sname <span class="keyword">from</span> Student,Score,Course,Teacher <span class="keyword">where</span> Student.Sno=Score.Sno</div><div class="line"><span class="keyword">and</span> Score.Cno=Course.Cno <span class="keyword">and</span> Course.Tno = Teacher.Tno <span class="keyword">and</span> Teacher.Tname=<span class="string">'李诚'</span></div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span> Sno </div><div class="line">having count<span class="comment">(*) = (select count(*)</span> <span class="keyword">from</span> Course,Teacher <span class="keyword">where</span> Course.Tno= Teacher.Tno <span class="keyword">and</span> Teacher.Tname= <span class="string">'李诚'</span>);</div></pre></td></tr></table></figure><h2 id="8、查询课程编号“002”的成绩比课程编号“001”课程低的所有同学的学号、姓名；"><a href="#8、查询课程编号“002”的成绩比课程编号“001”课程低的所有同学的学号、姓名；" class="headerlink" title="8、查询课程编号“002”的成绩比课程编号“001”课程低的所有同学的学号、姓名；"></a>8、查询课程编号“002”的成绩比课程编号“001”课程低的所有同学的学号、姓名；</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> Sno,Sname <span class="keyword">from</span> Student <span class="keyword">where</span> Sno <span class="keyword">in</span> (</div><div class="line"><span class="keyword">select</span> Sno <span class="keyword">from</span> Score a2 <span class="keyword">where</span> Cno=<span class="string">'002'</span> <span class="keyword">and</span> Degree&gt;</div><div class="line">(<span class="keyword">select</span> Degree <span class="keyword">from</span> Score a1 <span class="keyword">where</span> Cno=<span class="string">'001'</span> <span class="keyword">and</span> a1.Sno=a2.Sno));</div><div class="line"></div><div class="line"><span class="keyword">Select</span> Sno,Sname <span class="keyword">from</span> (<span class="keyword">select</span> Student.Sno,Student.Sname,Degree,(<span class="keyword">select</span> score <span class="keyword">from</span> Score SC_2 <span class="keyword">where</span> SC_2.Sno=Student.Sno <span class="keyword">and</span> SC_2.Cno=<span class="string">'002'</span>) Degree2 <span class="keyword">from</span> Student,Score <span class="keyword">where</span> Student.Sno=Score.Sno <span class="keyword">and</span> Cno =<span class="string">'001'</span>) S_2 <span class="keyword">where</span> Degree2 &lt;Degree;</div></pre></td></tr></table></figure><h2 id="9、查询所有课程成绩小于60分的同学的学号、姓名；"><a href="#9、查询所有课程成绩小于60分的同学的学号、姓名；" class="headerlink" title="9、查询所有课程成绩小于60分的同学的学号、姓名；"></a>9、查询所有课程成绩小于60分的同学的学号、姓名；</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#注意关键词所有课程，可以采用逆向思维</div><div class="line"><span class="keyword">select</span> Sno,Sname <span class="keyword">from</span> Student <span class="keyword">where</span> Sno <span class="keyword">not</span> <span class="keyword">in</span> (</div><div class="line"><span class="keyword">select</span> Sno <span class="keyword">from</span> Score <span class="keyword">where</span> Degree&gt;<span class="number">60</span>);</div></pre></td></tr></table></figure><h2 id="10、查询没有学全所有课的同学的学号、姓名；"><a href="#10、查询没有学全所有课的同学的学号、姓名；" class="headerlink" title="10、查询没有学全所有课的同学的学号、姓名；"></a>10、查询没有学全所有课的同学的学号、姓名；</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">select Sno,Sname <span class="keyword">from</span> Student where Sno <span class="keyword">not</span> <span class="keyword">in</span> (</div><div class="line">select Sno <span class="keyword">from</span> Score<span class="built_in"> group </span>by Sno</div><div class="line">having count(*) = (</div><div class="line">select count(distinct(Cno)) <span class="keyword">from</span> Score));</div><div class="line"></div><div class="line">select Sno,Sname <span class="keyword">from</span> Student where Sno <span class="keyword">not</span> <span class="keyword">in</span> (</div><div class="line">select Sno <span class="keyword">from</span> Score<span class="built_in"> group </span>by Sno</div><div class="line">having count(*) = (</div><div class="line">select count(*) <span class="keyword">from</span> Course));</div><div class="line"></div><div class="line">select Student.Sno,Student.Sname</div><div class="line"><span class="keyword">from</span> Student,Score</div><div class="line">where Student.<span class="attribute">Sno</span>=Score.Sno<span class="built_in"> group </span>by  Student.Sno,Student.Sname </div><div class="line">having count(Cno) &lt;(select count(Cno) <span class="keyword">from</span> Course);</div></pre></td></tr></table></figure><h2 id="11、查询至少有一门课与学号为“1001”的同学所学相同的同学的学号和姓名；"><a href="#11、查询至少有一门课与学号为“1001”的同学所学相同的同学的学号和姓名；" class="headerlink" title="11、查询至少有一门课与学号为“1001”的同学所学相同的同学的学号和姓名；"></a>11、查询至少有一门课与学号为“1001”的同学所学相同的同学的学号和姓名；</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> Sno,Sname <span class="keyword">from</span> Student <span class="keyword">where</span> Sno <span class="keyword">in</span> (</div><div class="line"><span class="keyword">select</span> Sno <span class="keyword">from</span> Score <span class="keyword">where</span> Cno <span class="keyword">in</span> (</div><div class="line"><span class="keyword">select</span> Cno <span class="keyword">from</span> Score <span class="keyword">where</span> Sno = <span class="string">'103'</span>));</div></pre></td></tr></table></figure><h2 id="12、查询与“1001”同学所学课程相同的其他同学学号和姓名；"><a href="#12、查询与“1001”同学所学课程相同的其他同学学号和姓名；" class="headerlink" title="12、查询与“1001”同学所学课程相同的其他同学学号和姓名；"></a>12、查询与“1001”同学所学课程相同的其他同学学号和姓名；</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#自己做的待考证</div><div class="line"><span class="keyword">select</span> Sno,Sname <span class="keyword">from</span> Student <span class="keyword">where</span> Sno <span class="keyword">in</span>(</div><div class="line"><span class="keyword">select</span> Sno <span class="keyword">from</span> Score a <span class="keyword">where</span> Cno <span class="keyword">in</span> (<span class="keyword">select</span> Cno <span class="keyword">from</span> Score <span class="keyword">where</span> Sno=<span class="string">'103'</span>)</div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span> Sno </div><div class="line">having count<span class="comment">(*) = (select count(*)</span> <span class="keyword">from</span> Score <span class="keyword">where</span> Sno=<span class="string">'103'</span>)</div><div class="line">);</div></pre></td></tr></table></figure><h2 id="13、把“SC”表中“叶平”老师教的课的成绩都更改为此课程的平均成绩；"><a href="#13、把“SC”表中“叶平”老师教的课的成绩都更改为此课程的平均成绩；" class="headerlink" title="13、把“SC”表中“叶平”老师教的课的成绩都更改为此课程的平均成绩；"></a>13、把“SC”表中“叶平”老师教的课的成绩都更改为此课程的平均成绩；</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#这个方法出不来</div><div class="line"><span class="keyword">update</span> Score a <span class="keyword">set</span> Degree = (<span class="keyword">select</span> <span class="built_in">avg</span>(Degree) <span class="keyword">from</span> Score b <span class="keyword">group</span> <span class="keyword">by</span> Cno <span class="keyword">where</span> a.Cno=b.Cno)</div><div class="line"><span class="keyword">where</span> a.Cno <span class="keyword">in</span> (<span class="keyword">select</span> Cno <span class="keyword">from</span> Course,Teacher <span class="keyword">where</span> Teacher.Tno = Course.Tno <span class="keyword">and</span> Tname=<span class="string">'李诚'</span>));</div><div class="line">#网上的方法是</div><div class="line"><span class="keyword">update</span> SC <span class="keyword">set</span> score=(<span class="keyword">select</span> <span class="built_in">avg</span>(SC_2.score) </div><div class="line">    <span class="keyword">from</span> SC SC_2 </div><div class="line">    <span class="keyword">where</span> SC_2.C#=SC.C# ) <span class="keyword">from</span> Course,Teacher <span class="keyword">where</span> Course.C#=SC.C# <span class="keyword">and</span> Course.T#=Teacher.T# <span class="keyword">and</span> Teacher.Tname=<span class="string">'叶平'</span>); </div><div class="line"></div><div class="line"><span class="keyword">update</span> Score <span class="keyword">inner</span> <span class="keyword">join</span> (<span class="keyword">select</span> Cno,<span class="built_in">avg</span>(Degree) avgDegree <span class="keyword">from</span> Score <span class="keyword">where</span> Cno <span class="keyword">in</span> </div><div class="line">(<span class="keyword">select</span> Cno <span class="keyword">from</span> Course <span class="keyword">where</span> Tno = (<span class="keyword">select</span> Tno <span class="keyword">from</span> Teacher <span class="keyword">where</span> Tname = <span class="string">'李诚'</span>)) <span class="keyword">group</span> <span class="keyword">by</span> Cno) a</div><div class="line"><span class="keyword">on</span> Score.Cno=a.Cno</div><div class="line"><span class="keyword">Set</span> Score.degree = a.avgDegree;</div></pre></td></tr></table></figure><h2 id="14、查询和“1002”号的同学学习的课程完全相同的其他同学学号和姓名；"><a href="#14、查询和“1002”号的同学学习的课程完全相同的其他同学学号和姓名；" class="headerlink" title="14、查询和“1002”号的同学学习的课程完全相同的其他同学学号和姓名；"></a>14、查询和“1002”号的同学学习的课程完全相同的其他同学学号和姓名；</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#有可能学了同样数目但是类型不同的课程，所以用not in</div><div class="line"><span class="keyword">select</span> Sno,Sname <span class="keyword">from</span> Student <span class="keyword">where</span> Sno <span class="keyword">in</span> (</div><div class="line"><span class="keyword">select</span> Sno <span class="keyword">from</span> Score <span class="keyword">where</span> Sno <span class="keyword">not</span> <span class="keyword">in</span>(</div><div class="line"><span class="keyword">select</span> Sno <span class="keyword">from</span> Score <span class="keyword">where</span> Cno <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> Cno <span class="keyword">from</span> Score <span class="keyword">where</span> Sno = <span class="string">'103'</span>))</div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span> Sno</div><div class="line"><span class="keyword">having</span> <span class="built_in">count</span>(Cno) = (<span class="keyword">select</span> <span class="built_in">count</span>(Cno) <span class="keyword">from</span> Score <span class="keyword">where</span> Sno = <span class="string">'103'</span>));</div></pre></td></tr></table></figure><h2 id="15、删除学习“叶平”老师课的SC表记录；"><a href="#15、删除学习“叶平”老师课的SC表记录；" class="headerlink" title="15、删除学习“叶平”老师课的SC表记录；"></a>15、删除学习“叶平”老师课的SC表记录；</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">delete <span class="keyword">from</span> Score <span class="keyword">where</span> Cno = (</div><div class="line">select Cno <span class="keyword">from</span> Course <span class="keyword">where</span> Tno = (</div><div class="line">select Tno <span class="keyword">from</span> Teacher <span class="keyword">where</span> Tname=<span class="string">'叶平'</span>));</div><div class="line">``` </div><div class="line">## <span class="number">16</span>、向SC表中插入一些记录，这些记录要求符合以下条件：没有上过编号“<span class="number">003</span>”课程的同学学号、<span class="string">'002'</span>号课的平均成绩；</div></pre></td></tr></table></figure><p>insert into Score (Sno,Cno,Degree)<br>values<br>(select Sno,002,(select avg(Degree) from Score where Cno =’002’ ) from Student where Sno not in (select Sno from Score where Cno = ‘003’));<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">## <span class="number">17</span>、按平均成绩从高到低显示所有学生的“JAVA”、“C#”、“C++”三门的课程成绩，按如下形式显示： 学生ID,,C#,C++,JAVA,有效课程数,有效平均分。</div></pre></td></tr></table></figure></p><p>select Sno as ‘学生ID’,<br>(select Degree from Score a where Cno =(select Cno from Course where Cname=’C#’) and a.Sno=SC.Sno) as ‘C#’,<br>(select Degree from Score b where Cno =(select Cno from Course where Cname=’C++’) and b.Sno=SC.Sno) as ‘C++’,<br>(select Degree from Score c where Cno =(select Cno from Course where Cname=’JAVA’) and c.Sno=SC.Sno) as ‘JAVA’,<br>count(*) as ‘有效课程数’,<br>avg(Degree) as ‘有效平均分’<br>from Score SC group by Sno<br>order by avg(Degree) desc;<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 18、查询各科成绩最高和最低的分：以如下形式显示：课程ID，最高分，最低分;</span></span></div></pre></td></tr></table></figure></p><p>#自己写的<br>select Cno as ‘课程ID’,max(Degree) as ‘最高分’,min(Degree) as ‘最低分’ from Score group by Cno;</p><p>#网上的<br>SELECT L.Cno As 课程ID,L.score AS 最高分,R.score AS 最低分<br>    FROM SC L ,SC AS R<br>    WHERE L.Cno = R.Cno and<br>        L.Degree = (SELECT MAX(IL.Degree)<br>                      FROM SC AS IL,Student AS IM<br>                      WHERE L.Cno = IL.Cno and IM.Sno=IL.Sno<br>                      GROUP BY IL.Cno)<br>        AND<br>        R.Score = (SELECT MIN(IR.Degree)<br>                      FROM SC AS IR<br>                      WHERE R.Cno = IR.Cno<br>                  GROUP BY IR.Cno<br>                    );<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 19、按各科平均成绩从低到高和及格率的百分数从高到低顺序 ；</span></span></div></pre></td></tr></table></figure></p><p>#自己写的<br>select <em> from Score a order by<br>(select avg(Degree) from Score b where a.Cno=b.Cno group by Cno) asc,<br>(select count(</em>) from Score c where Degree &gt; 60 and a.Cno=c.Cno group by Cno)/(select count(*) from Score d where a.Cno=d.Cno group by Cno) desc;</p><p>#网上的<br>SELECT t.C# AS 课程号,max(course.Cname)AS 课程名,isnull(AVG(score),0) AS平均成绩,100 <em> SUM(CASE WHEN  isnull(score,0)&gt;=60 THEN 1 ELSE 0 END)/COUNT(</em>) AS 及格百分数<br>    FROM SC T,Course<br>    where t.C#=course.C#<br>    GROUP BY t.C#<br>    ORDER BY 100<em> SUM(CASE WHEN  isnull(score,0)&gt;=60 THEN 1 ELSE 0 END)/COUNT(</em>) DESC<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">## <span class="number">20</span>、查询如下课程平均成绩和及格率的百分数(用<span class="string">"1行"</span>显示): 企业管理（<span class="number">001</span>），马克思（<span class="number">002</span>），OO&amp;UML （<span class="number">003</span>），数据库（<span class="number">004</span>）</div></pre></td></tr></table></figure></p><p>SELECT SUM(CASE WHEN C# =’001’ THEN score ELSE 0 END)/SUM(CASE C# WHEN ‘001’ THEN 1 ELSE 0 END) AS 企业管理平均分,<br>100 <em> SUM(CASE WHEN C# = ‘001’ AND score &gt;= 60 THEN 1 ELSE 0 END)/SUM(CASE WHEN C# = ‘001’ THEN 1 ELSE 0 END) AS 企业管理及格百分数,<br>SUM(CASE WHEN C# = ‘002’ THEN score ELSE 0 END)/SUM(CASE C# WHEN ‘002’ THEN 1 ELSE 0 END) AS 马克思平均分,<br>100 </em> SUM(CASE WHEN C# = ‘002’ AND score &gt;= 60 THEN 1 ELSE 0 END)/SUM(CASE WHEN C# = ‘002’ THEN 1 ELSE 0 END) AS 马克思及格百分数,<br>SUM(CASE WHEN C# = ‘003’ THEN score ELSE 0 END)/SUM(CASE C# WHEN ‘003’ THEN 1 ELSE 0 END) AS UML平均分,<br>100<em> SUM(CASE WHEN C# = ‘003’ AND score &gt;= 60 THEN 1 ELSE 0 END)/SUM(CASE WHEN C# = ‘003’ THEN 1 ELSE 0 END) AS UML及格百分数,<br>SUM(CASE WHEN C# = ‘004’ THEN score ELSE 0 END)/SUM(CASE C# WHEN ‘004’ THEN 1 ELSE 0 END) AS 数据库平均分,<br>100 </em> SUM(CASE WHEN C# = ‘004’ AND score &gt;= 60 THEN 1 ELSE 0 END)/SUM(CASE WHEN C# = ‘004’ THEN 1 ELSE 0 END) AS 数据库及格百分数<br>FROM SC；<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 21、查询不同老师所教不同课程平均分从高到低显示</span></span></div></pre></td></tr></table></figure></p><p>  SELECT max(Z.T#) AS 教师ID,MAX(Z.Tname) AS 教师姓名,C.C# AS 课程ＩＤ,MAX(C.Cname) AS 课程名称,AVG(Score) AS 平均成绩<br>    FROM SC AS T,Course AS C ,Teacher AS Z<br>    where T.C#=C.C# and C.T#=Z.T#<br>  GROUP BY C.C#<br>  ORDER BY AVG(Score) DESC<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">## <span class="number">22</span>、查询如下课程成绩第 <span class="number">3</span> 名到第 <span class="number">6</span> 名的学生成绩单：企业管理（<span class="number">001</span>），马克思（<span class="number">002</span>），UML （<span class="number">003</span>），数据库（<span class="number">004</span>）  [学生ID],[学生姓名],企业管理,马克思,UML,数据库,平均成绩</div></pre></td></tr></table></figure></p><p>SELECT  DISTINCT top 3<br>      SC.S# As 学生学号,<br>        Student.Sname AS 学生姓名 ,<br>      T1.score AS 企业管理,<br>      T2.score AS 马克思,<br>      T3.score AS UML,<br>      T4.score AS 数据库,<br>      ISNULL(T1.score,0) + ISNULL(T2.score,0) + ISNULL(T3.score,0) + ISNULL(T4.score,0) as 总分<br>      FROM Student,SC  LEFT JOIN SC AS T1<br>                      ON SC.S# = T1.S# AND T1.C# = ‘001’<br>            LEFT JOIN SC AS T2<br>                      ON SC.S# = T2.S# AND T2.C# = ‘002’<br>            LEFT JOIN SC AS T3<br>                      ON SC.S# = T3.S# AND T3.C# = ‘003’<br>            LEFT JOIN SC AS T4<br>                      ON SC.S# = T4.S# AND T4.C# = ‘004’<br>      WHERE student.S#=SC.S# and<br>      ISNULL(T1.score,0) + ISNULL(T2.score,0) + ISNULL(T3.score,0) + ISNULL(T4.score,0)<br>      NOT IN<br>      (SELECT<br>            DISTINCT<br>            TOP 15 WITH TIES<br>            ISNULL(T1.score,0) + ISNULL(T2.score,0) + ISNULL(T3.score,0) + ISNULL(T4.score,0)<br>      FROM sc<br>            LEFT JOIN sc AS T1<br>                      ON sc.S# = T1.S# AND T1.C# = ‘k1’<br>            LEFT JOIN sc AS T2<br>                      ON sc.S# = T2.S# AND T2.C# = ‘k2’<br>            LEFT JOIN sc AS T3<br>                      ON sc.S# = T3.S# AND T3.C# = ‘k3’<br>            LEFT JOIN sc AS T4<br>                      ON sc.S# = T4.S# AND T4.C# = ‘k4’<br>      ORDER BY ISNULL(T1.score,0) + ISNULL(T2.score,0) + ISNULL(T3.score,0) + ISNULL(T4.score,0) DESC);<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">## <span class="number">23</span>、统计列印各科成绩,各分数段人数:课程ID,课程名称,<span class="string">[100-85]</span>,<span class="string">[85-70]</span>,<span class="string">[70-60]</span>,<span class="string">[ &lt;60]</span></div></pre></td></tr></table></figure></p><p>SELECT SC.C# as 课程ID, Cname as 课程名称<br>        ,SUM(CASE WHEN score BETWEEN 85 AND 100 THEN 1 ELSE 0 END) AS [100 - 85]<br>        ,SUM(CASE WHEN score BETWEEN 70 AND 85 THEN 1 ELSE 0 END) AS [85 - 70]<br>        ,SUM(CASE WHEN score BETWEEN 60 AND 70 THEN 1 ELSE 0 END) AS [70 - 60]<br>        ,SUM(CASE WHEN score &lt; 60 THEN 1 ELSE 0 END) AS [60 -]<br>    FROM SC,Course<br>    where SC.C#=Course.C#<br>    GROUP BY SC.C#,Cname;<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 24、查询学生平均成绩及其名次</span></span></div></pre></td></tr></table></figure></p><pre><code>  SELECT 1+(SELECT COUNT( distinct 平均成绩)           FROM (SELECT S#,AVG(score) AS 平均成绩                   FROM SC               GROUP BY S#               ) AS T1         WHERE 平均成绩 &gt; T2.平均成绩) as 名次,   S# as 学生学号,平均成绩 FROM (SELECT S#,AVG(score) 平均成绩         FROM SC     GROUP BY S#     ) AS T2 ORDER BY 平均成绩 desc; </code></pre><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 25、查询各科成绩前三名的记录:(不考虑成绩并列情况)</span></span></div></pre></td></tr></table></figure><pre><code>SELECT t1.S# as 学生ID,t1.C# as 课程ID,Score as 分数 FROM SC t1 WHERE score IN (SELECT TOP 3 score         FROM SC         WHERE t1.C#= C#       ORDER BY score DESC         ) ORDER BY t1.C#; </code></pre><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 26、查询每门课程被选修的学生数</span></span></div></pre></td></tr></table></figure><p>select c#,count(S#) from sc group by C#;<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 27、查询出只选修了一门课程的全部学生的学号和姓名</span></span></div></pre></td></tr></table></figure></p><p>  select SC.S#,Student.Sname,count(C#) AS 选课数<br>  from SC ,Student<br>  where SC.S#=Student.S# group by SC.S# ,Student.Sname having count(C#)=1;<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 28、查询男生、女生人数</span></span></div></pre></td></tr></table></figure></p><pre><code>Select count(Ssex) as 男生人数 from Student group by Ssex having Ssex=&apos;男&apos;; Select count(Ssex) as 女生人数 from Student group by Ssex having Ssex=&apos;女&apos;；</code></pre><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 29、查询姓“张”的学生名单</span></span></div></pre></td></tr></table></figure><p>SELECT Sname FROM Student WHERE Sname like ‘张%’;<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 30、查询同名同性学生名单，并统计同名人数</span></span></div></pre></td></tr></table></figure></p><p>  select Sname,count(<em>) from Student group by Sname having  count(</em>)&gt;1;<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 31、1981年出生的学生名单(注：Student表中Sage列的类型是datetime)</span></span></div></pre></td></tr></table></figure></p><pre><code>select Sname,  CONVERT(char (11),DATEPART(year,Sage)) as age from student where  CONVERT(char(11),DATEPART(year,Sage))=&apos;1981&apos;;</code></pre><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 32、查询每门课程的平均成绩，结果按平均成绩升序排列，平均成绩相同时，按课程号降序排列</span></span></div></pre></td></tr></table></figure><p>Select C#,Avg(score) from SC group by C# order by Avg(score),C# DESC ;<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 33、查询平均成绩大于85的所有学生的学号、姓名和平均成绩</span></span></div></pre></td></tr></table></figure></p><pre><code>select Sname,SC.S# ,avg(score) from Student,SC where Student.S#=SC.S# group by SC.S#,Sname having    avg(score)&gt;85; </code></pre><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 34、查询课程名称为“数据库”，且分数低于60的学生姓名和分数</span></span></div></pre></td></tr></table></figure><pre><code>Select Sname,isnull(score,0) from Student,SC,Course where SC.S#=Student.S# and SC.C#=Course.C# and  Course.Cname=&apos;数据库&apos;and score &lt;60; </code></pre><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 35、查询所有学生的选课情况；</span></span></div></pre></td></tr></table></figure><pre><code>SELECT SC.S#,SC.C#,Sname,Cname FROM SC,Student,Course where SC.S#=Student.S# and SC.C#=Course.C# ; </code></pre><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 36、查询任何一门课程成绩在70分以上的姓名、课程名称和分数；</span></span></div></pre></td></tr></table></figure><pre><code>SELECT  distinct student.S#,student.Sname,SC.C#,SC.score FROM student,Sc WHERE SC.score&gt;=70 AND SC.S#=student.S#; </code></pre><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 37、查询不及格的课程，并按课程号从大到小排列</span></span></div></pre></td></tr></table></figure><p>select c# from sc where scor e <60 order="" by="" c#="" ;="" <figure="" class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">## <span class="number">38</span>、查询课程编号为<span class="number">003</span>且课程成绩在<span class="number">80</span>分以上的学生的学号和姓名；</div></pre></td></tr></table></60></p><p>select SC.S#,Student.Sname from SC,Student where SC.S#=Student.S# and Score&gt;80 and C#=’003’;<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 39、求选了课程的学生人数</span></span></div></pre></td></tr></table></figure></p><p>select count(*) from sc;<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 40、查询选修“叶平”老师所授课程的学生中，成绩最高的学生姓名及其成绩</span></span></div></pre></td></tr></table></figure></p><pre><code>select Student.Sname,score from Student,SC,Course C,Teacher where Student.S#=SC.S# and SC.C#=C.C# and C.T#=Teacher.T# and Teacher.Tname=&apos;叶平&apos; and SC.score=(select max(score)from SC where C#=C.C# ); </code></pre><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 41、查询各个课程及相应的选修人数</span></span></div></pre></td></tr></table></figure><p>select count(*) from sc group by C#;<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 42、查询不同课程成绩相同的学生的学号、课程号、学生成绩</span></span></div></pre></td></tr></table></figure></p><p>select distinct  A.S#,B.score from SC A  ,SC B where A.Score=B.Score and A.C# &lt;&gt;B.C# ;<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 43、查询每门功成绩最好的前两名</span></span></div></pre></td></tr></table></figure></p><p>SELECT t1.S# as 学生ID,t1.C# as 课程ID,Score as 分数<br>      FROM SC t1<br>      WHERE score IN (SELECT TOP 2 score<br>              FROM SC<br>              WHERE t1.C#= C#<br>            ORDER BY score DESC<br>              )<br>      ORDER BY t1.C#;<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 44、统计每门课程的学生选修人数（超过10人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，查询结果按人数降序排列，若人数相同，按课程号升序排列</span></span></div></pre></td></tr></table></figure></p><pre><code>select  C# as 课程号,count(*) as 人数 from  sc  group  by  C# order  by  count(*) desc,c#  </code></pre><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 45、检索至少选修两门课程的学生学号</span></span></div></pre></td></tr></table></figure><p>select  S#<br>    from  sc<br>    group  by  s#<br>    having  count(*)  &gt;  =  2<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 46、查询全部学生都选修的课程的课程号和课程名</span></span></div></pre></td></tr></table></figure></p><pre><code>select  C#,Cname  from  Course  where  C#  in  (select  c#  from  sc group  by  c#)</code></pre><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 47、查询没学过“叶平”老师讲授的任一门课程的学生姓名</span></span></div></pre></td></tr></table></figure><p>select Sname from Student where S# not in (select S# from Course,Teacher,SC where Course.T#=Teacher.T# and SC.C#=course.C# and Tname=’叶平’);<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 48、查询两门以上不及格课程的同学的学号及其平均成绩</span></span></div></pre></td></tr></table></figure></p><p> select S#,avg(isnull(score,0)) from SC where S# in (select S# from SC where score <60 group="" by="" s#="" having="" count(*)="">2)group by S#;<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">## <span class="number">49</span>、检索“<span class="number">004</span>”课程分数小于<span class="number">60</span>，按分数降序排列的同学学号</div></pre></td></tr></table></figure></60></p><p>select S# from SC where C#=’004’and score <60 order="" by="" score="" desc;="" <figure="" class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">## <span class="number">50</span>、删除“<span class="number">002</span>”同学的“<span class="number">001</span>”课程的成绩</div></pre></td></tr></table></60></p><p>delete from Sc where S#=’001’and C#=’001’;<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">其他练习题：</div><div class="line">问题描述： 为管理岗位业务培训信息，建立<span class="number">3</span>个表:</div><div class="line"></div><div class="line">S (S#,SN,SD,SA) S#,SN,SD,SA 分别代表学号、学员姓名、所属单位、学员年龄</div><div class="line"></div><div class="line">C (C#,CN ) C#,CN 分别代表课程编号、课程名称</div><div class="line"></div><div class="line">SC ( S#,C#,G ) S#,C#,G 分别代表学号、所选修的课程编号、学习成绩</div><div class="line"></div><div class="line">要求实现如下<span class="number">5</span>个处理：</div><div class="line">## <span class="number">1.</span> 使用标准SQL嵌套语句查询选修课程名称为’税收基础’的学员学号和姓名</div></pre></td></tr></table></figure></p><p>SELECT SN,SD FROM S<br>WHERE [S#] IN(<br>    SELECT [S#] FROM C,SC<br>    WHERE C.[C#]=SC.[C#]<br>        AND CN=N’税收基础’)<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 2. 使用标准SQL嵌套语句查询选修课程编号为’C2’的学员姓名和所属单位</span></span></div></pre></td></tr></table></figure></p><p>SELECT S.SN,S.SD FROM S,SC<br>WHERE S.[S#]=SC.[S#]<br>    AND SC.[C#]=’C2’<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 3. 使用标准SQL嵌套语句查询不选修课程编号为’C5’的学员姓名和所属单位</span></span></div></pre></td></tr></table></figure></p><p>SELECT SN,SD FROM S<br>WHERE [S#] NOT IN(<br>    SELECT [S#] FROM SC<br>    WHERE [C#]=’C5’)<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 4. 使用标准SQL嵌套语句查询选修全部课程的学员姓名和所属单位</span></span></div></pre></td></tr></table></figure></p><p>SELECT SN,SD FROM S<br>WHERE [S#] IN(<br>    SELECT [S#] FROM SC<br>        RIGHT JOIN C ON SC.[C#]=C.[C#]<br>    GROUP BY [S#]<br>    HAVING COUNT(*)=COUNT(DISTINCT [S#]))<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 5. 查询选修了课程的学员人数</span></span></div></pre></td></tr></table></figure></p><p>SELECT 学员人数=COUNT(DISTINCT [S#]) FROM SC<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 6. 查询选修课程超过5门的学员学号和所属单位</span></span></div></pre></td></tr></table></figure></p><p>SELECT SN,SD FROM S<br>WHERE [S#] IN(<br>    SELECT [S#] FROM SC<br>    GROUP BY [S#]<br>    HAVING COUNT(DISTINCT [C#])&gt;5)<br>```</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;学生表：Student（编号sid，姓名sname，年龄sage，性别ssex)&lt;br&gt;课程表：Course（课程编号cid，课程名称cname，教师编号tid）&lt;br&gt;成绩表：Sc（学生编号sid，课程编号cid，成绩score）&lt;br&gt;教师表：Teacher（教师编号t
      
    
    </summary>
    
      <category term="mysql" scheme="https://chumingke.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://chumingke.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>MySQL触发器与事件调度器</title>
    <link href="https://chumingke.github.io//blog/2017/10/MySQL-triggers-and-event-schedulers.html"/>
    <id>https://chumingke.github.io//blog/2017/10/MySQL-triggers-and-event-schedulers.html</id>
    <published>2017-10-06T09:12:37.000Z</published>
    <updated>2017-10-06T09:13:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><p>自动执行预定好的sql语句<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">触发时间   <span class="keyword">before</span> /<span class="keyword">after</span> </div><div class="line">触发事件   insert,update,<span class="built_in">delete</span> </div><div class="line">触发地点   表名</div><div class="line">触发内容   要执行的语句</div></pre></td></tr></table></figure></p><p>在同一个位置不能建立两个不同的触发器,可以合并</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">##例子1</div><div class="line"><span class="keyword">create</span> <span class="keyword">TRIGGER</span> tr_1</div><div class="line">after <span class="keyword">insert</span> <span class="keyword">on</span> card_money</div><div class="line"><span class="keyword">for</span> <span class="keyword">each</span> row</div><div class="line"><span class="keyword">begin</span></div><div class="line">    <span class="keyword">case</span> <span class="keyword">when</span> c.<span class="built_in">type</span>=<span class="number">1</span>    ##状态码</div><div class="line">    <span class="keyword">then</span></div><div class="line">    <span class="keyword">update</span> card_info <span class="keyword">set</span> money =money+new.c <span class="keyword">where</span> id=new.cid;</div><div class="line">    else</div><div class="line">    <span class="keyword">update</span> card_info <span class="keyword">set</span> money =money-new.c <span class="keyword">where</span> id=new.cid;</div><div class="line">end;</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> card_money <span class="keyword">values</span> (<span class="number">2</span>,<span class="number">1</span>,<span class="number">0.1</span>,<span class="number">1</span>);</div><div class="line"></div><div class="line">例子2:</div><div class="line"><span class="keyword">create</span> <span class="keyword">TRIGGER</span> tr_2</div><div class="line">after <span class="keyword">update</span> <span class="keyword">on</span> card_money</div><div class="line"><span class="keyword">for</span> <span class="keyword">each</span> row</div><div class="line"><span class="keyword">begin</span></div><div class="line">    <span class="keyword">update</span> card_info <span class="keyword">set</span> money =money-old.c+new.c <span class="keyword">where</span> id=new.cid;</div><div class="line">end;</div></pre></td></tr></table></figure><h1 id="事件调度器"><a href="#事件调度器" class="headerlink" title="事件调度器"></a>事件调度器</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;触发器&quot;&gt;&lt;a href=&quot;#触发器&quot; class=&quot;headerlink&quot; title=&quot;触发器&quot;&gt;&lt;/a&gt;触发器&lt;/h1&gt;&lt;p&gt;自动执行预定好的sql语句&lt;br&gt;&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
      <category term="mysql" scheme="https://chumingke.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://chumingke.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库小技巧（注意点）</title>
    <link href="https://chumingke.github.io//blog/2017/10/MySQL-database-tips.html"/>
    <id>https://chumingke.github.io//blog/2017/10/MySQL-database-tips.html</id>
    <published>2017-10-06T09:00:31.000Z</published>
    <updated>2017-10-06T09:01:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="复合语句中声明变量-指令"><a href="#复合语句中声明变量-指令" class="headerlink" title="复合语句中声明变量/指令"></a>复合语句中声明变量/指令</h1><p>declare</p><h1 id="定义sql结束符"><a href="#定义sql结束符" class="headerlink" title="定义sql结束符"></a>定义sql结束符</h1><p>delimiter<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">delimiter %</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> login %</div></pre></td></tr></table></figure></p><h1 id="漂号"><a href="#漂号" class="headerlink" title="漂号`"></a>漂号`</h1><p>用于包裹关键词，来当做普通字符串处理<br>加上后不会自动解析关键词</p><h1 id="把关联查询转为子查询"><a href="#把关联查询转为子查询" class="headerlink" title="把关联查询转为子查询"></a>把关联查询转为子查询</h1><p>能写子查询写子查询</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;复合语句中声明变量-指令&quot;&gt;&lt;a href=&quot;#复合语句中声明变量-指令&quot; class=&quot;headerlink&quot; title=&quot;复合语句中声明变量/指令&quot;&gt;&lt;/a&gt;复合语句中声明变量/指令&lt;/h1&gt;&lt;p&gt;declare&lt;/p&gt;
&lt;h1 id=&quot;定义sql结束符&quot;&gt;
      
    
    </summary>
    
      <category term="mysql" scheme="https://chumingke.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://chumingke.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql错误码与异常捕获</title>
    <link href="https://chumingke.github.io//blog/2017/10/MySQL-error-code-and-exception-capture.html"/>
    <id>https://chumingke.github.io//blog/2017/10/MySQL-error-code-and-exception-capture.html</id>
    <published>2017-10-06T08:56:40.000Z</published>
    <updated>2017-10-06T08:57:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mysql错误码"><a href="#Mysql错误码" class="headerlink" title="Mysql错误码"></a>Mysql错误码</h1><p>重要的几个<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">1049 </span>数据库不存在</div><div class="line"><span class="symbol">1051 </span>数据表不存在</div><div class="line"><span class="symbol">1054 </span>字段不存在</div></pre></td></tr></table></figure></p><h1 id="异常捕获"><a href="#异常捕获" class="headerlink" title="异常捕获"></a>异常捕获</h1><h2 id="异常条件类型"><a href="#异常条件类型" class="headerlink" title="异常条件类型"></a>异常条件类型</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#字符串类型的错误码</span></span></div><div class="line">SQLSTATE sqlstate_value</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#数值类型的错误码</span></span></div><div class="line">mysql_error_code</div></pre></td></tr></table></figure><h2 id="异常的定义"><a href="#异常的定义" class="headerlink" title="异常的定义"></a>异常的定义</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DECLARE</span> condition_name CONDITION <span class="keyword">FOR</span> [condition_type]</div></pre></td></tr></table></figure><h2 id="异常的捕获"><a href="#异常的捕获" class="headerlink" title="异常的捕获"></a>异常的捕获</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DECLARE</span> handler_type <span class="keyword">HANDLER</span> <span class="keyword">FOR</span> condition_value [...]</div></pre></td></tr></table></figure><p>handler_type  产生异常做什么操作<br>continue   跳过异常继续执行<br>exit       退出<br>condition_value   异常条件类型</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">PROCEDURE</span> show_user(<span class="keyword">out</span> code_num <span class="built_in">int</span>)</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">    DELCARE no_table condition <span class="keyword">for</span> <span class="number">1054</span>;</div><div class="line">    <span class="keyword">DECLARE</span> CONTINUE <span class="keyword">HANDLER</span> <span class="keyword">FOR</span> <span class="keyword">no</span> <span class="keyword">table</span>;</div><div class="line">    <span class="keyword">set</span> code_num=<span class="number">1</span>;</div><div class="line">    <span class="keyword">select</span> user1 <span class="keyword">from</span> login;</div><div class="line"><span class="keyword">end</span>;</div><div class="line"><span class="keyword">call</span> show_user(@aa) ;</div><div class="line"><span class="keyword">select</span> @aa;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mysql错误码&quot;&gt;&lt;a href=&quot;#Mysql错误码&quot; class=&quot;headerlink&quot; title=&quot;Mysql错误码&quot;&gt;&lt;/a&gt;Mysql错误码&lt;/h1&gt;&lt;p&gt;重要的几个&lt;br&gt;&lt;figure class=&quot;highlight basic&quot;&gt;&lt;tabl
      
    
    </summary>
    
      <category term="mysql" scheme="https://chumingke.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://chumingke.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>MySQL存储过程与视图</title>
    <link href="https://chumingke.github.io//blog/2017/10/MySQL-stored-procedures-and-views.html"/>
    <id>https://chumingke.github.io//blog/2017/10/MySQL-stored-procedures-and-views.html</id>
    <published>2017-10-06T08:47:37.000Z</published>
    <updated>2017-10-06T08:48:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><p>视图相当于把一个复杂sql语句作为表保存起来，对于外层用户，只能查到视图中的数据，保护数据源，可以设置权限<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">##创建</div><div class="line">create view show_week_name <span class="keyword">as</span> (</div><div class="line">...);</div><div class="line">##使用</div><div class="line">select * <span class="keyword">from</span> show_week_name;</div></pre></td></tr></table></figure></p><h1 id="存储过程（带参函数）"><a href="#存储过程（带参函数）" class="headerlink" title="存储过程（带参函数）"></a>存储过程（带参函数）</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">##创建</span></div><div class="line"><span class="function">create produre <span class="title">show_gender_list</span> (<span class="params"><span class="keyword">in</span> sex varchar(<span class="number">20</span></span>),<span class="keyword">out</span> count_num <span class="keyword">int</span>)</span></div><div class="line"><span class="function">BEGIN </span></div><div class="line"><span class="function">    <span class="keyword">select</span> <span class="title">count</span>(<span class="params">*</span>) <span class="keyword">into</span> count_num <span class="keyword">from</span> test</span></div><div class="line"><span class="function">    <span class="keyword">where</span> Gendder </span>= sex;</div><div class="line">end;</div><div class="line"><span class="meta">##使用</span></div><div class="line"><span class="function">call <span class="title">show_gender_list</span>(<span class="params"><span class="string">'男'</span></span>)</span>;</div></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">##创建</div><div class="line"><span class="keyword">create</span> <span class="keyword">function</span> show_g(sex varchar(<span class="number">20</span>))</div><div class="line"><span class="keyword">return</span> int</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">    <span class="keyword">set</span> @aaa = <span class="number">1</span>;</div><div class="line">    <span class="keyword">select</span> <span class="built_in">count</span>(*) <span class="keyword">into</span> @aaa <span class="keyword">from</span> test</div><div class="line">    <span class="keyword">where</span> Gender = sex;</div><div class="line">    return 1;</div><div class="line">end;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;视图&quot;&gt;&lt;a href=&quot;#视图&quot; class=&quot;headerlink&quot; title=&quot;视图&quot;&gt;&lt;/a&gt;视图&lt;/h1&gt;&lt;p&gt;视图相当于把一个复杂sql语句作为表保存起来，对于外层用户，只能查到视图中的数据，保护数据源，可以设置权限&lt;br&gt;&lt;figure class
      
    
    </summary>
    
      <category term="mysql" scheme="https://chumingke.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://chumingke.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>数据库分析的简单步骤</title>
    <link href="https://chumingke.github.io//blog/2017/10/Simple-steps-for-database-analysis.html"/>
    <id>https://chumingke.github.io//blog/2017/10/Simple-steps-for-database-analysis.html</id>
    <published>2017-10-06T08:37:31.000Z</published>
    <updated>2017-10-06T08:48:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一步-大概看一下"><a href="#第一步-大概看一下" class="headerlink" title="第一步 大概看一下"></a>第一步 大概看一下</h1><p>拿到一张表，首先看一下它的字段</p><h1 id="第二步-确定数据规模"><a href="#第二步-确定数据规模" class="headerlink" title="第二步 确定数据规模"></a>第二步 确定数据规模</h1><p>确定数据规模 几行几列count</p><h1 id="第三步-确定分类字段对应的数据规模"><a href="#第三步-确定分类字段对应的数据规模" class="headerlink" title="第三步 确定分类字段对应的数据规模"></a>第三步 确定分类字段对应的数据规模</h1><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">count(*) ..<span class="keyword">group</span> <span class="title">by</span>  <span class="keyword">order</span> <span class="title">by</span></div></pre></td></tr></table></figure><p>比如会员类型，性别，地点，时间</p><h2 id="地点城市"><a href="#地点城市" class="headerlink" title="地点城市"></a>地点城市</h2><p>如果字段中含有城市，一般不在Mysql中切割<br>因为耗时间，比如每个市名字字数不一样，语句会很复杂<br>通常找一张城市表进行多表查询</p><h2 id="按照年月（时间）"><a href="#按照年月（时间）" class="headerlink" title="按照年月（时间）"></a>按照年月（时间）</h2><p>###日期格式化<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">DATE_FORMAT(date,format)</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">DATE_FORMAT</span>(<span class="built_in">date</span>,<span class="string">'%Y-%m'</span>)</div></pre></td></tr></table></figure></p><h3 id="格式化参数说明"><a href="#格式化参数说明" class="headerlink" title="格式化参数说明"></a>格式化参数说明</h3><p>ymdwhis<br>Y完整年，y取年后两位，M英语月份，m数字型月份<br>D 英语日，d数字日。H 24进制小时，h 12进制小时<br>I 等同于h，i 分钟。S 等同于s 代表秒<br>W 英语星期，w 数字形式星期<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attr">#例如：</span></div><div class="line"><span class="attr">'20150711</span><span class="string">'</span></div><div class="line"><span class="string">'</span><span class="meta">%</span>Y<span class="meta">%</span>m<span class="meta">%</span>d<span class="string">'</span></div><div class="line"><span class="string">'</span><span class="number">150711</span><span class="string">'</span></div><div class="line"><span class="string">'</span><span class="meta">%</span>y<span class="meta">%</span>m<span class="meta">%</span>d<span class="string">'</span></div><div class="line"><span class="string">小写的对应不完整的年份，自动脑补前面两个</span></div></pre></td></tr></table></figure></p><h3 id="字符串转化为时间（将生日转化为时间）"><a href="#字符串转化为时间（将生日转化为时间）" class="headerlink" title="字符串转化为时间（将生日转化为时间）"></a>字符串转化为时间（将生日转化为时间）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">STR_TO_DATE(date,format)</div><div class="line"><span class="keyword">select</span> <span class="keyword">STR_TO_DATE</span>(<span class="string">'2015+07+11'</span>,<span class="string">'%Y+%m+%d'</span>)</div><div class="line">##将生日转化为时间进行分组:</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> </div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">DATE_FORMAT</span>(<span class="keyword">STR_TO_DATE</span>(Birthday,<span class="string">'%Y%m%d'</span>),<span class="string">'%Y-%m'</span>)</div></pre></td></tr></table></figure><h3 id="根据出生年月日，转化为星期，用英文显示周几出生的人比较多"><a href="#根据出生年月日，转化为星期，用英文显示周几出生的人比较多" class="headerlink" title="根据出生年月日，转化为星期，用英文显示周几出生的人比较多"></a>根据出生年月日，转化为星期，用英文显示周几出生的人比较多</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">count</span>(week_name),week_name <span class="keyword">from</span> (</div><div class="line"><span class="keyword">select</span> <span class="keyword">DATE_FORMAT</span>(<span class="keyword">STR_TO_DATE</span>(Birthday,<span class="string">'%Y%m%d'</span>),<span class="string">'%W'</span>) <span class="keyword">as</span> week_name <span class="keyword">from</span> <span class="keyword">test</span> </div><div class="line">) <span class="keyword">as</span> a</div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span> week_name</div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">count</span>(week_name) <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span>;</div></pre></td></tr></table></figure><h2 id="注意如何既显示中文同时排序，因为可能用中文排序不行"><a href="#注意如何既显示中文同时排序，因为可能用中文排序不行" class="headerlink" title="注意如何既显示中文同时排序，因为可能用中文排序不行"></a>注意如何既显示中文同时排序，因为可能用中文排序不行</h2><p>先通过英文字段排序，再将结果作为一个表，select..as 中文</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一步-大概看一下&quot;&gt;&lt;a href=&quot;#第一步-大概看一下&quot; class=&quot;headerlink&quot; title=&quot;第一步 大概看一下&quot;&gt;&lt;/a&gt;第一步 大概看一下&lt;/h1&gt;&lt;p&gt;拿到一张表，首先看一下它的字段&lt;/p&gt;
&lt;h1 id=&quot;第二步-确定数据规模&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="mysql" scheme="https://chumingke.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://chumingke.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>MySQL查询语句练习题(45题版)</title>
    <link href="https://chumingke.github.io//blog/2017/10/MySQL-query-exercises-45.html"/>
    <id>https://chumingke.github.io//blog/2017/10/MySQL-query-exercises-45.html</id>
    <published>2017-10-05T05:09:58.000Z</published>
    <updated>2017-10-06T09:43:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>整理了一些网上的练习题。<br>设有一数据库，包括四个表：学生表（Student）、课程表（Course）、成绩表（Score）以及教师信息表（Teacher）。表结构及数据如下，请完成题目。</p><p>表（一）Student (学生表) ：<br>| 属性名        | 数据类型       | 可否为空  |  含 义|<br>| :——–: |:———–:|:———-:|:——:|<br>| Sno    |varchar (20) |否      |学号（主码） |<br>| Sname    |varchar (20) |否      |学生姓名 |<br>| Ssex   |varchar (20) |否      |学生性别 |<br>| Sbirthday  |datetime |可      |学生出生年月 |<br>| Class    |varchar (20) |可     |学生所在班级 |<br>表（二）Course（课程表）：<br>| 属性名        | 数据类型       | 可否为空  |  含 义|<br>| :——–: |:———–:|:———-:|:——:|<br>| Cno   |varchar (20) |否      |课程号（主码） |<br>| Cname   |varchar (20) |否      |课程名称|<br>| Tno   |varchar (20) |否      |教工编号（外码） |<br>表（三）Score(成绩表)：<br>| 属性名        | 数据类型       | 可否为空  |  含 义|<br>| :——–: |:———–:|:———-:|:——:|<br>| Sno    |varchar (20) |否      |学号（外码）） |<br>| Cno    |varchar (20) |否      |课程号（外码） |<br>| Degree   |Decimal(4,1) |可      |成绩 |<br>| 主码：Sno+ Cno   |<br>表（四）Teacher(教师表)：<br>| 属性名        | 数据类型       | 可否为空  |  含 义|<br>| :——–: |:———–:|:———-:|:——:|<br>| Tno    |varchar (20) |否      |教工编号（主码） |<br>| Tname    |varchar (20) |否      |教工姓名 |<br>| Tsex   |varchar (20) |否      |教工性别 |<br>| Tbirthday  |datetime |可      |教工出生年月 |<br>| Prof    |varchar (20) |可     |职称 |<br>| Depart    |varchar (20) |否    |教工所在部门 |</p><p>表1-2数据库中的数据：<br>表（一）Student:<br>| Sno     | Sname   | Ssex  | Sbirthday| class|<br>| :—–: |:——:|:—–:|:——:|:——:|<br>| 108   |曾华 |男     |1977-09-01 |95033|<br>|105|匡明|男|1975-10-02|95031|<br>|107|王丽|女|1976-01-23|95033|<br>|101|李军|男|1976-02-20|95033|<br>|109|王芳|女|1975-02-10|95031|<br>|103|陆君|男|1974-06-03|95031|<br>表（二）Course:<br>| Cno    | Cname  | Tno  |<br>| :—–: |:——:|:—–:|<br>| 3-105| 计算机导论| 825|<br>| 3-245| 操作系统| 804|<br>| 6-166| 数字电路| 856|<br>| 9-888| 高等数学| 831|<br>表（三）Score:<br>| Sno   | Cno  | Degree |<br>| :—–: |:——:|:—–:|<br>|103|3-245|86|<br>|105|3-245|75|<br>|109|3-245|68|<br>|103|3-105|92|<br>|105|3-105|88|<br>|109|3-105|76|<br>|101|3-105|64|<br>|107|3-105|91|<br>|108|3-105|78|<br>|101|6-166|85|<br>|107|6-166|79|<br>|108|6-166|81|<br>表（四）Teacher:<br>| Tno     | Tname  | Tsex  | Tbirthday| Prof|Depart|<br>| :—–: |:——:|:—-:|:——:|:—-:|:——:|<br>| 804| 李诚| 男| 1958-12-02| 副教授| 计算机系|<br>| 856| 张旭| 男| 1969-03-12| 讲师| 电子工程系|<br>| 825| 王萍| 女| 1972-05-05| 助教| 计算机系|<br>| 831| 刘冰| 女| 1977-08-14| 助教| 电子工程系|<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#建学生信息表student</span></div><div class="line"><span class="function">create table <span class="title">student</span>(<span class="params"></span></span></div><div class="line"><span class="function"><span class="params">sno varchar(<span class="number">20</span></span>) not <span class="literal">null</span> primary key,</span></div><div class="line"><span class="function">sname <span class="title">varchar</span>(<span class="params"><span class="number">20</span></span>) not <span class="literal">null</span>,</span></div><div class="line"><span class="function">ssex <span class="title">varchar</span>(<span class="params"><span class="number">20</span></span>) not <span class="literal">null</span>,</span></div><div class="line"><span class="function">sbirthday datetime,</span></div><div class="line"><span class="function">class <span class="title">varchar</span>(<span class="params"><span class="number">20</span></span>)</span></div><div class="line"><span class="function">)</span>;</div><div class="line"><span class="meta">#建立教师表</span></div><div class="line">create table teacher</div><div class="line">(</div><div class="line"><span class="function">tno <span class="title">varchar</span>(<span class="params"><span class="number">20</span></span>) not <span class="literal">null</span> primary key,</span></div><div class="line"><span class="function">tname <span class="title">varchar</span>(<span class="params"><span class="number">20</span></span>) not <span class="literal">null</span>,</span></div><div class="line"><span class="function">tsex <span class="title">varchar</span>(<span class="params"><span class="number">20</span></span>) not <span class="literal">null</span>,</span></div><div class="line"><span class="function">tbirthday datetime,</span></div><div class="line"><span class="function">prof <span class="title">varchar</span>(<span class="params"><span class="number">20</span></span>),</span></div><div class="line"><span class="function">depart <span class="title">varchar</span>(<span class="params"><span class="number">20</span></span>) not <span class="literal">null</span></span></div><div class="line"><span class="function">)</span>;</div><div class="line"><span class="meta">#建立课程表course</span></div><div class="line">create table course</div><div class="line">(</div><div class="line"><span class="function">cno <span class="title">varchar</span>(<span class="params"><span class="number">20</span></span>) not <span class="literal">null</span> primary key,</span></div><div class="line"><span class="function">cname <span class="title">varchar</span>(<span class="params"><span class="number">20</span></span>) not <span class="literal">null</span>,</span></div><div class="line"><span class="function">tno <span class="title">varchar</span>(<span class="params"><span class="number">20</span></span>) not <span class="literal">null</span>,</span></div><div class="line"><span class="function">foreign <span class="title">key</span>(<span class="params">tno</span>) references <span class="title">teacher</span>(<span class="params">tno</span>)</span></div><div class="line"><span class="function">)</span>;</div><div class="line"><span class="meta">#建立成绩表</span></div><div class="line">create table score</div><div class="line">(</div><div class="line"><span class="function">sno <span class="title">varchar</span>(<span class="params"><span class="number">20</span></span>) not <span class="literal">null</span> primary key,</span></div><div class="line"><span class="function">foreign <span class="title">key</span>(<span class="params">sno</span>) references <span class="title">student</span>(<span class="params">sno</span>),</span></div><div class="line"><span class="function">cno <span class="title">varchar</span>(<span class="params"><span class="number">20</span></span>) not <span class="literal">null</span>,</span></div><div class="line"><span class="function">foreign <span class="title">key</span>(<span class="params">cno</span>) references <span class="title">course</span>(<span class="params">cno</span>),</span></div><div class="line"><span class="function">degree <span class="keyword">decimal</span></span></div><div class="line"><span class="function">)</span>;</div><div class="line"><span class="meta">#添加学生信息</span></div><div class="line"><span class="function">insert <span class="keyword">into</span> student <span class="title">values</span>(<span class="params"><span class="string">'108'</span>,<span class="string">'曾华'</span>,<span class="string">'男'</span>,<span class="string">'1977-09-01'</span>,<span class="string">'95033'</span></span>)</span>;</div><div class="line"><span class="function">insert <span class="keyword">into</span> student <span class="title">values</span>(<span class="params"><span class="string">'105'</span>,<span class="string">'匡明'</span>,<span class="string">'男'</span>,<span class="string">'1975-10-02'</span>,<span class="string">'95031'</span></span>)</span>;</div><div class="line"><span class="function">insert <span class="keyword">into</span> student <span class="title">values</span>(<span class="params"><span class="string">'107'</span>,<span class="string">'王丽'</span>,<span class="string">'女'</span>,<span class="string">'1976-01-23'</span>,<span class="string">'95033'</span></span>)</span>;</div><div class="line"><span class="function">insert <span class="keyword">into</span> student <span class="title">values</span>(<span class="params"><span class="string">'101'</span>,<span class="string">'李军'</span>,<span class="string">'男'</span>,<span class="string">'1976-02-20'</span>,<span class="string">'95033'</span></span>)</span>;</div><div class="line"><span class="function">insert <span class="keyword">into</span> student <span class="title">values</span>(<span class="params"><span class="string">'109'</span>,<span class="string">'王芳'</span>,<span class="string">'女'</span>,<span class="string">'1975-02-10'</span>,<span class="string">'95031'</span></span>)</span>;</div><div class="line"><span class="function">insert <span class="keyword">into</span> student <span class="title">values</span>(<span class="params"><span class="string">'103'</span>,<span class="string">'陆君'</span>,<span class="string">'男'</span>,<span class="string">'1974-06-03'</span>,<span class="string">'95031'</span></span>)</span>;</div><div class="line"><span class="meta">#添加教师表</span></div><div class="line"><span class="function">insert <span class="keyword">into</span> teacher <span class="title">values</span>(<span class="params"><span class="string">'804'</span>,<span class="string">'李诚'</span>,<span class="string">'男'</span>,<span class="string">'1958-12-02'</span>,<span class="string">'副教授'</span>,<span class="string">'计算机系'</span></span>)</span>;</div><div class="line"><span class="function">insert <span class="keyword">into</span> teacher <span class="title">values</span>(<span class="params"><span class="string">'856'</span>,<span class="string">'张旭'</span>,<span class="string">'男'</span>,<span class="string">'1969-03-12'</span>,<span class="string">'讲师'</span>,<span class="string">'电子工程系'</span></span>)</span>;</div><div class="line"><span class="function">insert <span class="keyword">into</span> teacher <span class="title">values</span>(<span class="params"><span class="string">'825'</span>,<span class="string">'王萍'</span>,<span class="string">'女'</span>,<span class="string">'1972-05-05'</span>,<span class="string">'助教'</span>,<span class="string">'计算机系'</span></span>)</span>;</div><div class="line"><span class="function">insert <span class="keyword">into</span> teacher <span class="title">values</span>(<span class="params"><span class="string">'831'</span>,<span class="string">'刘冰'</span>,<span class="string">'女'</span>,<span class="string">'1977-08-14'</span>,<span class="string">'助教'</span>,<span class="string">'电子工程系'</span></span>)</span>;</div><div class="line"><span class="meta">#添加课程表</span></div><div class="line"><span class="function">insert <span class="keyword">into</span> course <span class="title">values</span>(<span class="params"><span class="string">'3-105'</span>,<span class="string">'计算机导论'</span>,<span class="string">'825'</span></span>)</span>;</div><div class="line"><span class="function">insert <span class="keyword">into</span> course <span class="title">values</span>(<span class="params"><span class="string">'3-245'</span>,<span class="string">'操作系统'</span>,<span class="string">'804'</span></span>)</span>;</div><div class="line"><span class="function">insert <span class="keyword">into</span> course <span class="title">values</span>(<span class="params"><span class="string">'6-166'</span>,<span class="string">'数字电路'</span>,<span class="string">'856'</span></span>)</span>;</div><div class="line"><span class="function">insert <span class="keyword">into</span> course <span class="title">values</span>(<span class="params"><span class="string">'9-888'</span>,<span class="string">'高等数学'</span>,<span class="string">'831'</span></span>)</span>;</div><div class="line"><span class="meta">#添加成绩表</span></div><div class="line"><span class="function">insert <span class="keyword">into</span> score <span class="title">values</span>(<span class="params"><span class="string">'103'</span>,<span class="string">'3-245'</span>,<span class="string">'86'</span></span>)</span>;</div><div class="line"><span class="function">insert <span class="keyword">into</span> score <span class="title">values</span>(<span class="params"><span class="string">'105'</span>,<span class="string">'3-245'</span>,<span class="string">'75'</span></span>)</span>;</div><div class="line"><span class="function">insert <span class="keyword">into</span> score <span class="title">values</span>(<span class="params"><span class="string">'109'</span>,<span class="string">'3-245'</span>,<span class="string">'68'</span></span>)</span>;</div><div class="line"><span class="function">insert <span class="keyword">into</span> score <span class="title">values</span>(<span class="params"><span class="string">'103'</span>,<span class="string">'3-105'</span>,<span class="string">'92'</span></span>)</span>;</div><div class="line"><span class="function">insert <span class="keyword">into</span> score <span class="title">values</span>(<span class="params"><span class="string">'105'</span>,<span class="string">'3-105'</span>,<span class="string">'88'</span></span>)</span>;</div><div class="line"><span class="function">insert <span class="keyword">into</span> score <span class="title">values</span>(<span class="params"><span class="string">'109'</span>,<span class="string">'3-105'</span>,<span class="string">'76'</span></span>)</span>;</div><div class="line"><span class="function">insert <span class="keyword">into</span> score <span class="title">values</span>(<span class="params"><span class="string">'103'</span>,<span class="string">'3-105'</span>,<span class="string">'64'</span></span>)</span>;</div><div class="line"><span class="function">insert <span class="keyword">into</span> score <span class="title">values</span>(<span class="params"><span class="string">'105'</span>,<span class="string">'3-105'</span>,<span class="string">'91'</span></span>)</span>;</div><div class="line"><span class="function">insert <span class="keyword">into</span> score <span class="title">values</span>(<span class="params"><span class="string">'109'</span>,<span class="string">'3-105'</span>,<span class="string">'78'</span></span>)</span>;</div><div class="line"><span class="function">insert <span class="keyword">into</span> score <span class="title">values</span>(<span class="params"><span class="string">'103'</span>,<span class="string">'6-166'</span>,<span class="string">'85'</span></span>)</span>;</div><div class="line"><span class="function">insert <span class="keyword">into</span> score <span class="title">values</span>(<span class="params"><span class="string">'105'</span>,<span class="string">'6-166'</span>,<span class="string">'79'</span></span>)</span>;</div><div class="line"><span class="function">insert <span class="keyword">into</span> score <span class="title">values</span>(<span class="params"><span class="string">'109'</span>,<span class="string">'6-166'</span>,<span class="string">'81'</span></span>)</span>;</div></pre></td></tr></table></figure></p><h2 id="1、-查询Student表中的所有记录的Sname、Ssex和Class列。"><a href="#1、-查询Student表中的所有记录的Sname、Ssex和Class列。" class="headerlink" title="1、 查询Student表中的所有记录的Sname、Ssex和Class列。"></a>1、 查询Student表中的所有记录的Sname、Ssex和Class列。</h2><figure class="highlight monkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#单表查询</span></div><div class="line"><span class="keyword">select</span> Sname,Ssex,<span class="class"><span class="keyword">Class</span> <span class="title">from</span> <span class="title">Student</span>;</span></div></pre></td></tr></table></figure><h2 id="2、-查询教师所有的单位即不重复的Depart列。"><a href="#2、-查询教师所有的单位即不重复的Depart列。" class="headerlink" title="2、 查询教师所有的单位即不重复的Depart列。"></a>2、 查询教师所有的单位即不重复的Depart列。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#单表查询</div><div class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> Depart <span class="keyword">from</span> teacher;</div></pre></td></tr></table></figure><h2 id="3、-查询Student表的所有记录。"><a href="#3、-查询Student表的所有记录。" class="headerlink" title="3、 查询Student表的所有记录。"></a>3、 查询Student表的所有记录。</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#单表查询</span></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student</div></pre></td></tr></table></figure><h2 id="4、-查询Score表中成绩在60到80之间的所有记录。"><a href="#4、-查询Score表中成绩在60到80之间的所有记录。" class="headerlink" title="4、 查询Score表中成绩在60到80之间的所有记录。"></a>4、 查询Score表中成绩在60到80之间的所有记录。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#单表查询</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> Score <span class="keyword">where</span> Degree <span class="keyword">between</span> <span class="number">60</span> <span class="keyword">and</span> <span class="number">80</span>;</div></pre></td></tr></table></figure><h2 id="5、-查询Score表中成绩为85，86或88的记录。"><a href="#5、-查询Score表中成绩为85，86或88的记录。" class="headerlink" title="5、 查询Score表中成绩为85，86或88的记录。"></a>5、 查询Score表中成绩为85，86或88的记录。</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#单表查询</span></div><div class="line"><span class="keyword">select</span> * <span class="function"><span class="keyword">from</span> Score <span class="keyword">where</span> Degree <span class="title">in</span> (<span class="params"><span class="number">85</span>,<span class="number">86</span>,<span class="number">88</span></span>)</span>;</div></pre></td></tr></table></figure><h2 id="6、-查询Student表中“95031”班或性别为“女”的同学记录。"><a href="#6、-查询Student表中“95031”班或性别为“女”的同学记录。" class="headerlink" title="6、 查询Student表中“95031”班或性别为“女”的同学记录。"></a>6、 查询Student表中“95031”班或性别为“女”的同学记录。</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#单表查询</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> Student <span class="keyword">where</span> <span class="keyword">Class</span>= <span class="string">'95031'</span> <span class="keyword">or</span> Ssex=<span class="string">'女'</span>;</div></pre></td></tr></table></figure><h2 id="7、-以Class降序查询Student表的所有记录。"><a href="#7、-以Class降序查询Student表的所有记录。" class="headerlink" title="7、 以Class降序查询Student表的所有记录。"></a>7、 以Class降序查询Student表的所有记录。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#单表查询</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> Student <span class="keyword">order</span> <span class="keyword">by</span> Class <span class="keyword">desc</span>;</div></pre></td></tr></table></figure><h2 id="8、-以Cno升序、Degree降序查询Score表的所有记录。"><a href="#8、-以Cno升序、Degree降序查询Score表的所有记录。" class="headerlink" title="8、 以Cno升序、Degree降序查询Score表的所有记录。"></a>8、 以Cno升序、Degree降序查询Score表的所有记录。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#单表查询</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> Score <span class="keyword">order</span> <span class="keyword">by</span> Cno <span class="keyword">asc</span>,Degree <span class="keyword">desc</span>;</div></pre></td></tr></table></figure><h2 id="9、-查询“95031”班的学生人数。"><a href="#9、-查询“95031”班的学生人数。" class="headerlink" title="9、 查询“95031”班的学生人数。"></a>9、 查询“95031”班的学生人数。</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#单表查询</span></div><div class="line"><span class="function"><span class="keyword">select</span> <span class="title">count</span>(<span class="params">*</span>) <span class="keyword">from</span> Student <span class="keyword">where</span> Class </span>= <span class="string">'95031'</span>;</div></pre></td></tr></table></figure><h2 id="10、查询Score表中的最高分的学生学号和课程号。（子查询或者排序）"><a href="#10、查询Score表中的最高分的学生学号和课程号。（子查询或者排序）" class="headerlink" title="10、查询Score表中的最高分的学生学号和课程号。（子查询或者排序）"></a>10、查询Score表中的最高分的学生学号和课程号。（子查询或者排序）</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#单表查询</div><div class="line"><span class="keyword">select</span> Sno,Cno <span class="keyword">from</span> Score <span class="keyword">where</span> Degree = (</div><div class="line"><span class="keyword">select</span> <span class="built_in">max</span>(Degree) <span class="keyword">from</span> Score);</div><div class="line"><span class="keyword">select</span> Sno,Cno <span class="keyword">from</span> Score <span class="keyword">order</span> <span class="keyword">by</span> Degree <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span>;</div></pre></td></tr></table></figure><h2 id="11、-查询每门课的平均成绩。"><a href="#11、-查询每门课的平均成绩。" class="headerlink" title="11、 查询每门课的平均成绩。"></a>11、 查询每门课的平均成绩。</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#单表查询</span></div><div class="line">select Cno,avg(Degree) <span class="keyword">from</span> Score<span class="built_in"> group </span>by Cno;</div></pre></td></tr></table></figure><h2 id="12、查询Score表中至少有5名学生选修的并以3开头的课程的平均分数。"><a href="#12、查询Score表中至少有5名学生选修的并以3开头的课程的平均分数。" class="headerlink" title="12、查询Score表中至少有5名学生选修的并以3开头的课程的平均分数。"></a>12、查询Score表中至少有5名学生选修的并以3开头的课程的平均分数。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#单表查询</div><div class="line"><span class="keyword">select</span> Cno,<span class="built_in">avg</span>(Degree) <span class="keyword">from</span> Score </div><div class="line"><span class="keyword">where</span> Cno <span class="keyword">like</span> <span class="string">'3%'</span></div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span> Cno </div><div class="line"><span class="keyword">having</span> <span class="built_in">count</span>(Sno) &gt;=<span class="number">5</span>;</div><div class="line"></div><div class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(Degree) <span class="keyword">from</span> score <span class="keyword">where</span> Cno <span class="keyword">like</span> <span class="string">'3%'</span> <span class="keyword">and</span> Cno <span class="keyword">in</span> (<span class="keyword">select</span> Cno <span class="keyword">from</span> score <span class="keyword">group</span> <span class="keyword">by</span> Cno <span class="keyword">having</span> <span class="built_in">count</span>(*)&gt;=<span class="number">5</span>);</div></pre></td></tr></table></figure><h2 id="13、查询分数大于70，小于90的Sno列。"><a href="#13、查询分数大于70，小于90的Sno列。" class="headerlink" title="13、查询分数大于70，小于90的Sno列。"></a>13、查询分数大于70，小于90的Sno列。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#单表查询</div><div class="line"><span class="keyword">select</span> Sno <span class="keyword">from</span> Score <span class="keyword">where</span> Degree &gt;<span class="number">70</span> <span class="keyword">and</span> Degree &lt; <span class="number">90</span>;</div></pre></td></tr></table></figure><h2 id="14、查询所有学生的Sname、Cno和Degree列。"><a href="#14、查询所有学生的Sname、Cno和Degree列。" class="headerlink" title="14、查询所有学生的Sname、Cno和Degree列。"></a>14、查询所有学生的Sname、Cno和Degree列。</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#多表查询</span></div><div class="line"><span class="comment">#可以用where,内连接，子查询</span></div><div class="line"><span class="attribute">select</span> Sname,C<span class="literal">no</span>,Degree from Student,Score where Student.S<span class="literal">no</span>=Score.S<span class="literal">no</span>;</div><div class="line"></div><div class="line"><span class="attribute">select</span> Sname,C<span class="literal">no</span>,Degree from Student inner join Score</div><div class="line"><span class="literal">on</span> Student.S<span class="literal">no</span>=Score.S<span class="literal">no</span>;</div></pre></td></tr></table></figure><h2 id="15、查询所有学生的Sno、Cname和Degree列。"><a href="#15、查询所有学生的Sno、Cname和Degree列。" class="headerlink" title="15、查询所有学生的Sno、Cname和Degree列。"></a>15、查询所有学生的Sno、Cname和Degree列。</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#多表查询</span></div><div class="line"><span class="comment">#同上</span></div><div class="line"><span class="attribute">select</span> S<span class="literal">no</span>,Cname,Degree from Score,Course where Score.C<span class="literal">no</span>=Course.C<span class="literal">no</span>;</div></pre></td></tr></table></figure><h2 id="16、查询所有学生的Sname、Cname和Degree列。"><a href="#16、查询所有学生的Sname、Cname和Degree列。" class="headerlink" title="16、查询所有学生的Sname、Cname和Degree列。"></a>16、查询所有学生的Sname、Cname和Degree列。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#多表查询</div><div class="line">#同上</div><div class="line"><span class="keyword">select</span> Sname,Cname,Degree <span class="keyword">from</span> student,course,score <span class="keyword">where</span> student.Sno=score.Sno <span class="keyword">and</span> course.Cno=score.Cno;</div><div class="line"></div><div class="line"><span class="keyword">select</span> Sname,Cname,Degree <span class="keyword">from</span> Student <span class="keyword">inner</span> <span class="keyword">join</span> Score <span class="keyword">on</span> Student.Sno=Score.Sno <span class="keyword">inner</span> <span class="keyword">join</span> </div><div class="line">Course <span class="keyword">on</span> Score.Cno=Course.Cno;</div></pre></td></tr></table></figure><h2 id="17、查询“95033”班学生的平均分。"><a href="#17、查询“95033”班学生的平均分。" class="headerlink" title="17、查询“95033”班学生的平均分。"></a>17、查询“95033”班学生的平均分。</h2><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#多表查询</span></div><div class="line"><span class="meta">#用where,内连接，子查询</span></div><div class="line"><span class="keyword">select</span> avg(Degree) <span class="keyword">from</span> Score,Student <span class="keyword">where</span> Student.Sno=Score.Sno <span class="keyword">and</span> <span class="keyword">Class</span>=<span class="comment">'95033';</span></div><div class="line"></div><div class="line"><span class="keyword">select</span> avg(Degree) <span class="keyword">from</span> Score inner <span class="keyword">join</span> Student <span class="keyword">on</span> Student.Sno=Score.Sno <span class="keyword">where</span> <span class="keyword">Class</span>=<span class="comment">'95033';</span></div><div class="line"></div><div class="line"><span class="keyword">select</span> avg(Degree)  <span class="keyword">from</span> Score <span class="keyword">where</span> Sno <span class="keyword">in</span> (<span class="keyword">select</span> Sno <span class="keyword">from</span> Student</div><div class="line"><span class="keyword">where</span> <span class="keyword">Class</span>=<span class="comment">'95033');</span></div></pre></td></tr></table></figure><h2 id="18、-假设使用如下命令建立了一个grade表："><a href="#18、-假设使用如下命令建立了一个grade表：" class="headerlink" title="18、 假设使用如下命令建立了一个grade表："></a>18、 假设使用如下命令建立了一个grade表：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> grade(<span class="keyword">low</span>  <span class="built_in">int</span>(<span class="number">3</span>),upp  <span class="built_in">int</span>(<span class="number">3</span>),<span class="keyword">rank</span>  <span class="built_in">char</span>(<span class="number">1</span>))</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> grade <span class="keyword">values</span>(<span class="number">90</span>,<span class="number">100</span>,’A’)</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> grade <span class="keyword">values</span>(<span class="number">80</span>,<span class="number">89</span>,’B’)</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> grade <span class="keyword">values</span>(<span class="number">70</span>,<span class="number">79</span>,’C’)</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> grade <span class="keyword">values</span>(<span class="number">60</span>,<span class="number">69</span>,’D’)</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> grade <span class="keyword">values</span>(<span class="number">0</span>,<span class="number">59</span>,’E’)</div></pre></td></tr></table></figure><p>现查询所有同学的Sno、Cno和rank列。<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#多表查询</div><div class="line"><span class="keyword">select</span> Sno,Cno,rank <span class="keyword">from</span> Score,grade <span class="keyword">where</span> Degree <span class="keyword">between</span> low <span class="keyword">and</span> upp;</div></pre></td></tr></table></figure></p><h2 id="19、查询选修“3-105”课程的成绩高于“109”号同学成绩的所有同学的记录。"><a href="#19、查询选修“3-105”课程的成绩高于“109”号同学成绩的所有同学的记录。" class="headerlink" title="19、查询选修“3-105”课程的成绩高于“109”号同学成绩的所有同学的记录。"></a>19、查询选修“3-105”课程的成绩高于“109”号同学成绩的所有同学的记录。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#单表查询</div><div class="line">#109同学，选修是3-105课的</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> score <span class="keyword">where</span> Cno=<span class="string">'3-105'</span> <span class="keyword">and</span> degree&gt;(<span class="keyword">select</span> <span class="built_in">max</span>(degree ) <span class="keyword">from</span> Score <span class="keyword">where</span> Sno=<span class="string">'109'</span> <span class="keyword">and</span> Cno=<span class="string">'3-105'</span> );</div><div class="line">#109同学，没有选修3-105课</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> Score <span class="keyword">where</span> Cno = <span class="string">'3-105'</span> <span class="keyword">and</span> Degree &gt; (</div><div class="line"><span class="keyword">select</span> <span class="built_in">max</span>(Degree) <span class="keyword">from</span> Score <span class="keyword">where</span> Sno =<span class="string">'109'</span>)<span class="keyword">and</span> degree&lt;( <span class="keyword">select</span> <span class="built_in">max</span>(degree ) <span class="keyword">from</span> Score <span class="keyword">where</span> sno <span class="keyword">in</span> (<span class="keyword">select</span> Sno <span class="keyword">from</span> score <span class="keyword">group</span> <span class="keyword">by</span> Sno <span class="keyword">having</span> <span class="built_in">count</span>(*)&gt;<span class="number">1</span>));</div><div class="line">#选了多门课程并且是这个课程下不是最高分的</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> score a <span class="keyword">where</span> Sno <span class="keyword">in</span> (<span class="keyword">select</span> Sno <span class="keyword">from</span> score <span class="keyword">group</span> <span class="keyword">by</span> Sno <span class="keyword">having</span> <span class="built_in">count</span>(*)&gt;<span class="number">1</span>) <span class="keyword">and</span> degree&lt;( <span class="keyword">select</span> <span class="built_in">max</span>(degree ) <span class="keyword">from</span> Score b <span class="keyword">where</span> b.cno = a.cno)</div><div class="line">;</div></pre></td></tr></table></figure><h2 id="21、查询成绩高于学号为“109”、课程号为“3-105”的成绩的所有记录。"><a href="#21、查询成绩高于学号为“109”、课程号为“3-105”的成绩的所有记录。" class="headerlink" title="21、查询成绩高于学号为“109”、课程号为“3-105”的成绩的所有记录。"></a>21、查询成绩高于学号为“109”、课程号为“3-105”的成绩的所有记录。</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#单表查询</span></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> Score <span class="keyword">where</span> Degree &gt;(</div><div class="line"><span class="keyword">select</span> Degree <span class="keyword">from</span> Score <span class="keyword">where</span> Cno = <span class="string">'109'</span> and Course = <span class="string">'3-105'</span>);</div></pre></td></tr></table></figure><h2 id="22、查询和学号为108、101的同学同年出生的所有学生的Sno、Sname和Sbirthday列。"><a href="#22、查询和学号为108、101的同学同年出生的所有学生的Sno、Sname和Sbirthday列。" class="headerlink" title="22、查询和学号为108、101的同学同年出生的所有学生的Sno、Sname和Sbirthday列。"></a>22、查询和学号为108、101的同学同年出生的所有学生的Sno、Sname和Sbirthday列。</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#单表查询</span></div><div class="line"><span class="keyword">select</span> Sno,Sname,<span class="function">Sbirthday <span class="keyword">from</span> Student <span class="keyword">where</span> <span class="title">year</span>(<span class="params">Sbirthday</span>) <span class="title">in</span> (<span class="params"></span></span></div><div class="line"><span class="function"><span class="params"><span class="keyword">select</span> year(Sbirthday</span>) <span class="keyword">from</span> Student <span class="keyword">where</span> Sno</span>=<span class="string">'108'</span> or <span class="string">'101'</span>);</div></pre></td></tr></table></figure><h2 id="23、查询“张旭“教师任课的学生成绩。"><a href="#23、查询“张旭“教师任课的学生成绩。" class="headerlink" title="23、查询“张旭“教师任课的学生成绩。"></a>23、查询“张旭“教师任课的学生成绩。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#多表查询</div><div class="line">#用where,内连接，子查询</div><div class="line"><span class="keyword">select</span> Sno,Degree <span class="keyword">from</span> Score <span class="keyword">where</span> Cno <span class="keyword">in</span> (</div><div class="line"><span class="keyword">select</span> Cno <span class="keyword">from</span> Course <span class="keyword">where</span> Tno <span class="keyword">in</span>(</div><div class="line"><span class="keyword">select</span> Tno <span class="keyword">from</span> Teacher <span class="keyword">where</span> Tname = <span class="string">'张旭'</span>));</div><div class="line"></div><div class="line"><span class="keyword">select</span> Sno,Degree <span class="keyword">from</span> Score,Course,Teacher <span class="keyword">where</span></div><div class="line">Score.Cno=Course.Cno <span class="keyword">and</span> Course.Tno=Teacher.Tno <span class="keyword">and</span> Tname = <span class="string">'张旭'</span> ;</div><div class="line"></div><div class="line"><span class="keyword">select</span> Sno,Degree <span class="keyword">from</span> Score <span class="keyword">inner</span> <span class="keyword">join</span> Course <span class="keyword">on</span> Score.Cno=Course.Cno <span class="keyword">inner</span> <span class="keyword">join</span> Teacher <span class="keyword">on</span> Teacher.Tno=Course.Tno <span class="keyword">where</span> Tname =<span class="string">'张旭'</span> ;</div></pre></td></tr></table></figure><h2 id="24、查询选修某课程的同学人数多于5人的教师姓名。"><a href="#24、查询选修某课程的同学人数多于5人的教师姓名。" class="headerlink" title="24、查询选修某课程的同学人数多于5人的教师姓名。"></a>24、查询选修某课程的同学人数多于5人的教师姓名。</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#多表查询</span></div><div class="line"><span class="comment">#用where,内连接，子查询</span></div><div class="line">select Tname <span class="keyword">from</span> Teacher where Tno <span class="keyword">in</span> (</div><div class="line">select Tno <span class="keyword">from</span> Course where Cno <span class="keyword">in</span> (</div><div class="line">select Cno <span class="keyword">from</span> Score<span class="built_in"> group </span>by Cno having count(Sno)&gt;5));</div><div class="line"></div><div class="line">select Tname <span class="keyword">from</span> Teacher,  Course where Teacher.<span class="attribute">Tno</span>=Course.Tno <span class="keyword">and</span> Course.Cno =(select Cno <span class="keyword">from</span> Score<span class="built_in"> group </span>by Cno having count(*)&gt;5);</div></pre></td></tr></table></figure><h2 id="25、查询95033班和95031班全体学生的记录。"><a href="#25、查询95033班和95031班全体学生的记录。" class="headerlink" title="25、查询95033班和95031班全体学生的记录。"></a>25、查询95033班和95031班全体学生的记录。</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#多表查询</div><div class="line">#用<span class="keyword">where</span>,内连接，子查询</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> Student,Score,Course <span class="keyword">where</span> Student.Sno=Score.Sno <span class="keyword">and</span> Score.Cno=Course.Cno <span class="keyword">and</span> <span class="keyword">class</span> = <span class="string">'95033'</span> <span class="keyword">or</span> <span class="string">'95031'</span>;</div></pre></td></tr></table></figure><h2 id="26、-查询存在有85分以上成绩的课程Cno。"><a href="#26、-查询存在有85分以上成绩的课程Cno。" class="headerlink" title="26、  查询存在有85分以上成绩的课程Cno。"></a>26、  查询存在有85分以上成绩的课程Cno。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> Cno <span class="keyword">from</span> Score <span class="keyword">where</span> Degree &gt;<span class="number">85</span>;</div></pre></td></tr></table></figure><h2 id="27、查询出“计算机系“教师所教课程的成绩表。"><a href="#27、查询出“计算机系“教师所教课程的成绩表。" class="headerlink" title="27、查询出“计算机系“教师所教课程的成绩表。"></a>27、查询出“计算机系“教师所教课程的成绩表。</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#多表查询</span></div><div class="line"><span class="comment">#用where,内连接，子查询</span></div><div class="line"><span class="attribute">select</span> * from Score where C<span class="literal">no</span> in (</div><div class="line"><span class="literal">select</span> C<span class="literal">no</span> from Course where T<span class="literal">no</span> in (</div><div class="line"><span class="literal">select</span> T<span class="literal">no</span> from Teacher where Depart = <span class="string">'计算机系'</span>));</div><div class="line"><span class="comment">#先找交集再not in</span></div><div class="line"><span class="attribute">select</span> Score.S<span class="literal">no</span>,Score.C<span class="literal">no</span>,Score.Degree from Score,Course,Teacher where Score.C<span class="literal">no</span>=Course.C<span class="literal">no</span> and Course.T<span class="literal">no</span>=Teacher.T<span class="literal">no</span> and Depart = <span class="string">'计算机系'</span>;</div><div class="line"></div><div class="line"><span class="attribute">select</span> Score.S<span class="literal">no</span>,Score.C<span class="literal">no</span>,Score.Degree from Score inner join Course <span class="literal">on</span> Score.C<span class="literal">no</span>=Course.C<span class="literal">no</span> inner join Teacher <span class="literal">on</span> Teacher.T<span class="literal">no</span> =Course.T<span class="literal">no</span> where Depart =<span class="string">'计算机系'</span>;</div></pre></td></tr></table></figure><h2 id="28、查询“计算-机系”与“电子工程系“不同职称的教师的Tname和Prof。"><a href="#28、查询“计算-机系”与“电子工程系“不同职称的教师的Tname和Prof。" class="headerlink" title="28、查询“计算 机系”与“电子工程系“不同职称的教师的Tname和Prof。"></a>28、查询“计算 机系”与“电子工程系“不同职称的教师的Tname和Prof。</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> Tname,Prof <span class="keyword">from</span> Teacher <span class="keyword">where</span> Prof <span class="keyword">not</span> <span class="keyword">in</span> (</div><div class="line"><span class="keyword">select</span> Prof <span class="keyword">from</span> Teacher <span class="keyword">where</span> Prof <span class="keyword">in</span> (<span class="keyword">select</span> Prof <span class="keyword">from</span> Teacher <span class="keyword">where</span> Depart = <span class="string">'计算机系'</span>) <span class="keyword">and</span> Depart = <span class="string">'电子工程系'</span>);</div><div class="line"></div><div class="line"><span class="keyword">select</span> Tname,Prof <span class="keyword">from</span> Teacher <span class="keyword">where</span> Prof <span class="keyword">not</span> <span class="keyword">in</span> (</div><div class="line"><span class="keyword">select</span> Prof <span class="keyword">from</span> Teacher <span class="keyword">where</span> Depart = <span class="string">'计算机系'</span> <span class="keyword">or</span> Depart =<span class="string">'电子工程系'</span> <span class="keyword">group</span> <span class="keyword">by</span> Prof <span class="keyword">having</span> <span class="keyword">count</span>(*)&gt;<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="keyword">select</span> Tname,Prof <span class="keyword">from</span> Teacher <span class="keyword">where</span> Depart =<span class="string">'计算机系'</span> <span class="keyword">and</span> Prof  <span class="keyword">not</span> <span class="keyword">in</span>( <span class="keyword">select</span> Prof <span class="keyword">from</span> Teacher <span class="keyword">where</span> Depart =<span class="string">'电子工程系'</span>)</div><div class="line"><span class="keyword">union</span> </div><div class="line"><span class="keyword">select</span> Tname,Prof <span class="keyword">from</span> Teacher <span class="keyword">where</span> Depart =<span class="string">'电子工程系'</span> <span class="keyword">and</span> Prof  <span class="keyword">not</span> <span class="keyword">in</span>( <span class="keyword">select</span> Prof <span class="keyword">from</span> Teacher <span class="keyword">where</span> Depart =<span class="string">'计算机系'</span>);</div></pre></td></tr></table></figure><h2 id="29、查询选修编号为“3-105“课程且成绩至少高于选修编号为“3-245”的同学的Cno、Sno和Degree-并按Degree从高到低次序排序。"><a href="#29、查询选修编号为“3-105“课程且成绩至少高于选修编号为“3-245”的同学的Cno、Sno和Degree-并按Degree从高到低次序排序。" class="headerlink" title="29、查询选修编号为“3-105“课程且成绩至少高于选修编号为“3-245”的同学的Cno、Sno和Degree,并按Degree从高到低次序排序。"></a>29、查询选修编号为“3-105“课程且成绩至少高于选修编号为“3-245”的同学的Cno、Sno和Degree,并按Degree从高到低次序排序。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> Cno,Sno,Degree <span class="keyword">from</span> Score <span class="keyword">where</span> Cno = <span class="string">'3-105'</span> <span class="keyword">and</span> Degree &gt;</div><div class="line"><span class="keyword">any</span>(<span class="keyword">select</span> Degree <span class="keyword">from</span> Score <span class="keyword">where</span> Cno = <span class="string">'3-245'</span>) <span class="keyword">order</span> <span class="keyword">by</span> Degree <span class="keyword">desc</span>;</div><div class="line"></div><div class="line"><span class="keyword">select</span> Cno,Sno,Degree <span class="keyword">from</span> Score <span class="keyword">where</span> Cno = <span class="string">'3-105'</span> <span class="keyword">and</span> Degree &gt;</div><div class="line">(<span class="keyword">select</span> <span class="built_in">min</span>(Degree) <span class="keyword">from</span> Score <span class="keyword">where</span> Cno = <span class="string">'3-245'</span>) <span class="keyword">order</span> <span class="keyword">by</span> Degree <span class="keyword">desc</span>;</div><div class="line">#大于任何一个或者大于最小的</div></pre></td></tr></table></figure><h2 id="30、查询选修编号为“3-105”且成绩高于选修编号为“3-245”课程的同学的Cno、Sno和Degree。"><a href="#30、查询选修编号为“3-105”且成绩高于选修编号为“3-245”课程的同学的Cno、Sno和Degree。" class="headerlink" title="30、查询选修编号为“3-105”且成绩高于选修编号为“3-245”课程的同学的Cno、Sno和Degree。"></a>30、查询选修编号为“3-105”且成绩高于选修编号为“3-245”课程的同学的Cno、Sno和Degree。</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> Cno,Sno,Degree <span class="keyword">from</span> Score <span class="keyword">where</span> Cno = <span class="string">'3-105'</span> <span class="keyword">and</span> Degree &gt; all(<span class="keyword">select</span> Degree <span class="keyword">from</span> Score <span class="keyword">where</span> Cno = <span class="string">'3-245'</span>);</div></pre></td></tr></table></figure><h2 id="31、-查询所有教师和同学的name、sex和birthday。"><a href="#31、-查询所有教师和同学的name、sex和birthday。" class="headerlink" title="31、 查询所有教师和同学的name、sex和birthday。"></a>31、 查询所有教师和同学的name、sex和birthday。</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> Sname <span class="keyword">as</span> <span class="string">'学生'</span>,Ssex,Sbirthday from Student</div><div class="line"><span class="class"><span class="keyword">union</span></span></div><div class="line"><span class="keyword">select</span> Tname <span class="keyword">as</span> <span class="string">'老师'</span>,Tsex,Tbirthday from Teacher;</div></pre></td></tr></table></figure><h2 id="32、查询所有“女”教师和“女”同学的name、sex和birthday。"><a href="#32、查询所有“女”教师和“女”同学的name、sex和birthday。" class="headerlink" title="32、查询所有“女”教师和“女”同学的name、sex和birthday。"></a>32、查询所有“女”教师和“女”同学的name、sex和birthday。</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> Sname,Ssex,Sbirthday from Student where Ssex = <span class="string">'女'</span></div><div class="line"><span class="class"><span class="keyword">union</span></span></div><div class="line"><span class="keyword">select</span> Tname,Tsex,Tbirthday from Teacher where Tsex = <span class="string">'女'</span>;</div></pre></td></tr></table></figure><h2 id="33、-查询成绩比该课程平均成绩低的同学的成绩表。"><a href="#33、-查询成绩比该课程平均成绩低的同学的成绩表。" class="headerlink" title="33、 查询成绩比该课程平均成绩低的同学的成绩表。"></a>33、 查询成绩比该课程平均成绩低的同学的成绩表。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> score a  <span class="keyword">where</span> degree &lt; (</div><div class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(degree) <span class="keyword">from</span> score b <span class="keyword">where</span> b.cno=a.cno);</div></pre></td></tr></table></figure><blockquote><p>这是一种特殊形式的父子表连接（自连接）SQL选择查询写法。对于这种特殊的写法，数据库引擎会以特殊的方式检索父查询表里的数据。如果搞不清楚这种特殊的检索方式，我们很难从该SQL语句的表面逻辑理出个中道理。<br>现在我们来分拆该SQL语句里的父查询和子查询<br>1）语句中的父查询<br>select * from score a where degree&lt;”子查询获得的一个数据值“<br>2）语句中的子查询<br>select avg(degree) from score b where a.cno=b.cno<br>请注意这个子查询的from子句里只有一张表 b ，但是where子句里却出现了第二张表 a ，<br>如果单独运行这个子查询，因为子查询没有列出表a，系统会要求输入a.cno或者直接报错，反正无法顺利执行，但是表a可以在父查询里的from子句中找到，面对这种情况数据库引擎会采取逐条取主查询记录与子查询实施比对以确定是否检出该条记录，最后汇总各次检索的结果输出整个记录集。<br>这个特殊的SQL语句检索过程大致如下：<br>取出首条记录的a.cno用作过滤，子查询里以avg函数得到该课程的平均分，主查询以分数比对平均分，满足条件保留否则抛弃（degree小于平均分的留下）；<br>跟着判断父查询表下一条记录，处理过程相同，最后合并各次判断结果从而的到最终结果。<br>这种特殊的写法可以规避输出包含非分组字段，而分组不得输出非分组字段的矛盾。</p><h2 id="34、-查询所有任课教师的Tname和Depart。"><a href="#34、-查询所有任课教师的Tname和Depart。" class="headerlink" title="34、 查询所有任课教师的Tname和Depart。"></a>34、 查询所有任课教师的Tname和Depart。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> Tname,Depart <span class="keyword">from</span> Teacher <span class="keyword">where</span> Tno <span class="keyword">in</span> (</div><div class="line"><span class="keyword">select</span> Tno <span class="keyword">from</span> Course);</div></pre></td></tr></table></figure></blockquote><h2 id="35-、查询所有未讲课的教师的Tname和Depart。"><a href="#35-、查询所有未讲课的教师的Tname和Depart。" class="headerlink" title="35 、查询所有未讲课的教师的Tname和Depart。"></a>35 、查询所有未讲课的教师的Tname和Depart。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> Tname,Depart <span class="keyword">from</span> Teacher <span class="keyword">where</span> Tno <span class="keyword">not</span> <span class="keyword">in</span> (</div><div class="line"><span class="keyword">select</span> Tno <span class="keyword">from</span> Course <span class="keyword">where</span> Cno <span class="keyword">in</span> (</div><div class="line"><span class="keyword">select</span> Cno <span class="keyword">from</span> Score ));</div></pre></td></tr></table></figure><h2 id="36、查询至少有2名男生的班号。"><a href="#36、查询至少有2名男生的班号。" class="headerlink" title="36、查询至少有2名男生的班号。"></a>36、查询至少有2名男生的班号。</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">Class</span> <span class="keyword">from</span> Student <span class="keyword">where</span> Ssex = <span class="string">'男'</span></div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">Class</span> </div><div class="line"><span class="keyword">having</span> <span class="keyword">count</span>(Ssex) &gt;<span class="number">1</span>;</div></pre></td></tr></table></figure><h2 id="37、查询Student表中不姓“王”的同学记录。"><a href="#37、查询Student表中不姓“王”的同学记录。" class="headerlink" title="37、查询Student表中不姓“王”的同学记录。"></a>37、查询Student表中不姓“王”的同学记录。</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> Student <span class="keyword">where</span> Sname <span class="keyword">not</span> <span class="keyword">like</span> <span class="string">'王%%'</span>;</div></pre></td></tr></table></figure><h2 id="38、查询Student表中每个学生的姓名和年龄。"><a href="#38、查询Student表中每个学生的姓名和年龄。" class="headerlink" title="38、查询Student表中每个学生的姓名和年龄。"></a>38、查询Student表中每个学生的姓名和年龄。</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> Sname,<span class="keyword">year</span>(<span class="keyword">now</span>())-<span class="keyword">year</span>(Sbirthday) <span class="keyword">from</span> Student;</div></pre></td></tr></table></figure><h2 id="39、查询Student表中最大和最小的Sbirthday日期值。"><a href="#39、查询Student表中最大和最小的Sbirthday日期值。" class="headerlink" title="39、查询Student表中最大和最小的Sbirthday日期值。"></a>39、查询Student表中最大和最小的Sbirthday日期值。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="built_in">max</span>(Sbirthday),<span class="built_in">min</span>(Sbirthday) <span class="keyword">from</span> Student;</div></pre></td></tr></table></figure><h2 id="40、以班号和年龄从大到小的顺序查询Student表中的全部记录。"><a href="#40、以班号和年龄从大到小的顺序查询Student表中的全部记录。" class="headerlink" title="40、以班号和年龄从大到小的顺序查询Student表中的全部记录。"></a>40、以班号和年龄从大到小的顺序查询Student表中的全部记录。</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> Student <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">Class</span> <span class="keyword">desc</span>,Sbirthday;</div></pre></td></tr></table></figure><h2 id="41、查询“男”教师及其所上的课程。"><a href="#41、查询“男”教师及其所上的课程。" class="headerlink" title="41、查询“男”教师及其所上的课程。"></a>41、查询“男”教师及其所上的课程。</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#需要两个表的信息用where或者连接查询</span></div><div class="line">select Cno,Cname,Tname <span class="keyword">from</span> Course,Teacher where Course.<span class="attribute">Tno</span>=Teacher.Tno <span class="keyword">and</span> <span class="attribute">Tsex</span>=<span class="string">'男'</span>;</div><div class="line"></div><div class="line">select Cno,Cname,Tname <span class="keyword">from</span> Course inner join Teacher on Course.<span class="attribute">Tno</span>=Teacher.Tno where <span class="attribute">Tsex</span>=<span class="string">'男'</span>;</div></pre></td></tr></table></figure><h2 id="42、查询最高分同学的Sno、Cno和Degree列。"><a href="#42、查询最高分同学的Sno、Cno和Degree列。" class="headerlink" title="42、查询最高分同学的Sno、Cno和Degree列。"></a>42、查询最高分同学的Sno、Cno和Degree列。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> Sno,Cno,Degree <span class="keyword">from</span> Score <span class="keyword">order</span> <span class="keyword">by</span> Degree <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="keyword">select</span> Sno,Cno,Degree <span class="keyword">from</span> Score <span class="keyword">where</span> Degree = (</div><div class="line"><span class="keyword">select</span> <span class="built_in">max</span>(Degree) <span class="keyword">from</span> Score);</div></pre></td></tr></table></figure><h2 id="43、查询和“李军”同性别的所有同学的Sname。"><a href="#43、查询和“李军”同性别的所有同学的Sname。" class="headerlink" title="43、查询和“李军”同性别的所有同学的Sname。"></a>43、查询和“李军”同性别的所有同学的Sname。</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> Sname <span class="keyword">from</span> Student <span class="keyword">where</span> Ssex = (</div><div class="line"><span class="keyword">select</span> Ssex <span class="keyword">from</span> Student <span class="keyword">where</span> Sname = <span class="string">'李军'</span>);</div></pre></td></tr></table></figure><h2 id="44、查询和“李军”同性别并同班的同学Sname。"><a href="#44、查询和“李军”同性别并同班的同学Sname。" class="headerlink" title="44、查询和“李军”同性别并同班的同学Sname。"></a>44、查询和“李军”同性别并同班的同学Sname。</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> Sname <span class="keyword">from</span> Student <span class="keyword">where</span> Ssex = (</div><div class="line"><span class="keyword">select</span> Ssex <span class="keyword">from</span> Student <span class="keyword">where</span> Sname = <span class="string">'李军'</span>)</div><div class="line"><span class="keyword">and</span> <span class="keyword">Class</span> = (</div><div class="line"><span class="keyword">select</span> <span class="keyword">Class</span> <span class="keyword">from</span> Student <span class="keyword">where</span> Sname = <span class="string">'李军'</span>);</div></pre></td></tr></table></figure><h2 id="45、查询所有选修“计算机导论”课程的“男”同学的成绩表。"><a href="#45、查询所有选修“计算机导论”课程的“男”同学的成绩表。" class="headerlink" title="45、查询所有选修“计算机导论”课程的“男”同学的成绩表。"></a>45、查询所有选修“计算机导论”课程的“男”同学的成绩表。</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> Score <span class="keyword">where</span> Cno = (</div><div class="line"><span class="keyword">select</span> Cno <span class="keyword">from</span> Course <span class="keyword">where</span> Cname = <span class="string">'计算机导论'</span>) <span class="keyword">and</span></div><div class="line">Sno <span class="keyword">in</span> (<span class="keyword">select</span> Sno <span class="keyword">from</span> Student <span class="keyword">where</span> Ssex = <span class="string">'男'</span>);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;整理了一些网上的练习题。&lt;br&gt;设有一数据库，包括四个表：学生表（Student）、课程表（Course）、成绩表（Score）以及教师信息表（Teacher）。表结构及数据如下，请完成题目。&lt;/p&gt;
&lt;p&gt;表（一）Student (学生表) ：&lt;br&gt;| 属性名     
      
    
    </summary>
    
      <category term="mysql" scheme="https://chumingke.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://chumingke.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>整理了部分数据分析用图表</title>
    <link href="https://chumingke.github.io//blog/2017/10/Data-analysis-charts.html"/>
    <id>https://chumingke.github.io//blog/2017/10/Data-analysis-charts.html</id>
    <published>2017-10-03T10:26:45.000Z</published>
    <updated>2017-10-03T14:16:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>整理了部分常见图表。<br>另外如何将excel转变为MarkDown能识别的表格？<br>直接将表格复制到下面这个网页转换即可。<br><a href="http://pressbin.com/tools/excel_to_html_table/index.html" target="_blank" rel="external">http://pressbin.com/tools/excel_to_html_table/index.html</a></p><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">图表名</th><th style="text-align:center">做法</th><th style="text-align:center">描述</th><th style="text-align:center">内容</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">动态图</td><td style="text-align:center">拖放统计周期到页面卡</td><td style="text-align:center">将可视化图形沿着时间轴播放</td><td style="text-align:center">显示动态变化</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">Z检验</td><td style="text-align:center"></td><td style="text-align:center">适用于大样本平均值差异性分析</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">地平线图</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">基于一种压缩空间展示数据信息的图表形式</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">甘特图</td><td style="text-align:center"></td><td style="text-align:center">适用于描述项目、进度和进展（甘特图的特点是突出了生产管理中最重要的因素时间, 它的作用表现在三个方面：1、计划产量与计划时间的对应关系。2、每日的实际产量与预定计划产量的对比关系。3、一定时间内实际累计产量与同时期计划累计产量的对比关系[1] 。）</td><td style="text-align:center">计划图表、负荷图表、机器闲置图表、人员闲置图表和进度表</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">词云</td><td style="text-align:center"></td><td style="text-align:center">图形为文本，将量放置在颜色、大小</td><td style="text-align:center">适用于表示不同词语出现频次的可视化 可突出展示类别与量的关系</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">并排条</td><td style="text-align:center">添加辅助字段（智能显示）</td><td style="text-align:center">适用于原辅料同期比</td><td style="text-align:center">适用于比较两个维度下数据的大小   可展现同期比，可展示两维度比较</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">饼状图</td><td style="text-align:center"></td><td style="text-align:center">适用于表示子类在整体中的占比 百分比</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">标靶图</td><td style="text-align:center">条形图后添加参考线参考区域</td><td style="text-align:center">产量达成</td><td style="text-align:center">适用于查看KPI的达成情况  计划与实际（KPI）</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">背景地图</td><td style="text-align:center">添加背景图片后，设置地理位置</td><td style="text-align:center">适用于以特定图片为背景展现平面信息 特定地图方位图等</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">符号地图</td><td style="text-align:center"></td><td style="text-align:center">适用于展示跟地理位置相关的多个度量分析  多维度地理分布状况</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">11</td><td style="text-align:center">多维度监控图</td><td style="text-align:center"></td><td style="text-align:center">适用于多维度的数据监测 也可以采用矩阵散点图</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">12</td><td style="text-align:center">堆积图</td><td style="text-align:center"></td><td style="text-align:center">适用于查看各个类别中数据的细分情况 类别与子类别</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">13</td><td style="text-align:center">工作导航图</td><td style="text-align:center"></td><td style="text-align:center">在一个平面图内展示大量的交互信息</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">14</td><td style="text-align:center">3D地图</td><td style="text-align:center"></td><td style="text-align:center">适用于展示3D图形</td><td style="text-align:center">类似立体高德地图</td></tr><tr><td style="text-align:center">15</td><td style="text-align:center">和弦图</td><td style="text-align:center">echarts</td><td style="text-align:center">适用于展示矩阵数据的相关关系 相关关系</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">16</td><td style="text-align:center">交叉表</td><td style="text-align:center"></td><td style="text-align:center">常用的分类汇总表格</td><td style="text-align:center">类似数据透视表</td></tr><tr><td style="text-align:center">17</td><td style="text-align:center">盒须图</td><td style="text-align:center">盒须图加一个随机抖动</td><td style="text-align:center">成本异常值</td><td style="text-align:center">适用于识别数据异常值，判断数据的分布</td></tr><tr><td style="text-align:center">18</td><td style="text-align:center">环形图</td><td style="text-align:center"></td><td style="text-align:center">适用于展现各个部分与整体之间的关系 百分比</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">19</td><td style="text-align:center">蜡烛图</td><td style="text-align:center">点图加上条形甘特之类</td><td style="text-align:center">适用于股票、期货、外汇、期权等证券市场</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">20</td><td style="text-align:center">决策树</td><td style="text-align:center">echarts</td><td style="text-align:center">适用于展示决策判定逻辑 辅助决策</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">21</td><td style="text-align:center">矩阵图</td><td style="text-align:center"></td><td style="text-align:center">适用于分析多因素间相关关联的程度  相关关系</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">22</td><td style="text-align:center">雷达图</td><td style="text-align:center"></td><td style="text-align:center">可用于反映工厂总体评价 适用于同时对单个或者多个对象不同性能进行比较</td><td style="text-align:center">一般五个角度，反映总体情况</td></tr><tr><td style="text-align:center">23</td><td style="text-align:center">玛丽麦高图</td><td style="text-align:center"></td><td style="text-align:center">适用于表现两维的占比堆叠关系 用长度宽度同时反映两个维度的柱形图</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">24</td><td style="text-align:center">路径地图</td><td style="text-align:center"></td><td style="text-align:center">适用于表示人或者事物在地理上的迁移</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">25</td><td style="text-align:center">漏斗图</td><td style="text-align:center"></td><td style="text-align:center">适用于各业务流程环节数据比较</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">26</td><td style="text-align:center">玫瑰图</td><td style="text-align:center"></td><td style="text-align:center">适用于多个维度的百分比构成分析</td><td style="text-align:center">用于一个完整时间段内的某种信息表示，例如一天的24小时内的用户访问的行为。但是需要量有明显变化才会有比较好的效果</td></tr><tr><td style="text-align:center">27</td><td style="text-align:center">面积图</td><td style="text-align:center">智能显示</td><td style="text-align:center">适用于多因素的趋势分析，以及部分与整体的关系  类似堆积图的折线图版本</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">28</td><td style="text-align:center">气泡图</td><td style="text-align:center"></td><td style="text-align:center">通过气泡大小和颜色对比不同维度和度量   类似词云</td></tr><tr><td style="text-align:center">29</td><td style="text-align:center">瀑布图</td><td style="text-align:center"></td><td style="text-align:center">适用于表达多个特定数值之间的数量变化关系</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">30</td><td style="text-align:center">帕累托图</td><td style="text-align:center"></td><td style="text-align:center">适用于从大量数据中找出主要因素，分析主要矛盾  适用体现二八法则，适用数据挖掘</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">31</td><td style="text-align:center">汽车仪表盘图</td><td style="text-align:center">echarts</td><td style="text-align:center">可用于指标预警</td><td style="text-align:center">适用于分级别的展示，如脆弱度或告警</td></tr><tr><td style="text-align:center">32</td><td style="text-align:center">日历图</td><td style="text-align:center"></td><td style="text-align:center">以日历形式表示每天的数值变化 细分到了每天的情况</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">33</td><td style="text-align:center">曲棍图</td><td style="text-align:center"></td><td style="text-align:center">适用于展示剧烈变化的趋势，多用于气候分析 剧烈变化</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">34</td><td style="text-align:center">自定义图形</td><td style="text-align:center"></td><td style="text-align:center">以自定义图形展现数据含义</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">35</td><td style="text-align:center">热图</td><td style="text-align:center">echarts</td><td style="text-align:center"></td><td style="text-align:center">以特殊高亮的形式显示区域热度</td><td></td></tr><tr><td style="text-align:center">36</td><td style="text-align:center">桑基图</td><td style="text-align:center">tableau或echarts</td><td style="text-align:center">适用于数据流向或流量分析   适用于原因分析</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">37</td><td style="text-align:center">散点图</td><td style="text-align:center"></td><td style="text-align:center">产量与产值</td><td style="text-align:center">适用于考察不同变量之间的关系 相关关系</td></tr><tr><td style="text-align:center">38</td><td style="text-align:center">三维图</td><td style="text-align:center">echarts</td><td style="text-align:center">适用于表示三个维度的数值变化 三维度变化</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">39</td><td style="text-align:center">社交关系图</td><td style="text-align:center">echarts</td><td style="text-align:center">适用于表现用户群组等之间行为互动的社交关系</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">40</td><td style="text-align:center">树状图</td><td style="text-align:center"></td><td style="text-align:center">以相对于整体的比例显示分层数据   占比</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">41</td><td style="text-align:center">太阳辐射图</td><td style="text-align:center">echarts</td><td style="text-align:center">适用于表达清晰的层级和归属关系</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">42</td><td style="text-align:center">四象限图</td><td style="text-align:center"></td><td style="text-align:center">通过四象限的方式查看数据分布</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">43</td><td style="text-align:center">双轴图</td><td style="text-align:center"></td><td style="text-align:center">适用于查看两个不同单位的度量变化趋势</td><td style="text-align:center">折线加柱状图</td></tr><tr><td style="text-align:center">44</td><td style="text-align:center">填充地图</td><td style="text-align:center"></td><td style="text-align:center">多维度地理分布状况</td><td style="text-align:center">以地图区块的填充颜色来反应度量大小</td></tr><tr><td style="text-align:center">45</td><td style="text-align:center">象形柱图</td><td style="text-align:center">echarts</td><td style="text-align:center">利用图片和形状生动形象的表现数据</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">46</td><td style="text-align:center">误差棒图</td><td style="text-align:center">echarts</td><td style="text-align:center">适用于展现数据的波动性</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">47</td><td style="text-align:center">突出显示表</td><td style="text-align:center"></td><td style="text-align:center">适用于突出显示异常值  突出显示</td></tr><tr><td style="text-align:center">48</td><td style="text-align:center">条形图</td><td style="text-align:center"></td><td style="text-align:center">适用于比较数据大小</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">49</td><td style="text-align:center">流图</td><td style="text-align:center">echarts</td><td style="text-align:center">由堆积面积图演变而来，适用于表示时间或主题等在一段时间内的变化</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">50</td><td style="text-align:center">直方图</td><td style="text-align:center"></td><td style="text-align:center">适用于分析数据跨组的分布情况 数据分布</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">51</td><td style="text-align:center">折线图</td><td style="text-align:center"></td><td style="text-align:center">适用于查看数据中随时间推移的趋势</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">52</td><td style="text-align:center">哑铃图</td><td style="text-align:center"></td><td style="text-align:center">适用于表示两个数据点之间的变化</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">53</td><td style="text-align:center">柱中柱</td><td style="text-align:center"></td><td style="text-align:center">适用于进行指标达成对比 类似并排条作用</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">54</td><td style="text-align:center">凹凸图</td><td style="text-align:center"></td><td style="text-align:center">适用于排名变化  适用于排名变化的对比分析</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">55</td><td style="text-align:center">赛道图</td><td style="text-align:center"></td><td style="text-align:center">多维分析</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">56</td><td style="text-align:center">钟表图</td><td style="text-align:center"></td><td style="text-align:center">基于分钟的时间序列分析</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">57</td><td style="text-align:center">九宫格(员工评级)</td><td style="text-align:center"></td><td style="text-align:center">适用于员工评级，绩效评级等</td></tr></tbody></table><p>用tableau,echarts,d3.js完成~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;整理了部分常见图表。&lt;br&gt;另外如何将excel转变为MarkDown能识别的表格？&lt;br&gt;直接将表格复制到下面这个网页转换即可。&lt;br&gt;&lt;a href=&quot;http://pressbin.com/tools/excel_to_html_table/index.html&quot; t
      
    
    </summary>
    
      <category term="charts" scheme="https://chumingke.github.io/categories/charts/"/>
    
    
      <category term="Data Analysis" scheme="https://chumingke.github.io/tags/Data-Analysis/"/>
    
      <category term="charts" scheme="https://chumingke.github.io/tags/charts/"/>
    
  </entry>
  
  <entry>
    <title>深入浅出MySQL笔记（三）</title>
    <link href="https://chumingke.github.io//blog/2017/10/Easy-to-understand-mysql-3.html"/>
    <id>https://chumingke.github.io//blog/2017/10/Easy-to-understand-mysql-3.html</id>
    <published>2017-10-03T09:41:18.000Z</published>
    <updated>2017-10-03T09:43:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>本笔记为学习该书所记，便于复习。<br>包含第五、六章笔记。<br>常用函数与图形化工具的使用。<br>[TOC]</p><h1 id="第一部分-基础篇"><a href="#第一部分-基础篇" class="headerlink" title="第一部分 基础篇"></a>第一部分 基础篇</h1><h2 id="第5章-常用函数"><a href="#第5章-常用函数" class="headerlink" title="第5章 常用函数"></a>第5章 常用函数</h2><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><p>常用字符串函数<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">CONCAT</span><span class="params">(S1,S2...Sn)</span></span></div><div class="line"><span class="function"><span class="title">INSERT</span><span class="params">(str,x,y,instr)</span></span></div><div class="line"><span class="function"><span class="title">LOWER</span><span class="params">(str)</span></span></div><div class="line"><span class="function"><span class="title">UPPER</span><span class="params">(str)</span></span></div><div class="line"><span class="function"><span class="title">LEFT</span><span class="params">(str,x)</span></span></div><div class="line"><span class="function"><span class="title">RIGHT</span><span class="params">(str,x)</span></span></div><div class="line"><span class="function"><span class="title">LPAD</span><span class="params">(str,n,pad)</span></span></div><div class="line"><span class="function"><span class="title">RPAD</span><span class="params">(str,n,pad)</span></span></div><div class="line"><span class="function"><span class="title">LTRIM</span><span class="params">(str)</span></span></div><div class="line"><span class="function"><span class="title">RTRIM</span><span class="params">(str)</span></span></div><div class="line"><span class="function"><span class="title">REPEAT</span><span class="params">(str,x)</span></span></div><div class="line"><span class="function"><span class="title">REPLACE</span><span class="params">(str,a,b)</span></span></div><div class="line"><span class="function"><span class="title">STRCMP</span><span class="params">(s1,s2)</span></span></div><div class="line"><span class="function"><span class="title">TRIM</span><span class="params">(str)</span></span></div><div class="line"><span class="function"><span class="title">SUBSTRING</span><span class="params">(str,x,y)</span></span></div></pre></td></tr></table></figure></p><h3 id="数字函数"><a href="#数字函数" class="headerlink" title="数字函数"></a>数字函数</h3><p>常用数值函数<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">ABS</span><span class="params">(x)</span></span></div><div class="line"><span class="function"><span class="title">CEIL</span><span class="params">(x)</span></span></div><div class="line"><span class="function"><span class="title">FLOOR</span><span class="params">(x)</span></span></div><div class="line"><span class="function"><span class="title">MOD</span><span class="params">(x,y)</span></span></div><div class="line"><span class="function"><span class="title">RAND</span><span class="params">()</span></span></div><div class="line"><span class="function"><span class="title">ROUND</span><span class="params">(x,y)</span></span></div><div class="line"><span class="function"><span class="title">TRUNCATE</span><span class="params">(x,y)</span></span></div></pre></td></tr></table></figure></p><h3 id="时间和日期函数"><a href="#时间和日期函数" class="headerlink" title="时间和日期函数"></a>时间和日期函数</h3><p>常用时间和日期函数</p><h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">IF</span>(<span class="keyword">value</span>,t,f)</div><div class="line">IFNULL(value1,value2)</div><div class="line"><span class="keyword">CASE</span> WHER [value1] <span class="keyword">THEN</span> [result1]...ELES [<span class="keyword">default</span>] <span class="keyword">END</span></div><div class="line"><span class="keyword">CASE</span> [expr] WHEN [value1] <span class="keyword">THEN</span> [result1]... <span class="keyword">ELSE</span> [<span class="keyword">default</span>] <span class="keyword">END</span></div></pre></td></tr></table></figure><h3 id="其他常用函数"><a href="#其他常用函数" class="headerlink" title="其他常用函数"></a>其他常用函数</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">DATABASE</span><span class="params">()</span></span></div><div class="line"><span class="function"><span class="title">VERSION</span><span class="params">()</span></span></div><div class="line"><span class="function"><span class="title">USER</span><span class="params">()</span></span></div><div class="line"><span class="function"><span class="title">INET_ATON</span><span class="params">(IP)</span></span></div><div class="line"><span class="function"><span class="title">INET_NTOA</span><span class="params">(num)</span></span></div><div class="line"><span class="function"><span class="title">PASSWORD</span><span class="params">(str)</span></span></div><div class="line"><span class="function"><span class="title">MD5</span><span class="params">()</span></span></div></pre></td></tr></table></figure><h2 id="第6章-图形化工具的使用"><a href="#第6章-图形化工具的使用" class="headerlink" title="第6章 图形化工具的使用"></a>第6章 图形化工具的使用</h2><h3 id="Mysql-Workbench"><a href="#Mysql-Workbench" class="headerlink" title="Mysql Workbench"></a>Mysql Workbench</h3><h3 id="phpMyAdmin"><a href="#phpMyAdmin" class="headerlink" title="phpMyAdmin"></a>phpMyAdmin</h3><h3 id="navicat"><a href="#navicat" class="headerlink" title="navicat"></a>navicat</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本笔记为学习该书所记，便于复习。&lt;br&gt;包含第五、六章笔记。&lt;br&gt;常用函数与图形化工具的使用。&lt;br&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;第一部分-基础篇&quot;&gt;&lt;a href=&quot;#第一部分-基础篇&quot; class=&quot;headerlink&quot; title=&quot;第一部分 基础篇&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="mysql" scheme="https://chumingke.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://chumingke.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>深入浅出MySQL笔记（二）</title>
    <link href="https://chumingke.github.io//blog/2017/10/Easy-to-understand-mysql-2.html"/>
    <id>https://chumingke.github.io//blog/2017/10/Easy-to-understand-mysql-2.html</id>
    <published>2017-10-03T09:39:08.000Z</published>
    <updated>2017-10-03T09:40:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>本笔记为学习该书所记，便于复习。<br>包含第三、四章笔记。<br>数据类型与运算符<br>[TOC]</p><h1 id="第一部分-基础篇"><a href="#第一部分-基础篇" class="headerlink" title="第一部分 基础篇"></a>第一部分 基础篇</h1><h2 id="第3章-Mysql支持的数据类型"><a href="#第3章-Mysql支持的数据类型" class="headerlink" title="第3章 Mysql支持的数据类型"></a>第3章 Mysql支持的数据类型</h2><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><h4 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h4><p>zerofill<br>UNSIGNED<br>AUTO_INCREMENT</p><h4 id="浮点数类型"><a href="#浮点数类型" class="headerlink" title="浮点数类型"></a>浮点数类型</h4><h4 id="定点数类型"><a href="#定点数类型" class="headerlink" title="定点数类型"></a>定点数类型</h4><p>DECIMAL(M,D)<br>SHOW WARNINGSL;</p><h4 id="位类型"><a href="#位类型" class="headerlink" title="位类型"></a>位类型</h4><p>BIT(M)<br>hex()</p><h3 id="日期时间类型"><a href="#日期时间类型" class="headerlink" title="日期时间类型"></a>日期时间类型</h3><h4 id="DATA"><a href="#DATA" class="headerlink" title="DATA"></a>DATA</h4><h4 id="DATATIME"><a href="#DATATIME" class="headerlink" title="DATATIME"></a>DATATIME</h4><h4 id="TIMESTAMP"><a href="#TIMESTAMP" class="headerlink" title="TIMESTAMP"></a>TIMESTAMP</h4><h4 id="TIME"><a href="#TIME" class="headerlink" title="TIME"></a>TIME</h4><h4 id="YEAR"><a href="#YEAR" class="headerlink" title="YEAR"></a>YEAR</h4><h4 id="查看时区"><a href="#查看时区" class="headerlink" title="查看时区"></a>查看时区</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'time_zone'</span>;</div></pre></td></tr></table></figure><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><h4 id="CHAR和VARCHAR类"><a href="#CHAR和VARCHAR类" class="headerlink" title="CHAR和VARCHAR类"></a>CHAR和VARCHAR类</h4><p>主要区别在于存储方式不同</p><ul><li>char列长度固定为创建列表时的长度</li><li>检索时，char列删除了尾部的空格</li><li>varchar列中的值为可变长字符串</li><li>检索时，varchar则保留这些空格<br>注意length()函数的用法<h4 id="BINARY和VARBINARY类型"><a href="#BINARY和VARBINARY类型" class="headerlink" title="BINARY和VARBINARY类型"></a>BINARY和VARBINARY类型</h4>包含二进制字符串<br>不包含二进制字符串<h4 id="ENUM类型"><a href="#ENUM类型" class="headerlink" title="ENUM类型"></a>ENUM类型</h4>枚举类型<br>忽略大小写（转化为大写）<br>如果不在指定范围内，不返回警告，而是插入第一个值M<br>只允许从值集合中选取单个值，而不能一次取多个值<h4 id="SET类型"><a href="#SET类型" class="headerlink" title="SET类型"></a>SET类型</h4>与ENUM类型类似<br>主要区别是，SET一次可以选取多个成员<h2 id="第4章-Mysql中的运算符"><a href="#第4章-Mysql中的运算符" class="headerlink" title="第4章 Mysql中的运算符"></a>第4章 Mysql中的运算符</h2><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3>加、减、乘、除、模运算<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3>大、小、等于，存在、指定范围等<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3>又称布尔运算符<br>与、或、非、异或<h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3></li><li>将给定的操作数转换为二进制</li><li>对各个操作数每一位进行指定的逻辑运算</li><li>得到的二进制结果转换为十进制数后就是位运算的结果<h3 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h3>见表</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本笔记为学习该书所记，便于复习。&lt;br&gt;包含第三、四章笔记。&lt;br&gt;数据类型与运算符&lt;br&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;第一部分-基础篇&quot;&gt;&lt;a href=&quot;#第一部分-基础篇&quot; class=&quot;headerlink&quot; title=&quot;第一部分 基础篇&quot;&gt;&lt;/a&gt;第一部
      
    
    </summary>
    
      <category term="mysql" scheme="https://chumingke.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://chumingke.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>深入浅出MySQL笔记（一）</title>
    <link href="https://chumingke.github.io//blog/2017/10/Easy-to-understand-mysql.html"/>
    <id>https://chumingke.github.io//blog/2017/10/Easy-to-understand-mysql.html</id>
    <published>2017-10-03T08:07:24.000Z</published>
    <updated>2017-10-03T08:09:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>本笔记为学习该书所记，便于复习。<br>包含第一、二章笔记。</p><p>[TOC]</p><h1 id="第一部分-基础篇"><a href="#第一部分-基础篇" class="headerlink" title="第一部分 基础篇"></a>第一部分 基础篇</h1><h2 id="第1章-mysql的安装与配置"><a href="#第1章-mysql的安装与配置" class="headerlink" title="第1章 mysql的安装与配置"></a>第1章 mysql的安装与配置</h2><h3 id="MySQL的下载-："><a href="#MySQL的下载-：" class="headerlink" title="MySQL的下载 ："></a>MySQL的下载 ：</h3><p>  分为windows平台，Linux平台两种</p><h3 id="MySQL的安装"><a href="#MySQL的安装" class="headerlink" title="MySQL的安装"></a>MySQL的安装</h3><h3 id="MySQL的配置"><a href="#MySQL的配置" class="headerlink" title="MySQL的配置"></a>MySQL的配置</h3><h3 id="启动和关闭MySQL"><a href="#启动和关闭MySQL" class="headerlink" title="启动和关闭MySQL"></a>启动和关闭MySQL</h3><h2 id="第2章-SQL基础"><a href="#第2章-SQL基础" class="headerlink" title="第2章 SQL基础"></a>第2章 SQL基础</h2><h3 id="SQL简介"><a href="#SQL简介" class="headerlink" title="SQL简介"></a>SQL简介</h3><p> Structure Query Language(结构化查询语言)</p><h3 id="My-SQL使用入门"><a href="#My-SQL使用入门" class="headerlink" title="(My)SQL使用入门"></a>(My)SQL使用入门</h3><h4 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h4><p>DDL—(Data Definition Languages)语句—(数据定义语言)<br>DML—(Data Manipulation Language)语句—(数据操作语句)<br>DCL—(Data Control Language)语句—(数据控制语句)</p><h4 id="DDL语句"><a href="#DDL语句" class="headerlink" title="DDL语句"></a>DDL语句</h4><h5 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1 创建数据库"></a>1 创建数据库</h5><p>1.1 连接到mysql服务器<br>在安装好Mysql后，要创建数据库，首先要连接到MySQL服务器。<br>在MAC中打开终端，输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root -p</div></pre></td></tr></table></figure></p><p>然后输入密码，即可连接。<br>这时候会显示一些信息。包括:<br>    命令结束符”;”或者”\g”<br>    客户链接ID，记录了到目前为止的连接次数<br>    版本<br>    显示帮助</p><p>1.2 建库<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> dbname;</div></pre></td></tr></table></figure></p><p>1.3查看数据库<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</div></pre></td></tr></table></figure></p><p>1.4 选择数据库<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">USE</span> dbname</div></pre></td></tr></table></figure></p><p>1.5 查看数据库中的表<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</div></pre></td></tr></table></figure></p><p>必须先选择数据库后才能看表。</p><h5 id="2-删除数据库"><a href="#2-删除数据库" class="headerlink" title="2 删除数据库"></a>2 删除数据库</h5><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">drop</span> <span class="keyword">database</span> dbname;</div></pre></td></tr></table></figure><h5 id="3-创建表"><a href="#3-创建表" class="headerlink" title="3 创建表"></a>3 创建表</h5><p>3.1 建表<br>语法<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tablename(</div><div class="line">column_name_1 column_type_1 <span class="keyword">constraints</span>,</div><div class="line">column_name_n column_type_n <span class="keyword">constraints</span>);</div></pre></td></tr></table></figure></p><p>案例<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</div><div class="line">ename varchars(<span class="number">10</span>),</div><div class="line">hiredate <span class="built_in">date</span>,</div><div class="line">sal <span class="built_in">decimal</span>(<span class="number">10</span>,<span class="number">2</span>),</div><div class="line">deptno <span class="built_in">int</span>(<span class="number">2</span>)</div><div class="line">);</div></pre></td></tr></table></figure></p><p>3.2 查看表定义<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">DESC tablename</span></div></pre></td></tr></table></figure></p><p>3.3 查看创建表的SQL语句<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> emp \G;</div></pre></td></tr></table></figure></p><h5 id="4-删除表"><a href="#4-删除表" class="headerlink" title="4 删除表"></a>4 删除表</h5><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DROP <span class="keyword">TABLE</span> tablename</div></pre></td></tr></table></figure><h5 id="5-修改表"><a href="#5-修改表" class="headerlink" title="5 修改表"></a>5 修改表</h5><p>5.1 修改表类型<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename <span class="keyword">MODIFY</span> [<span class="keyword">COLUMN</span>] column_definition [<span class="keyword">FIRST</span>|<span class="keyword">AFTER</span> col_name]</div></pre></td></tr></table></figure></p><p>例子<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">modify</span> ename <span class="built_in">varchar</span>(<span class="number">20</span>);</div></pre></td></tr></table></figure></p><p>5.2 增加表字段<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span>  tablename <span class="keyword">ADD</span> [<span class="keyword">COLUMN</span>] column_definition [<span class="keyword">FIRST</span>|<span class="keyword">AFTER</span> col_name]</div></pre></td></tr></table></figure></p><p>例子<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> <span class="keyword">column</span> age <span class="built_in">int</span>(<span class="number">3</span>);</div></pre></td></tr></table></figure></p><p>5.3 删除表字段<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename <span class="keyword">Drop</span> [<span class="keyword">COLUMN</span>] col_name</div></pre></td></tr></table></figure></p><p>例子<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">drop</span> <span class="keyword">column</span> age;</div></pre></td></tr></table></figure></p><p>5.4 字段改名<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename <span class="keyword">CHANGE</span> [<span class="keyword">COLUMN</span>] old_col_name column_definition [<span class="keyword">FIRST</span>|<span class="keyword">AFTER</span> col_name]</div></pre></td></tr></table></figure></p><p>例子<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">change</span> age age1 <span class="built_in">int</span>(<span class="number">4</span>)</div></pre></td></tr></table></figure></p><blockquote><p>注意，change和modify都可以修改表定义，不同的是change修改表名，所以需要写两次表名，modify不能修改表名。</p></blockquote><p>5.5 修改字段排列顺序<br>ADD/CHANGE/MODIFY都有可选项<strong>first|after column</strong>。<br>ADD增加的新字段默认加在最后位置。<br>用FIRST可以放在最前面<br>例如<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">modify</span> age <span class="built_in">int</span>(<span class="number">3</span>) <span class="keyword">first</span>;</div></pre></td></tr></table></figure></p><p>用after放在某个字段之后<br>例如<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> birth <span class="keyword">data</span> <span class="keyword">after</span> ename;</div></pre></td></tr></table></figure></p><blockquote><p>CHANGE/FIRST|AFTER COLUMN 这些关键字都属于Mysql在标准SQL上的扩展，其他数据库不一定适用。</p></blockquote><p>5.6 更改表名<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename <span class="keyword">RENAME</span>[<span class="keyword">TO</span>] new_tablename</div></pre></td></tr></table></figure></p><p>例子<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">rename</span> emp1;</div></pre></td></tr></table></figure></p><h4 id="DML语句"><a href="#DML语句" class="headerlink" title="DML语句"></a>DML语句</h4><h5 id="1插入记录"><a href="#1插入记录" class="headerlink" title="1插入记录"></a>1插入记录</h5><p>insert<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INSERT INTO tablename(<span class="name">field1</span>,field2..) VALUES(<span class="name">value1</span>,value2..)</div></pre></td></tr></table></figure></p><p>也可以不指定字段名<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp</div><div class="line"><span class="keyword">values</span>(<span class="string">'lisa'</span>,<span class="string">'2003-03-03'</span>,<span class="string">'3000'</span>,<span class="number">2</span>);</div></pre></td></tr></table></figure></p><p>一次性插入多条记录<br><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">INSERT INTO tablename (field<span class="number">1</span>,field<span class="number">2</span>..)</div><div class="line">VALUES</div><div class="line">(record<span class="number">1_</span><span class="keyword">value</span><span class="number">1</span>,record<span class="number">1_</span><span class="keyword">value</span><span class="number">2</span>...record<span class="number">1_</span>valuen),</div><div class="line">...</div><div class="line">(recordn<span class="number">_</span><span class="keyword">value</span><span class="number">1</span>,recordn<span class="number">_</span><span class="keyword">value</span><span class="number">2</span>...recordn<span class="number">_</span>valuen)</div><div class="line">;</div></pre></td></tr></table></figure></p><h5 id="2更新记录"><a href="#2更新记录" class="headerlink" title="2更新记录"></a>2更新记录</h5><p>update<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">UPDATE</span> tablename <span class="keyword">SET</span> field1=<span class="keyword">values</span>,field2=value2..fieldn=valuen[<span class="keyword">WHERE</span> CONDITION]</div></pre></td></tr></table></figure></p><p>可以同时更新多个表中的数据<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UPDATE t1,t2<span class="built_in">..</span>tn <span class="builtin-name">SET</span> t1.<span class="attribute">field1</span>=expr1...tn.fieldn=exprn [WHERE CONDITION]</div></pre></td></tr></table></figure></p><p>例子<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">update emp a,dept b <span class="builtin-name">set</span> a.<span class="attribute">sal</span>=a.sal*b.deptno,b.deptname=a.ename</div><div class="line">where a.<span class="attribute">deptno</span>=b.deptno;</div></pre></td></tr></table></figure></p><blockquote><p>注意，多表更新的语法更多地用在了根据一个表的字段来动态地更新另外一个表的字段</p><h5 id="3删除记录"><a href="#3删除记录" class="headerlink" title="3删除记录"></a>3删除记录</h5><p>delete<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tablename [<span class="keyword">WHERE</span> CONDITION]</div></pre></td></tr></table></figure></p></blockquote><p>例子<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emp <span class="keyword">where</span> ename=<span class="string">'dony'</span>;</div></pre></td></tr></table></figure></p><p>一次删除多个表的记录<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DELETE <span class="built_in">t1</span>,<span class="built_in">t2</span>...tn FROM <span class="built_in">t1</span>,<span class="built_in">t2</span>...tn [WHERE CONDITION]</div></pre></td></tr></table></figure></p><p>如果from后面的表名用别名，则delete后面也要用相应的别名。<br>例子<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">delete a,b <span class="keyword">from</span> emp a,dept b where a.<span class="attribute">deptno</span>=b.deptno <span class="keyword">and</span> a.<span class="attribute">deptno</span>=3;</div></pre></td></tr></table></figure></p><p>不管单表还是多表，不加where条件将会把所有表的所有记录删除，因此操作小心。</p><h5 id="4-查询记录"><a href="#4-查询记录" class="headerlink" title="4 查询记录"></a>4 查询记录</h5><p>4.1 select<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tablename [<span class="keyword">WHERE</span> CONDITION]</div></pre></td></tr></table></figure></p><p>4.2 查询不重复的记录<br>distinct<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> deptno <span class="keyword">from</span> emp;</div></pre></td></tr></table></figure></p><p>4.3 条件查询<br>where<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=<span class="number">1</span>;</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=<span class="number">1</span> <span class="keyword">and</span> sal&lt;<span class="number">3000</span>;</div></pre></td></tr></table></figure></p><p>4.4 排序和限制<br>排序order by<br>DESC降序ASC升序<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tablename [<span class="keyword">WHERE</span> CONDITION] [<span class="keyword">ORDER</span> <span class="keyword">BY</span> field1 [DES|<span class="keyword">ASC</span>]...fieldn[<span class="keyword">DESC</span>|<span class="keyword">ASC</span>]]</div></pre></td></tr></table></figure></p><p>限制limit<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SELECT...[LIMIT offset_start,row_count]</div><div class="line">##其中offset_start表示记录的起始偏移量，row_count表示显示的行数</div></pre></td></tr></table></figure></p><p>例子<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp oeder <span class="keyword">by</span> sal <span class="keyword">limit</span> <span class="number">1</span>,<span class="number">3</span>;</div><div class="line">输出排序后从第二条记录开始的3条记录</div></pre></td></tr></table></figure></p><blockquote><p>limit经常和order by一起配合使用来进行记录的分页显示<br>limit属于Mysql扩展sql92后的语法，在其他数据库上并不能通用</p></blockquote><p>4.5 聚合<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">SELECT [field1,field2<span class="built_in">..</span>.fieldn] fun_name   ##fun_name表示聚合函数</div><div class="line"><span class="keyword">FROM</span> tablename</div><div class="line">[WHERE where_contition]</div><div class="line">GROUP BY field1,field2<span class="built_in">..</span>.fieldn     ##GROUP BY后是待聚合字段</div><div class="line">[WITH ROLLUP]     ##可选，表示对聚合后结果进行再汇总</div><div class="line">[HAVING where_condition]   #表示对结果再进行条件过滤</div></pre></td></tr></table></figure></p><blockquote><p>注意，having和where的区别在于，where在聚合前对记录进行过滤，having是对聚合后的结果进行条件过滤。<br>尽可能先用where先过滤记录，这样结果集减小，对聚合效率大大提高<br>例子<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">select deptno,count(1) <span class="keyword">from</span> emp<span class="built_in"> group </span>by deptno with rollup</div><div class="line"><span class="comment">##统计各部门人数后汇总统计总人数</span></div></pre></td></tr></table></figure></p></blockquote><p>4.6 表连接<br>内连接<br>关键字<br>where…=…<br>from…inner join…on<br>from…left join…on<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> ename,deptname <span class="keyword">from</span> emp,dept <span class="keyword">where</span> emp.deptno=dept.deptno;</div><div class="line"><span class="keyword">select</span> field1...fieldn <span class="keyword">from</span> tablename <span class="keyword">inner</span> <span class="keyword">join</span> <span class="keyword">table</span> <span class="keyword">on</span> join_condition;</div></pre></td></tr></table></figure></p><p>外连接<br>左连接<br>查询emp中所有用户名和所在部门名称<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> ename,deptname <span class="keyword">from</span> emp <span class="keyword">left</span> <span class="keyword">join</span> dept <span class="keyword">on</span> emp.deptno=dept.deptno;</div></pre></td></tr></table></figure></p><p>右连接<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> ename,deptname <span class="keyword">from</span> dept <span class="keyword">right</span> <span class="keyword">join</span> emp <span class="keyword">on</span> dept.deptno=emp.deptno;</div></pre></td></tr></table></figure></p><p>4.7 子查询<br>关键字<br>in,<br>not in,<br>=,<br>!=,<br>exists,<br>not exists<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> deptno <span class="keyword">in</span>(<span class="keyword">select</span> deptno <span class="keyword">from</span> dept);</div></pre></td></tr></table></figure></p><p>某些条件下，子查询可转化为表连接，条件的、外连接、内连接都可以使用<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> emp.* <span class="keyword">from</span> emp,dept <span class="keyword">where</span> emp.deptno=dept.deptno;</div></pre></td></tr></table></figure></p><blockquote><p>书上说表关联的效率要高于子查询，因为子查询走的是笛卡尔积。而培训班老师所子查询效率高于表连接。。。<br>表关联可能有多条记录，子查询只有一条记录，如果需要唯一的列，最好走子查询。</p></blockquote><p>4.8 记录联合<br>关键字，union,union all<br>union是将union all结果去重DISTINCT<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1</div><div class="line"><span class="keyword">UNION</span>|<span class="keyword">UNION</span> <span class="keyword">ALL</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t2</div></pre></td></tr></table></figure></p><p>例子<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> deptno from emp</div><div class="line"><span class="class"><span class="keyword">union</span> <span class="title">all</span></span></div><div class="line"><span class="keyword">select</span> deptno from dept;</div></pre></td></tr></table></figure></p><h4 id="DCL语句"><a href="#DCL语句" class="headerlink" title="DCL语句"></a>DCL语句</h4><p>用的比较少，简单写下<br>创建一个数据库用户z1，具有对sakila数据库中所有表的SELECT/INSERT权限<br>关键词grant<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">grant</span> <span class="keyword">select</span>,<span class="keyword">insert</span> <span class="keyword">on</span> sakila.* <span class="keyword">to</span> <span class="string">'z1'</span>@<span class="string">'localhost'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'123'</span>;</div></pre></td></tr></table></figure></p><p>权限变更，需要收回z1的INSERT权限<br>关键词revoke<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">revoke</span> <span class="keyword">insert</span> <span class="keyword">on</span> sakila.* <span class="keyword">from</span> <span class="string">'z1'</span>@<span class="string">'localhost'</span>;</div></pre></td></tr></table></figure></p><h3 id="帮助的使用"><a href="#帮助的使用" class="headerlink" title="帮助的使用"></a>帮助的使用</h3><h4 id="按照层次看帮助"><a href="#按照层次看帮助" class="headerlink" title="按照层次看帮助"></a>按照层次看帮助</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">?<span class="built_in">contents</span></div></pre></td></tr></table></figure><p>?+类别名称<br>例如<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">? <span class="class"><span class="keyword">data</span> types</span></div></pre></td></tr></table></figure></p><h4 id="快速查阅帮助"><a href="#快速查阅帮助" class="headerlink" title="快速查阅帮助"></a>快速查阅帮助</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">? 关键字</div></pre></td></tr></table></figure><p>例如<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">? <span class="keyword">show</span>;</div><div class="line">? <span class="keyword">create</span> <span class="keyword">table</span>;</div></pre></td></tr></table></figure></p><h4 id="常用的网络资源"><a href="#常用的网络资源" class="headerlink" title="常用的网络资源"></a>常用的网络资源</h4><p>略</p><h3 id="查询元数据信息"><a href="#查询元数据信息" class="headerlink" title="查询元数据信息"></a>查询元数据信息</h3><h4 id="information-schema数据库"><a href="#information-schema数据库" class="headerlink" title="information_schema数据库"></a>information_schema数据库</h4><p>元数据信息，数据的数据，虚拟数据库，物理上并不存在相关目录文件。库里show tables显示的表全部是视图</p><h4 id="常见场景"><a href="#常见场景" class="headerlink" title="常见场景"></a>常见场景</h4><h5 id="1删除数据库test1下所有前缀为tmp的表"><a href="#1删除数据库test1下所有前缀为tmp的表" class="headerlink" title="1删除数据库test1下所有前缀为tmp的表"></a>1删除数据库test1下所有前缀为tmp的表</h5><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">concat</span> (<span class="string">'drop table test1.,'</span>table_name,<span class="string">';'</span>) <span class="keyword">from</span> tables</div><div class="line"><span class="keyword">where</span> table_schema = <span class="string">'test1'</span> <span class="keyword">and</span> table_name like <span class="string">'tmp%'</span>;</div><div class="line">## <span class="keyword">concat</span> 将多个数组组合成新的数组</div></pre></td></tr></table></figure><h5 id="2将数据库test1下所有存储引擎为mysiam的表改为innodb"><a href="#2将数据库test1下所有存储引擎为mysiam的表改为innodb" class="headerlink" title="2将数据库test1下所有存储引擎为mysiam的表改为innodb"></a>2将数据库test1下所有存储引擎为mysiam的表改为innodb</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">concat</span> (<span class="string">'alter table test1.'</span>,table_name,<span class="string">'engine = innodb;'</span>) <span class="keyword">from</span> <span class="keyword">tables</span></div><div class="line"><span class="keyword">where</span> table_schema = <span class="string">'test1'</span> <span class="keyword">and</span> <span class="keyword">engine</span> = <span class="string">'MyISAM'</span>;</div></pre></td></tr></table></figure><h5 id="3常用视图"><a href="#3常用视图" class="headerlink" title="3常用视图"></a>3常用视图</h5><p>SCHEMATA:<br>提供了当前mysql实例中所有数据库的信息<br>show databases的结果取自此表<br>TABLES:<br>提供了关于数据库中表的信息（包括视图），详述了某个表属于哪个schema、表类型、表引擎、创建时间等信息<br>show tables from schemaname的结果取之此表<br>COLUMNS：<br>提供了表中的列信息，详述了某张表的所有列以及每个列的信息<br>show columns from schemaname.tablename的结果取自此表<br>STATISTICS：<br>该表提供了关于表索引的信息<br>show index from schemaname.tablename的结果取自此表</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本笔记为学习该书所记，便于复习。&lt;br&gt;包含第一、二章笔记。&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;第一部分-基础篇&quot;&gt;&lt;a href=&quot;#第一部分-基础篇&quot; class=&quot;headerlink&quot; title=&quot;第一部分 基础篇&quot;&gt;&lt;/a&gt;第一部分 基础篇&lt;/h
      
    
    </summary>
    
      <category term="mysql" scheme="https://chumingke.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://chumingke.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>如何绑定阿里云域名</title>
    <link href="https://chumingke.github.io//blog/2017/10/how-to-bind-Alibaba-Cloud-domain-name.html"/>
    <id>https://chumingke.github.io//blog/2017/10/how-to-bind-Alibaba-Cloud-domain-name.html</id>
    <published>2017-10-01T10:37:11.000Z</published>
    <updated>2017-10-01T10:40:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本来 应该不是很复杂的事情操作了半天，所以还是记下来吧。</p></blockquote><p>[toc]</p><h1 id="准备域名"><a href="#准备域名" class="headerlink" title="准备域名"></a>准备域名</h1><h2 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h2><p>首先在阿里云买一个域名，.com的域名一年55，还有1块钱的域名呢。</p><h2 id="实名认证"><a href="#实名认证" class="headerlink" title="实名认证"></a>实名认证</h2><p>买好之后，进行实名认证。这一步我用mac自带浏览器上传身份证照片无数次都失败了，最后换了chrome浏览器才成功。所以假如遇到类似情况，可以考虑换个浏览器试试。认证审核大概需要一段时间。我这边过了大概一个小时就完了。</p><h1 id="创建CNAME文件"><a href="#创建CNAME文件" class="headerlink" title="创建CNAME文件"></a>创建CNAME文件</h1><p>绑定域名网上好像有很几种方法，我们采用创建CNAME的方法</p><p>首先在博客根目录下创建一个CNAME文件。<br>注意：没有后缀，文件名一定要大写。</p><p>在该文件第一行写上你注册的域名，比如我的chumingke.com<br>注意，没有前缀，只是chumingke.com</p><p>然后将该文件同步到Github。因为我用的是Hexo，所以hexo g d就可以了。(此处我将CNAME文件放在source文件夹下，防止被覆盖)</p><blockquote><p>这个文件可以告诉Github Pages服务器你想指定的域名。因此Github读取你的CNAME之后，Github服务器会设置chumingke.com为你的主域名，然后将chumingke.github.io重定向到chumingke.com。</p></blockquote><p>此时点开repository的settings往下拉到GitHub Pages位置可以看到<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Your site <span class="keyword">is</span> <span class="keyword">published</span> at http:<span class="comment">//chumingke.com/</span></div></pre></td></tr></table></figure></p><p>证明配置成功。</p><h1 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h1><blockquote><p>这一步我研究了好久，发现很多教程都不一样。后来终于明白什么情况。主要是DNS设置的不同。<br>一种是默认使用阿里云提供的万网DNS服务器。<br>一种是使用DNSPOD提供的DNS服务器，这样可以使你的域名在国外更快速的传播。<br>我一开始一直以为是同一个东西，所以配置的时候总是有问题。这里把两种方法都写出来。</p></blockquote><h2 id="万网DNS服务器"><a href="#万网DNS服务器" class="headerlink" title="万网DNS服务器"></a>万网DNS服务器</h2><p>使用默认服务器就不用修改DNS啦，简单一些。</p><h3 id="添加域名解析"><a href="#添加域名解析" class="headerlink" title="添加域名解析"></a>添加域名解析</h3><p>首先登录阿里云，点击控制台，最左侧有个域名与网站，下拉菜单里有个域名，点击之后就可以看到我们注册的域名了。<br>这时看看域名状态是不是已经正常，或者还在审核。如果是还在审核那设置也是无效的。<br>我们等状态显示正常后。点击该域名-域名解析。<br>然后添加三条解析。<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>，设置主机记录www，记录类型为A，记录值是IP192<span class="meta">.30</span><span class="meta">.252</span><span class="meta">.153</span>。</div><div class="line">其中<span class="number">192.30</span><span class="meta">.252</span><span class="meta">.153</span>是Github Pages服务器指定的<span class="built_in">IP</span>地址，访问该<span class="built_in">IP</span>地址即表示访问Github Pages。</div><div class="line"><span class="number">2</span>，设置主机记录www，记录类型为A，记录值是IP192<span class="meta">.30</span><span class="meta">.252</span><span class="meta">.154</span>。同上。</div><div class="line"><span class="number">3</span>，设置主机记录@，记录类型为CNAME，记录值是chumingke.github.io.。表示将http://chumingke.com这个主域名映射yuanzb.github.io。</div><div class="line">注意在这里千万不要忘记记录值中.io后面还有一个点.！</div></pre></td></tr></table></figure></p><blockquote><p>这一步是告诉所有DNS服务器，对于chumingke.com的访问都会被重定向到chumingke.github.io<br>这里如果记录类型为A，后面对应的是IP地址，如果是CNAME，后面是网址。<br>很多人在这一步都会出添加失败提示已经有@或者www的记录，这个时候看好。是不是类型跟之前重复了。重复的删掉。</p></blockquote><p>添加成功后，就完成设置了，一般要等10分钟以上，再打开www.chumingke.com看看效果（这里是你自己的域名）。<br>网上有其他教程通过其他解析方式完成。原理应该是类似的。</p><h2 id="DNSPOD服务器"><a href="#DNSPOD服务器" class="headerlink" title="DNSPOD服务器"></a>DNSPOD服务器</h2><p>当你使用DNSPOD提供的DNS服务器时，除了DNS服务器不一样以外，其他的设置（比如A记录和CNAME记录）均相同。</p><h3 id="修改DNS服务器"><a href="#修改DNS服务器" class="headerlink" title="修改DNS服务器"></a>修改DNS服务器</h3><p>点击域名后进入域名控制台，在基本管理下面，左侧边栏。选择DNS修改，将两个DNS服务器地址改为<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">f1g1ns1<span class="selector-class">.dnspod</span><span class="selector-class">.net</span></div><div class="line">f1g1ns2<span class="selector-class">.dnspod</span><span class="selector-class">.net</span></div></pre></td></tr></table></figure></p><h3 id="添加记录"><a href="#添加记录" class="headerlink" title="添加记录"></a>添加记录</h3><p>注册DNSpod，然后添加域名，添加记录即可（添加记录操作同上面添加解析类似）。</p><p>修改完成后等10分钟左右，就可以检验成果啦。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本来 应该不是很复杂的事情操作了半天，所以还是记下来吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;准备域名&quot;&gt;&lt;a href=&quot;#准备域名&quot; class=&quot;headerlink&quot; title=&quot;准备域名&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="前端" scheme="https://chumingke.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Alibaba Cloud" scheme="https://chumingke.github.io/tags/Alibaba-Cloud/"/>
    
      <category term="blog" scheme="https://chumingke.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>如何用Mac+github pages +hexo搭建博客</title>
    <link href="https://chumingke.github.io//blog/2017/10/Mac-github-pages-hexo.html"/>
    <id>https://chumingke.github.io//blog/2017/10/Mac-github-pages-hexo.html</id>
    <published>2017-10-01T04:50:35.000Z</published>
    <updated>2017-10-01T04:54:09.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>实际上我是先用jekyll搭建博客的。后来发现没有找到好看的主题，看到大神用的hexo的主题，感觉很好看，所以尝试了用hexo来搭建博客，如果有需要用jekyll搭建的，可以参考<a href="https://chumingke.github.io/blog/2017/10/Mac-Github-pages-jekyll.html">如何利用Mac+Github pages+jekyll来编写博客</a>。</p></blockquote><p>[toc]</p><h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h1><p>安装环境：Node.js和Git。首先我们要安装这两个东西。</p><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>直接点击<a href="https://nodejs.org/en/" target="_blank" rel="external">官网</a>下载安装。</p><h2 id="安装GIT"><a href="#安装GIT" class="headerlink" title="安装GIT"></a>安装GIT</h2><p>这个不多说了，还是github创建主页那一套，其他教程很多。</p><h2 id="安装hexo-1"><a href="#安装hexo-1" class="headerlink" title="安装hexo"></a>安装hexo</h2><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 如遇权限问题在命令前加sudo</span></span></div><div class="line">mkdir hexo  #创建一个文件夹</div><div class="line">cd hexo</div><div class="line">npm install -g hexo-cli</div><div class="line">npm install hexo --save</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#部署Hexo：在Git shell 中输入</span></span></div><div class="line">hexo init</div></pre></td></tr></table></figure></blockquote><p>这一步网上不同教程有不同做法。因为我是fork自大神EZLippi的主题。所以上面是这么写的。实际上我是看着几个教程做的。因为在我输入npm install -g hexo-cli后hexo里面已经有文件了，输入hexo无效了。然后也试了一开始hexo init blog命令。发现直接初始化的时候东西都安装好了。不过我理解大概意思是，首先建一个文件夹可以放hexo的配置文件。然后初始化，然后安装配置文件就可以了。</p><p>新建完成后，blog文件夹的目录如下:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">_config<span class="selector-class">.yml</span>    <span class="comment">// 站点的配置信息</span></div><div class="line">package<span class="selector-class">.json</span>   <span class="comment">// 应用程序的信息</span></div><div class="line">scanffolds     <span class="comment">// 模板文件夹</span></div><div class="line">source         <span class="comment">// 存放用户资源的文件夹</span></div><div class="line">themes         <span class="comment">// 主题文件夹，Hexo会根据主题生成静态页面</span></div></pre></td></tr></table></figure></p><p>这个时候基本上就安装好啦。</p><h3 id="安装Hexo-插件"><a href="#安装Hexo-插件" class="headerlink" title="安装Hexo 插件"></a>安装Hexo 插件</h3><p>自动生成sitemap,Rss，部署到git等，建议安装<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> hexo-generator-<span class="keyword">index</span> <span class="comment">--save</span></div><div class="line">npm <span class="keyword">install</span> hexo-generator-<span class="keyword">archive</span> <span class="comment">--save</span></div><div class="line">npm <span class="keyword">install</span> hexo-generator-<span class="keyword">category</span> <span class="comment">--save</span></div><div class="line">npm <span class="keyword">install</span> hexo-generator-tag <span class="comment">--save</span></div><div class="line">npm <span class="keyword">install</span> hexo-<span class="keyword">server</span> <span class="comment">--save</span></div><div class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></div><div class="line">npm <span class="keyword">install</span> hexo-deployer-heroku <span class="comment">--save</span></div><div class="line">npm <span class="keyword">install</span> hexo-deployer-rsync <span class="comment">--save</span></div><div class="line">npm <span class="keyword">install</span> hexo-deployer-openshift <span class="comment">--save</span></div><div class="line">npm <span class="keyword">install</span> hexo-renderer-marked@<span class="number">0.2</span> <span class="comment">--save</span></div><div class="line">npm <span class="keyword">install</span> hexo-renderer-stylus@<span class="number">0.2</span> <span class="comment">--save</span></div><div class="line">npm <span class="keyword">install</span> hexo-generator-feed@<span class="number">1</span> <span class="comment">--save</span></div><div class="line">npm <span class="keyword">install</span> hexo-generator-sitemap@<span class="number">1</span> <span class="comment">--save</span></div></pre></td></tr></table></figure></p><h2 id="本地浏览"><a href="#本地浏览" class="headerlink" title="本地浏览"></a>本地浏览</h2><p>启动本地服务器：<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">server</span></div></pre></td></tr></table></figure></p><p>此时打开网址<a href="http://localhost:4000，正常来讲就可以看到地平线的那个主题了。我这边没有出现，可能是之前设置的jekyll的原因？不过这边暂时不用所以不影响。" target="_blank" rel="external">http://localhost:4000，正常来讲就可以看到地平线的那个主题了。我这边没有出现，可能是之前设置的jekyll的原因？不过这边暂时不用所以不影响。</a></p><h1 id="部署Git"><a href="#部署Git" class="headerlink" title="部署Git"></a>部署Git</h1><p>github账号这个不多说了。这里我们要有一个类似username.github.io的repository。配置好SSH。详细参考其他教程。<br>此时我们需要配置_config.yml文件。<br>终端里cd到hexo文件夹下，编辑_config.yml，滑到最底部，将deploy里的内容改为如下:<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">deploy</span>:</div><div class="line"><span class="attribute">type</span>: git</div><div class="line"><span class="attribute">repository</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:chumingke/chumingke.github.io.git(这个具体看自己Clone with SSH的地址)</div><div class="line"><span class="attribute">branch</span>: master</div></pre></td></tr></table></figure></p><h1 id="使用hexo"><a href="#使用hexo" class="headerlink" title="使用hexo"></a>使用hexo</h1><p>执行如下命令生成静态页面<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">generate</span></div></pre></td></tr></table></figure></p><p>然后执行部署命令<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo deploy</span></div></pre></td></tr></table></figure></p><p>这两个命令执行完看到Github上文件修改了。等大概不到一分钟打开<a href="https://username.github.io/（你自己起的名字）就可以看到主页啦。" target="_blank" rel="external">https://username.github.io/（你自己起的名字）就可以看到主页啦。</a></p><p>实际上这两个命令是每次提交都要用的。后面会提到。</p><h1 id="安装NexT主题"><a href="#安装NexT主题" class="headerlink" title="安装NexT主题"></a>安装NexT主题</h1><p>这里安装的是NexT主题，详细请参考<a href="http://theme-next.iissnan.com" target="_blank" rel="external">NexT使用文档</a>。<br>下载主题：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> hexo目录</div><div class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/iissnan/hexo-theme-<span class="keyword">next</span> themes/<span class="keyword">next</span></div></pre></td></tr></table></figure></p><p>你会发现在themes文件夹中多了一个next文件夹。这就是我们下载的主题。</p><h1 id="修改-config-yml中配置信息"><a href="#修改-config-yml中配置信息" class="headerlink" title="修改_config.yml中配置信息"></a>修改_config.yml中配置信息</h1><blockquote><p>需要注意的是，hexo文件夹下会包含两个_config.yml，一个位于站点根目录下，也就是刚才创建的hexo目录下，主要包含Hexo本身的配置；另一个位于主题目录下，主要用于配置主题相关的选项。</p></blockquote><p>由于刚才我们下载了NexT主题，要是想用的话还需要修改下下_config.yml。</p><h2 id="修改站点目录下的-config-yml"><a href="#修改站点目录下的-config-yml" class="headerlink" title="修改站点目录下的_config.yml"></a>修改站点目录下的_config.yml</h2><p>编辑hexo目录下的_config.yml，找到theme字段，修改为<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme: <span class="keyword">next</span></div></pre></td></tr></table></figure></p><p>注意，冒号后有空格！！！<br>其他可以修改的<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># Site</span></div><div class="line"><span class="built_in">title</span>: WalkStep's Blog                   <span class="comment">// 站点标题</span></div><div class="line">subtitle:                                <span class="comment">// 站点副标题</span></div><div class="line">description: First, crawl. Then, walk!   <span class="comment">// 站点描述</span></div><div class="line">author: WalkStep                         <span class="comment">// 你的名字</span></div><div class="line">language: zh-Hans                        <span class="comment">// 站点语言</span></div><div class="line">timezone:                                <span class="comment">// 站点时区</span></div><div class="line">avatar: /uploads/avatar.png              <span class="comment">// 头像</span></div><div class="line"><span class="meta">##等等其他不一一赘述</span></div></pre></td></tr></table></figure></p><h2 id="修改主题目录下的-config-yml"><a href="#修改主题目录下的-config-yml" class="headerlink" title="修改主题目录下的_config.yml"></a>修改主题目录下的_config.yml</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  home: /</div><div class="line">  categories: /categories</div><div class="line">  about: /about</div><div class="line">  archives: /archives</div><div class="line">  tags: /tags</div><div class="line"><span class="meta">  #</span><span class="bash">commonweal: /404.html</span></div><div class="line"><span class="meta">  #</span><span class="bash"><span class="comment"># 等等不一一赘述</span></span></div><div class="line"><span class="meta">  #</span><span class="bash"><span class="comment"># menu用来设置菜单，我这个地方设置了5个菜单选项，分别是首页、       </span></span></div><div class="line"><span class="meta">  #</span><span class="bash"><span class="comment"># 分类、关于、归档和标签，不让显示的菜单选项可以用#注释掉</span></span></div></pre></td></tr></table></figure><p>这个位置也有很多选项，其中比如常用的要设置tags，categories等一定要在这里配置好，不然后面显示不出来的。</p><h1 id="其他配置项"><a href="#其他配置项" class="headerlink" title="其他配置项"></a>其他配置项</h1><h2 id="添加标签tags页面"><a href="#添加标签tags页面" class="headerlink" title="添加标签tags页面"></a>添加标签tags页面</h2><p>定位到 Hexo 站点目录下，使用 hexo new page 新建一个页面，命名为 tags，布局格式为page：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd hexo目录</div><div class="line">hexo new<span class="built_in"> page </span>tags</div></pre></td></tr></table></figure></p><p>这时会在source文件夹下建一个tags文件夹。修改里面的index.md<br>修改为：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attr">title:</span> <span class="string">标签</span>            <span class="comment">##这个位置我试了好像中英文都可以</span></div><div class="line"><span class="attr">date:</span> <span class="number">2014</span><span class="bullet">-12</span><span class="bullet">-22</span> <span class="number">12</span><span class="string">:39:04</span></div><div class="line"><span class="attr">type:</span> <span class="string">"tags"</span></div><div class="line"><span class="attr">comments:</span> <span class="literal">false</span>       </div><div class="line"><span class="comment">##如果要关闭tags页面的评论可以设置comments为false，因为如果设置多说评论的话会在每个页面都设置评论，所以需要关闭。</span></div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure></p><p>这样以后tags页面在每次执行hexo generate后自动更新。</p><h2 id="添加分类categories页面"><a href="#添加分类categories页面" class="headerlink" title="添加分类categories页面"></a>添加分类categories页面</h2><p>跟上面标签一样，执行<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new<span class="built_in"> page </span>categories</div></pre></td></tr></table></figure></p><p>内容为：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">title:</span> <span class="string">分类</span></div><div class="line"><span class="attr">date:</span> <span class="number">2014</span><span class="bullet">-12</span><span class="bullet">-22</span> <span class="number">12</span><span class="string">:39:04</span></div><div class="line"><span class="attr">type:</span> <span class="string">"categories"</span></div><div class="line"><span class="attr">comments:</span> <span class="literal">false</span></div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure></p><h2 id="修改post"><a href="#修改post" class="headerlink" title="修改post"></a>修改post</h2><blockquote><p>之前我们添加了tags，categories。但是这时候即便我们写好博客分类也不会显示tags，categories。查了半天原来post的问题。<br>因为我们创建博客用的命令是<strong>hexo new [layout] “postName”</strong>其中layout是可选项，默认不填的话是post。<br>有哪些layout呢，请到<strong>scaffolds</strong>目录下查看，这些文件名称就是layout名称。当然你可以添加自己的layout，方法就是添加一个文件即可，同时你也可以编辑现有的layout，比如post的layout默认是hexo\scaffolds\post.md<br>找到post<br>没有修改之前是这样的<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">title:</span> <span class="string">&#123;</span> <span class="string">&#123;</span> <span class="string">title</span> <span class="string">&#125;</span> <span class="string">&#125;</span></div><div class="line"><span class="attr">date:</span> <span class="string">&#123;</span> <span class="string">&#123;</span> <span class="string">date</span> <span class="string">&#125;</span> <span class="string">&#125;</span></div><div class="line"><span class="attr">tags:</span></div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure></p></blockquote><p>修改为<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">title:</span> <span class="string">&#123;&#123;</span> <span class="string">title</span> <span class="string">&#125;&#125;</span></div><div class="line"><span class="attr">date:</span> <span class="string">&#123;&#123;</span> <span class="string">date</span> <span class="string">&#125;&#125;</span></div><div class="line"><span class="attr">categories:</span> <span class="string">&#123;&#123;</span> <span class="string">categories</span> <span class="string">&#125;&#125;</span></div><div class="line"><span class="attr">tags:</span> <span class="string">&#123;&#123;</span> <span class="string">tags</span> <span class="string">&#125;&#125;</span></div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure></p><p>如果还设置了其他的页面，同样添加进去。</p><blockquote><p><strong>这里再严肃提醒，注意冒号及大括号中的空格！！！</strong></p><h2 id="添加404页面"><a href="#添加404页面" class="headerlink" title="添加404页面"></a>添加404页面</h2><p>新建一个404.html文件，放到themes\next\source目录下，内容自己定。</p></blockquote><p>还有很多其他功能，下次有空添加~~</p><h1 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h1><h2 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h2><p>执行new命令，生成指定名称的文章至hexo\source_posts\postName.md。<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">new</span> <span class="type"></span>[layout] <span class="string">"postName"</span> <span class="meta">#新建文章</span></div></pre></td></tr></table></figure></p><p>layout的问题前面提到过。<br>这个时候一个新文件被创建好了，进去编辑一下标签。格式类似<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">title:</span> <span class="string">如何利用Mac+Github</span> <span class="string">pages+jekyll来搭建博客</span></div><div class="line"><span class="attr">date:</span> <span class="number">2017</span><span class="bullet">-10</span><span class="bullet">-01</span> <span class="number">04</span><span class="string">:38:04</span></div><div class="line"><span class="attr">categories:</span> <span class="string">[jekyll]</span></div><div class="line"><span class="attr">tags:</span> <span class="string">[jekyll]</span></div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure></p><p>然后可以在下面写博文啦。我是用csdn在线编辑好，然后复制到文件里面。这样本地文件就编辑好啦。</p><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><p>在终端里依次执行：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean  ##清除缓存文件(db.json)和已生成的静态文件 (public)</div><div class="line">hexo generate      ## 生成静态文件，可以简写hexo g</div><div class="line">hexo deploy        ## 部署网点，可以简写hexo d</div></pre></td></tr></table></figure></p><p>如果想现在本地看看效果，执行<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s    ## 启动本地服务器</div></pre></td></tr></table></figure></p><p>打开网址<a href="http://localhost:4000，你就可以看到你写的文章了" target="_blank" rel="external">http://localhost:4000，你就可以看到你写的文章了</a></p><p>然后等一会打开<a href="https://username.github.io/（你自己起的名字）就可以看到上传后的博客啦。" target="_blank" rel="external">https://username.github.io/（你自己起的名字）就可以看到上传后的博客啦。</a></p><hr><p>其他文章：<br><a href="https://chumingke.github.io/blog/2017/10/Mac-Github-pages-jekyll.html">如何利用Mac+Github pages+jekyll来编写博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;实际上我是先用jekyll搭建博客的。后来发现没有找到好看的主题，看到大神用的hexo的主题，感觉很好看，所以尝试了用hexo来搭建博客，如果有需要用jekyll搭建的，可以参考&lt;a href=&quot;https://chumingke.github.i
      
    
    </summary>
    
      <category term="hexo" scheme="https://chumingke.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://chumingke.github.io/tags/hexo/"/>
    
      <category term="github" scheme="https://chumingke.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>如何利用Mac+Github pages+jekyll来搭建博客</title>
    <link href="https://chumingke.github.io//blog/2017/10/Mac-Github-pages-jekyll.html"/>
    <id>https://chumingke.github.io//blog/2017/10/Mac-Github-pages-jekyll.html</id>
    <published>2017-09-30T20:38:04.000Z</published>
    <updated>2017-10-01T02:51:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>在网上查看了很多步骤，汇总一个笔记，有一些疏漏，之后有机会补充。实际上当我写完这个博客后，又去用hexo来编写博客了。所以有需要请看hexo的教程。</p><h1 id="第一部分-Github准备"><a href="#第一部分-Github准备" class="headerlink" title="第一部分 Github准备"></a>第一部分 Github准备</h1><ul><li>Mac 我用的是air</li><li>Github</li><li>jekyll</li><li>MarkDown</li></ul><p>1.首先去Github官网注册账号。<br>2.然后下载GIT。<br>3.然后配置SSH。<br>此时本地git已经成功与Github链接。<br>详细配置链接等请搜索其他教程。有很多教程，此处略过。</p><h1 id="第二部分-jekyll准备"><a href="#第二部分-jekyll准备" class="headerlink" title="第二部分 jekyll准备"></a>第二部分 jekyll准备</h1><p>首先大概说下<br>安装jekyll需要的环境支持有Ruby，Gem（Gem是Ruby第三方插件管理器）。这两个东西都是Mac自带的。<br>但是如果Ruby、gem版本太低。就无法正常安装。更新这两个东西需要链接到ruby的源地址。但是由于墙的原因下载会很慢甚至失败。解决办法是更改到淘宝的源地址。<br>因此我们的操作顺序是先更改源地址，再更新版本，再下载jekyll。</p><p>首先试一下安装jekyll。<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem <span class="keyword">install</span> jekyll</div></pre></td></tr></table></figure></p><p>如果遇到权限问题，则输入以下命令。<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem <span class="keyword">install</span> jekyll</div></pre></td></tr></table></figure></p><p>如果成功可以略过更新等操作。如果失败请继续。</p><h2 id="更新源地址"><a href="#更新源地址" class="headerlink" title="更新源地址"></a>更新源地址</h2><p>在此之前我们先检查一下版本。如果版本是最新的，那就可以略过下面的操作直接下载jekyll。下面的操作根据需求查看。</p><p>输入以下命令检查gem,ruby版本。<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">gem -v</span></div><div class="line"><span class="attribute">ruby -v</span></div></pre></td></tr></table></figure></p><blockquote><p>写本笔记的时候，gem最新版本为2.6.13，ruby最新版本为2.4。<br>如果版本较低，则需要更新版本。<br>更新版本前我们需要更改以下更新的源。因为墙的原因，如果不更新源下载速度会非常慢甚至失败。（也可以选择翻墙试试）</p></blockquote><p>我们用以下命令将源更改为淘宝源。<br>先检查源地址<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">gem sources -l</span></div></pre></td></tr></table></figure></p><p>然后移除源地址。(加上sudo是为了避免权限问题，也可以直接输命令。如果失败再加上sudo，后面如果有类似问题按同样方法，这里不再赘述)<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem sources --<span class="built_in">remove</span> http:<span class="comment">//rubygems.org/</span></div></pre></td></tr></table></figure></p><p>添加新地址<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem sources -<span class="selector-tag">a</span> https:<span class="comment">//gems.ruby-china.org/</span></div></pre></td></tr></table></figure></p><blockquote><p>其中淘宝源的地址更改过。所以如果在网上查过类似问题，看到的地址可能是别的。2017年9月的最新地址为<a href="https://gems.ruby-china.org/。可以访问RubyGems" target="_blank" rel="external">https://gems.ruby-china.org/。可以访问RubyGems</a> 镜像网站<a href="https://ruby.taobao.org来查看最新地址。" target="_blank" rel="external">https://ruby.taobao.org来查看最新地址。</a></p></blockquote><p>此时输入命令检查源地址。如果为<a href="https://gems.ruby-china.org/代表修改成功，可以更新ruby和gem啦。" target="_blank" rel="external">https://gems.ruby-china.org/代表修改成功，可以更新ruby和gem啦。</a></p><h2 id="更新gem-ruby"><a href="#更新gem-ruby" class="headerlink" title="更新gem, ruby"></a>更新gem, ruby</h2><p>输入以下命令更新gem<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 更新Gem(提示权限)</span></span></div><div class="line">gem update --system</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 检查gem版本</span></span></div><div class="line">gem -v</div></pre></td></tr></table></figure></p><p>此时gem应该更新好了。<br>然后来更新ruby，ruby的更新网上有几种方法。我采用的是先安装rvm，再更新ruby，这样比较方便容易成功。</p><blockquote><p>rvm是Ruby的版本管理器<br>为什么要安装rvm呢，因为rvm可以让你拥有多个版本的Ruby，并且可以在多个版本之间自由切换。</p></blockquote><p>第一步安装rvm<br>输入以下命令<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl -L get.rvm.io | bash -s stable</div><div class="line"><span class="keyword">source</span> ~<span class="regexp">/.rvm/</span>scripts<span class="regexp">/rvm</span></div></pre></td></tr></table></figure></p><p>加载完毕后输入<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rvm -v</span></div></pre></td></tr></table></figure></p><p>如果能显示版本说明安装成功。</p><p>第二步安装ruby<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#列出ruby可安装的版本信息</span></span></div><div class="line"> rvm list known</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#安装一个ruby版本</span></span></div><div class="line"> rvm install 2.4.1</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#如果想设置为默认版本，可以用这条命令来完成</span></span></div><div class="line"> rvm use 2.4.1 --default</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看已安装的ruby</span></span></div><div class="line"> rvm list</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#卸载一个已安装ruby版本</span></span></div><div class="line"> rvm remove 2.1.4</div></pre></td></tr></table></figure></p><p> 此时，ruby跟gem应该都更新好啦，可以安装jekyll了<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#安装</span></span></div><div class="line">sudo gem install jekyll</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#检查版本</span></span></div><div class="line">jekyll -v</div></pre></td></tr></table></figure></p><p>能显示版本，就说明安装成功了。</p><h1 id="第三部分-使用jekyll"><a href="#第三部分-使用jekyll" class="headerlink" title="第三部分 使用jekyll"></a>第三部分 使用jekyll</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#使用Jekyll创建你的博客站点</span></span></div><div class="line">jekyll new blog</div></pre></td></tr></table></figure><p>此时会在用户文件夹下创建一个blog文件夹。这个就是用jekyll创建的博客文件夹了。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#开启Jekyll服务</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#进入blog目录,记得一定要进入创建的目录，否则服务无法开启</span></span></div><div class="line">cd blog</div><div class="line">jekyll serve</div></pre></td></tr></table></figure></p><p>上面两个命令是为了开启本地服务，jekyll服务默认端口是4000，开启服务后打开浏览器，输入：<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 即可访问。<br>这个页面就是jekyll自动创建的博客页面。<br>可以选择自己写一套，也可以去网站<a href="http://jekyllthemes.org下载一套主题。" target="_blank" rel="external">http://jekyllthemes.org下载一套主题。</a></p><h1 id="第四部分-使用github-pages建立博客"><a href="#第四部分-使用github-pages建立博客" class="headerlink" title="第四部分 使用github pages建立博客"></a>第四部分 使用github pages建立博客</h1><p>基本有两种方法，一种是你的GitHub用户名建立的username.github.io这样的用户&amp;组织页（站），另一种是依附项目的pages。<br>想建立个人博客是用的第一种，形如beiyuu.github.io这样的可访问的站，每个用户名下面只能建立一个。<br>因此我们选择第一种。</p><p>建立一个新的repository，名字的位置填写为<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">usename<span class="selector-class">.github</span><span class="selector-class">.io</span></div></pre></td></tr></table></figure></p><p>（usename替换为自己的用户名）<br>然后进入Settings，拉到下面github pages，点击choose a theme，进去随便选一个模板，点击绿色的select theme。然后就自动生成两个文件。将该项目clone到本地。<br>cd 到仓库目录下执行<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">jekyll serve -B</span></div></pre></td></tr></table></figure></p><p>启动服务后，打开<a href="http://localhost:4000应该跟https://username.com/username.github.io/" target="_blank" rel="external">http://localhost:4000应该跟https://username.com/username.github.io/</a> 访问的应该是一模一样的。启动前确保其他目录下没有jekyll服务<br>通过ps aux|grep jekyll查看进程<br>有的话,用kill -9 进程号 杀掉其他进程。</p><p>这个位置我发现杀不掉其他进程，不清楚为什么，进程号一直在变。。。因为这个操作是为了可以在本地端网页查看编写效果，所以暂时不影响，略过。。。</p><p>然后将之前我们建的blog中的文件替换掉仓库中的文件。<br>到了这里其实就可以修改仓库中相应文件了，比如更换主题之类的。然后上传到Github。<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git status                             <span class="comment">#查看仓库状态</span></div><div class="line">git <span class="keyword">add</span><span class="bash"> --all                          <span class="comment">#添加到暂存区 </span></span></div><div class="line"><span class="bash">git commit -m <span class="string">"提交jekyll默认页面"</span>       <span class="comment">#提交到本地仓库</span></span></div><div class="line"><span class="bash">git push origin master       <span class="comment">#线上的站点是部署在master下面的</span></span></div></pre></td></tr></table></figure></p><blockquote><p>注意，在提交前，请确保_config.yml文件里面下面是这样配置的，因为这个是Github Pages的规定，如果选择了其他的模式，会立即收到编译警告的邮件提醒的。<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">highlighter:</span> rouge</div><div class="line"><span class="symbol">markdown:</span> kramdown</div></pre></td></tr></table></figure></p></blockquote><p>等待大概1-2分钟之后，再次刷新username.github.io，就能看到我们的blog了。</p><h1 id="第五部分-申请个人域名"><a href="#第五部分-申请个人域名" class="headerlink" title="第五部分 申请个人域名"></a>第五部分 申请个人域名</h1><p>这个网上教程也不少，就不多说了。</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>以上就基本上完成了博客的环境配置。<br>然后查资料的时候发现有的说hexo更好，大概的区别是。hexo设置更简单，速度更快。但是必须在本机上使用，如果去一台陌生机器就要重新设置环境。而jekyll可以直接在github修改？反正各有优劣，要选择的话请查清楚~<br>这一套东西研究完之后，发现还是用CSDN写博客方便啊……<br>因为那一套搞完了，真的要写的话还需要配置各种css等前端的东西，其实我不是搞前端的……还是要加强学习呀……</p><p>后来在查找主题的时候发现，jekyll并没有发现很漂亮的主题。反而hexo很好看。所以又去试了试hexo，发现配置好像更简单写。主题也很漂亮。详细过程请看另一篇教程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在网上查看了很多步骤，汇总一个笔记，有一些疏漏，之后有机会补充。实际上当我写完这个博客后，又去用hexo来编写博客了。所以有需要请看hexo的教程。&lt;/p&gt;
&lt;h1 id=&quot;第一部分-Github准备&quot;&gt;&lt;a href=&quot;#第一部分-Github准备&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="jekyll" scheme="https://chumingke.github.io/categories/jekyll/"/>
    
    
      <category term="jekyll" scheme="https://chumingke.github.io/tags/jekyll/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://chumingke.github.io//blog/2017/10/hello-world.html"/>
    <id>https://chumingke.github.io//blog/2017/10/hello-world.html</id>
    <published>2017-09-30T18:56:01.000Z</published>
    <updated>2017-09-30T18:56:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
